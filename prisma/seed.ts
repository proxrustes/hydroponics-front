import { PrismaClient } from "@prisma/client"

// –ü—Ä–∏–º–µ—Ä: –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è
// –í –Ω–æ—Ä–º–µ min/max –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
const initialPlantGroups = [
  {
    title: "–ü–ª–æ–¥–æ–Ω–æ—Å–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏",
    plants: [
      {
        name: "–¢–æ–º–∞—Ç",
        description: "–¢—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Ç–µ–ø–ª–∞.",
        norm: {
          temperatureMin: 20,
          temperatureMax: 28,
          airHumidityMin: 60,
          airHumidityMax: 80,
          substrateHumidityMin: 55,
          substrateHumidityMax: 75,
          phLevelMin: 5.8,
          phLevelMax: 6.5,
          nutrientConcentrationMin: 1.5,
          nutrientConcentrationMax: 2.5,
          solutionTemperatureMin: 18,
          solutionTemperatureMax: 22,
          solutionLvlMin: 50,
          solutionLvlMax: 90,
          lightIntensityMin: 500,
          lightIntensityMax: 700,
        },
      },
      {
        name: "–û–≥—É—Ä–µ—Ü",
        description: "–õ—é–±–∏—Ç –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∏ —Ç—ë–ø–ª—ã–π –∫–ª–∏–º–∞—Ç.",
        norm: {
          temperatureMin: 18,
          temperatureMax: 26,
          airHumidityMin: 65,
          airHumidityMax: 85,
          substrateHumidityMin: 60,
          substrateHumidityMax: 80,
          phLevelMin: 5.5,
          phLevelMax: 6.2,
          nutrientConcentrationMin: 1.2,
          nutrientConcentrationMax: 2.0,
          solutionTemperatureMin: 18,
          solutionTemperatureMax: 24,
          solutionLvlMin: 40,
          solutionLvlMax: 90,
          lightIntensityMin: 400,
          lightIntensityMax: 600,
        },
      },
    ],
  },
  {
    title: "–ó–µ–ª–µ–Ω—ñ –∫—É–ª—å—Ç—É—Ä–∏",
    plants: [
      {
        name: "–°–∞–ª–∞—Ç",
        description: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ–±–∏–ª—å–Ω—ã–π –ø–æ–ª–∏–≤.",
        norm: {
          temperatureMin: 16,
          temperatureMax: 24,
          airHumidityMin: 55,
          airHumidityMax: 75,
          substrateHumidityMin: 50,
          substrateHumidityMax: 70,
          phLevelMin: 5.5,
          phLevelMax: 6.5,
          nutrientConcentrationMin: 1.0,
          nutrientConcentrationMax: 1.8,
          solutionTemperatureMin: 16,
          solutionTemperatureMax: 20,
          solutionLvlMin: 40,
          solutionLvlMax: 80,
          lightIntensityMin: 300,
          lightIntensityMax: 500,
        },
      },
    ],
  },
]

const prisma = new PrismaClient()

async function seed() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
// 1. –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ª–æ–≥–∏
await prisma.zoneParamsLog.deleteMany({})
await prisma.stationParamsLog.deleteMany({})

// 2. –£–¥–∞–ª—è–µ–º ZoneNorms –ø–µ—Ä–µ–¥ Zone!
await prisma.zoneNorms.deleteMany({})

// 3. –£–¥–∞–ª—è–µ–º Zone, Station, ...
await prisma.zone.deleteMany({})
await prisma.station.deleteMany({})
await prisma.norms.deleteMany({})
await prisma.plant.deleteMany({})
await prisma.plantGroup.deleteMany({})
await prisma.user.deleteMany({})

  console.log("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã.")

  // 3. –°–æ–∑–¥–∞—ë–º plant groups + plants + norms
  for (const group of initialPlantGroups) {
    const plantGroup = await prisma.plantGroup.create({
      data: {
        name: group.title,
        plants: {
          create: group.plants.map((plant) => ({
            name: plant.name,
            description: plant.description,
            norms: {
              create: {
                temperatureMin: plant.norm.temperatureMin,
                temperatureMax: plant.norm.temperatureMax,
                airHumidityMin: plant.norm.airHumidityMin,
                airHumidityMax: plant.norm.airHumidityMax,
                substrateHumidityMin: plant.norm.substrateHumidityMin,
                substrateHumidityMax: plant.norm.substrateHumidityMax,
                phLevelMin: plant.norm.phLevelMin,
                phLevelMax: plant.norm.phLevelMax,
                nutrientConcentrationMin: plant.norm.nutrientConcentrationMin,
                nutrientConcentrationMax: plant.norm.nutrientConcentrationMax,
                solutionTemperatureMin: plant.norm.solutionTemperatureMin,
                solutionTemperatureMax: plant.norm.solutionTemperatureMax,
                solutionLvlMin: plant.norm.solutionLvlMin,
                solutionLvlMax: plant.norm.solutionLvlMax,
                lightIntensityMin: plant.norm.lightIntensityMin,
                lightIntensityMax: plant.norm.lightIntensityMax,
              },
            },
          })),
        },
      },
    })

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: ${plantGroup.name}`)
  }
  await prisma.user.createMany({
    data: [
      {
        email: "admin@hydro.local",
        name: "Nastya Ku",
        password: "admin", 
        role: "ADMIN",
      },
      {
        email: "user1@hydro.local",
        name: "Romka Khu",
        password: "userpass1",
        role: "USER",
      },
      {
        email: "user2@hydro.local",
        name: "Mary Jane",
        password: "userpass2",
        role: "USER",
      },
    ],
  })

  console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (1 –∞–¥–º–∏–Ω, 2 —é–∑–µ—Ä–∞)")
  // 4. –°–æ–∑–¥–∞—ë–º –æ–¥–Ω—É —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
  const station = await prisma.station.create({
    data: {
      name: "–ì—ñ–¥—Ä–æ–ø–æ–Ω–Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—è ‚Ññ1",
    },
  })
  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è: ${station.name}`)

  // 4.1 –°–æ–∑–¥–∞—ë–º –ª–æ–≥–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ (stationParamsLog)
  await prisma.stationParamsLog.createMany({
    data: [
      {
        stationId: station.id,
        recordedAt: new Date(),
        phLevel: 6.2,
        nutrientConcentration: 2.0,
        solutionTemperature: 22,
        solutionLvl: 85,
      },
      {
        stationId: station.id,
        recordedAt: new Date(Date.now() - 2 * 3600_000), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        phLevel: 6.1,
        nutrientConcentration: 2.4,
        solutionTemperature: 21,
        solutionLvl: 80,
      },
    ],
  })
  console.log("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã StationParamsLog –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ‚Ññ1")

  // 5. –ù–∞–π–¥—ë–º "–¢–æ–º–∞—Ç", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–º—É –∑–æ–Ω—É
  const tomatoPlant = await prisma.plant.findFirst({
    where: { name: "–¢–æ–º–∞—Ç" },
  })
  if (!tomatoPlant) {
    throw new Error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ "–¢–æ–º–∞—Ç"!')
  }

  // 6. –°–æ–∑–¥–∞—ë–º –∑–æ–Ω—É —Å —ç—Ç–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º
  const tomatoZone = await prisma.zone.create({
    data: {
      name: "–ó–æ–Ω–∞ –¥–ª—è –¢–æ–º–∞—Ç—ñ–≤",
      plantId: tomatoPlant.id,
      stationId: station.id,
      isLightOn: true,
    },
  })
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–æ–Ω–∞ –¥–ª—è —Ç–æ–º–∞—Ç–æ–≤: ${tomatoZone.name}`)

  // 7. (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Å–æ–∑–¥–∞—ë–º –ª–æ–≥–∏ –¥–ª—è –∑–æ–Ω—ã
  const now = Date.now()
  const logsData = Array.from({ length: 10 }).map((_, idx) => {
    const minutesAgo = (10 - idx) * 15 // —É–±—ã–≤–∞—é—â–∞—è —à–∫–∞–ª–∞
    return {
      zoneId: tomatoZone.id,
      recordedAt: new Date(now - minutesAgo * 60_000),
      temperature: 23 + Math.random(),       // 23.x
      airHumidity: 70 + Math.floor(Math.random() * 10),  // –æ—Ç 70 –¥–æ 79
      substrateHumidity: 65 + Math.floor(Math.random() * 10),
      isLightOn: idx % 2 === 0, // –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    }
  })

  await prisma.zoneParamsLog.createMany({
    data: logsData,
  })
  console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${logsData.length} –∑–∞–ø–∏—Å–µ–π ZoneParamsLog –¥–ª—è —Ç–æ–º–∞—Ç–æ–≤.`)

  // 8. (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–æ—Ä–º—ã –≤ ZoneNorms (–¥–æ–ø—É—Å—Ç–∏–º, —Ö–æ—Ç–∏–º –ø–æ–¥–Ω—è—Ç—å –º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É)
  await prisma.zoneNorms.create({
    data: {
      zoneId: tomatoZone.id,
      temperatureMax: 29, // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É
      airHumidityMin: 65,
    },
  })
  console.log("‚úÖ –°–æ–∑–¥–∞–Ω override ZoneNorms –¥–ª—è —Ç–æ–º–∞—Ç–æ–≤")

  console.log("üå± –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}

seed()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:", err)
    await prisma.$disconnect()
    process.exit(1)
  })
