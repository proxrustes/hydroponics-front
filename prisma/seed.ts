import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function seed() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...");

  // –ß–∏—Å—Ç–∏–º —Ç–∞–±–ª–∏—Ü—ã
  await prisma.zoneParamsLog.deleteMany({});
  await prisma.stationParamsLog.deleteMany({});
  await prisma.zoneNorms.deleteMany({});
  await prisma.zone.deleteMany({});
  await prisma.station.deleteMany({});
  await prisma.norms.deleteMany({});
  await prisma.plant.deleteMany({});
  await prisma.plantGroup.deleteMany({});
  await prisma.user.deleteMany({});

  console.log("üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");

  // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É
  const admin = await prisma.user.create({
    data: {
      email: "admin@hydro.local",
      name: "Nastya Ku",
      password: "admin",
      role: "ADMIN",
    },
  });

  const user1 = await prisma.user.create({
    data: {
      email: "user1@hydro.local",
      name: "Romka Khu",
      password: "userpass1",
      role: "USER",
    },
  });

  const user2 = await prisma.user.create({
    data: {
      email: "user2@hydro.local",
      name: "Mary Jane",
      password: "userpass2",
      role: "USER",
    },
  });

  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  // –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É —Ä–∞—Å—Ç–µ–Ω–∏–π
  const plantGroup = await prisma.plantGroup.create({
    data: {
      name: "–ü–ª–æ–¥–æ–Ω–æ—Å–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏",
    },
  });

  // –°–æ–∑–¥–∞—ë–º —Ä–∞—Å—Ç–µ–Ω–∏–µ –¢–æ–º–∞—Ç
  const tomatoPlant = await prisma.plant.create({
    data: {
      name: "–¢–æ–º–∞—Ç",
      description: "–¢—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ —Ç–µ–ø–ª–∞.",
      plantGroupId: plantGroup.id,
    },
  });

  // –ù–æ—Ä–º—ã –¥–ª—è –¢–æ–º–∞—Ç–æ–≤
  await prisma.norms.create({
    data: {
      plantId: tomatoPlant.id,
      temperatureMin: 20,
      temperatureMax: 28,
      airHumidityMin: 60,
      airHumidityMax: 80,
      substrateHumidityMin: 55,
      substrateHumidityMax: 75,
      phLevelMin: 5.8,
      phLevelMax: 6.5,
      nutrientConcentrationMin: 1.5,
      nutrientConcentrationMax: 2.5,
      solutionTemperatureMin: 18,
      solutionTemperatureMax: 22,
      solutionLvlMin: 50,
      solutionLvlMax: 90,
      lightIntensityMin: 500,
      lightIntensityMax: 700,
    },
  });

  console.log("‚úÖ –†–∞—Å—Ç–µ–Ω–∏—è –∏ –Ω–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  // –°–æ–∑–¥–∞—ë–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–π
  const station1 = await prisma.station.create({
    data: { name: "–°—Ç–∞–Ω—Ü—ñ—è 1 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1", userId: user1.id },
  });

  const station2 = await prisma.station.create({
    data: { name: "–°—Ç–∞–Ω—Ü—ñ—è 2 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1", userId: user1.id },
  });

  const station3 = await prisma.station.create({
    data: { name: "–°—Ç–∞–Ω—Ü—ñ—è 1 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 2", userId: user2.id },
  });

  console.log("‚úÖ –°—Ç–∞–Ω—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  // –°–æ–∑–¥–∞—ë–º –∑–æ–Ω—ã –ø–æ –æ–¥–Ω–æ–π
  const zone1 = await prisma.zone.create({
    data: {
      name: "–ó–æ–Ω–∞ A —Å—Ç–∞–Ω—Ü—ñ—ó 1",
      plantId: tomatoPlant.id,
      stationId: station1.id,
      isLightOn: true,
    },
  });

  const zone2 = await prisma.zone.create({
    data: {
      name: "–ó–æ–Ω–∞ B —Å—Ç–∞–Ω—Ü—ñ—ó 2",
      plantId: tomatoPlant.id,
      stationId: station2.id,
      isLightOn: false,
    },
  });

  const zone3 = await prisma.zone.create({
    data: {
      name: "–ó–æ–Ω–∞ A —Å—Ç–∞–Ω—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 2",
      plantId: tomatoPlant.id,
      stationId: station3.id,
      isLightOn: true,
    },
  });

  console.log("‚úÖ –ó–æ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  // –°–æ–∑–¥–∞—ë–º –ª–æ–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –æ–¥–Ω–æ–π
  await prisma.stationParamsLog.create({
    data: {
      stationId: station1.id,
      recordedAt: new Date(),
      phLevel: 6.2,
      nutrientConcentration: 2.0,
      solutionTemperature: 22,
      solutionLvl: 85,
    },
  });

  await prisma.stationParamsLog.create({
    data: {
      stationId: station2.id,
      recordedAt: new Date(),
      phLevel: 6.1,
      nutrientConcentration: 2.4,
      solutionTemperature: 21,
      solutionLvl: 80,
    },
  });

  console.log("‚úÖ –õ–æ–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  // –°–æ–∑–¥–∞—ë–º –ª–æ–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–æ–Ω
  const now = Date.now();
  for (let i = 0; i < 10; i++) {
    await prisma.zoneParamsLog.create({
      data: {
        zoneId: zone1.id,
        recordedAt: new Date(now - i * 15 * 60_000),
        temperature: 23 + Math.random(),
        airHumidity: 70 + Math.floor(Math.random() * 10),
        substrateHumidity: 65 + Math.floor(Math.random() * 10),
        isLightOn: i % 2 === 0,
      },
    });
  }

  for (let i = 0; i < 8; i++) {
    await prisma.zoneParamsLog.create({
      data: {
        zoneId: zone2.id,
        recordedAt: new Date(now - i * 20 * 60_000),
        temperature: 22 + Math.random(),
        airHumidity: 65 + Math.floor(Math.random() * 10),
        substrateHumidity: 60 + Math.floor(Math.random() * 10),
        isLightOn: i % 2 === 1,
      },
    });
  }

  // –õ–æ–≥–∏ –¥–ª—è zone3
  for (let i = 0; i < 6; i++) {
    await prisma.zoneParamsLog.create({
      data: {
        zoneId: zone3.id,
        recordedAt: new Date(now - i * 30 * 60_000),
        temperature: 21 + Math.random(),
        airHumidity: 68 + Math.floor(Math.random() * 10),
        substrateHumidity: 63 + Math.floor(Math.random() * 10),
        isLightOn: i % 2 === 0,
      },
    });
  }

  console.log("‚úÖ –õ–æ–≥–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  console.log("üå± –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
}

seed()
  .then(() => prisma.$disconnect())
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
    prisma.$disconnect();
    process.exit(1);
  });
