import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function seed() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...");

  await prisma.bucketParamsLog.deleteMany({});
  await prisma.bucketParams.deleteMany({});
  await prisma.bucketTargetParams.deleteMany({});

  await prisma.zoneScheduleInterval.deleteMany({});
  await prisma.zoneTargetParams.deleteMany({});
  await prisma.zoneParamsLog.deleteMany({});
  await prisma.zoneParams.deleteMany({});
  await prisma.zoneNorms.deleteMany({});
  await prisma.zone.deleteMany({});

  await prisma.norms.deleteMany({});
  await prisma.plant.deleteMany({});
  await prisma.plantGroup.deleteMany({});

  await prisma.station.deleteMany({});
  await prisma.user.deleteMany({});

  console.log("üßπ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞");

  const admin = await prisma.user.create({
    data: {
      email: "admin@hydro.local",
      name: "Nastya Ku",
      password: "admin",
      role: "ADMIN",
    },
  });

  const user1 = await prisma.user.create({
    data: {
      email: "user1@hydro.local",
      name: "Romka Khu",
      password: "userpass1",
      role: "USER",
    },
  });

  console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  const groups = [
    {
      name: "–ü–ª–æ–¥–æ–Ω–æ—Å–Ω—ñ —Ä–æ—Å–ª–∏–Ω–∏",
      plants: [
        {
          name: "–¢–æ–º–∞—Ç",
          description:
            "–¢–æ–º–∞—Ç–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –±–∞–≥–∞—Ç–æ —Å–≤—ñ—Ç–ª–∞, —Ç–µ–ø–ª–∞ —Ç–∞ –ø–æ–º—ñ—Ä–Ω–æ—ó –≤–æ–ª–æ–≥–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è. –í–æ–Ω–∏ —á—É—Ç–ª–∏–≤—ñ –¥–æ –ø–µ—Ä–µ–ø–∞–¥—ñ–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –æ—Å–æ–±–ª–∏–≤–æ –≤–Ω–æ—á—ñ. –î–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–æ–ª–æ–¥–∫–∏—Ö —Ç–∞ —Å–æ–∫–æ–≤–∏—Ç–∏—Ö –ø–ª–æ–¥—ñ–≤ –≤–∞–∂–ª–∏–≤–æ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è. –í —É–º–æ–≤–∞—Ö –≥—ñ–¥—Ä–æ–ø–æ–Ω—ñ–∫–∏ —Ç–æ–º–∞—Ç–∏ —á–∞—Å—Ç–æ –≤–∏—Ä–æ—â—É—é—Ç—å —ñ–∑ –ø—ñ–¥–≤'—è–∑–∫–æ—é –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å—Ç–µ–±–µ–ª. –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å pH –¥–ª—è –≤–∏—Ä–æ—â—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—å 5.8‚Äì6.5.",
        },
        { name: "–ü–µ—Ä–µ—Ü", description: "–ù—É–∂–¥–∞–µ—Ç—Å—è –≤ –≤—ã—Å–æ–∫–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏." },
        { name: "–û–≥—É—Ä–µ—Ü", description: "–¢—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≤–∞." },
        { name: "–ë–∞–∫–ª–∞–∂–∞–Ω", description: "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –ø–µ—Ä–µ–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—é." },
        { name: "–ö–∞–±–∞—á–æ–∫", description: "–ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π –æ–≤–æ—â." },
      ],
    },
    {
      name: "–õ–∏—Å—Ç–æ–≤—ñ –∫—É–ª—å—Ç—É—Ä–∏",
      plants: [
        { name: "–°–∞–ª–∞—Ç", description: "–õ—é–±–∏—Ç –ø—Ä–æ—Ö–ª–∞–¥—É –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ–ª–∏–≤." },
        { name: "–®–ø–∏–Ω–∞—Ç", description: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç–µ–Ω—å –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç—å." },
        { name: "–†—É–∫–æ–ª–∞", description: "–†–∞—Å—Ç—ë—Ç –±—ã—Å—Ç—Ä–æ, –ª—é–±–∏—Ç —Å–≤–µ—Ç." },
        { name: "–ö—Ä–µ—Å—Å-—Å–∞–ª–∞—Ç", description: "–•–æ—Ä–æ—à –¥–ª—è –º–∏–∫—Ä–æ–∑–µ–ª–µ–Ω–∏." },
        {
          name: "–ú–∞–Ω–≥–æ–ª—å–¥",
          description: "–õ–∏—Å—Ç–æ–≤–∞—è —Å–≤—ë–∫–ª–∞ —Å —è—Ä–∫–∏–º–∏ —á–µ—Ä–µ—à–∫–∞–º–∏.",
        },
      ],
    },
    {
      name: "–ó–∞–ø–∞—à–Ω—ñ —Ç—Ä–∞–≤–∏",
      plants: [
        { name: "–ë–∞–∑–∏–ª–∏–∫", description: "–ê—Ä–æ–º–∞—Ç–Ω–∞—è —Ç—Ä–∞–≤–∞, —Ç—Ä–µ–±—É—é—â–∞—è —Ç–µ–ø–ª–∞." },
        { name: "–ü–µ—Ç—Ä—É—à–∫–∞", description: "–•–æ–ª–æ–¥–æ—Å—Ç–æ–π–∫–∞—è, —Ä–∞—Å—Ç—ë—Ç –¥–æ–ª–≥–æ." },
        { name: "–ö–∏–Ω–∑–∞", description: "–õ—é–±–∏—Ç –ø—Ä–æ—Ö–ª–∞–¥—É, –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Ç—ë—Ç." },
        { name: "–¢–∏–º—å—è–Ω", description: "–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–π –∫ –ø–æ—á–≤–µ, –ª—é–±–∏—Ç —Å–æ–ª–Ω—Ü–µ." },
        { name: "–ú—è—Ç–∞", description: "–†–∞—Å—Ç—ë—Ç –∞–∫—Ç–∏–≤–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è." },
      ],
    },
  ];

  for (const group of groups) {
    const plantGroup = await prisma.plantGroup.create({
      data: { name: group.name },
    });

    for (const plant of group.plants) {
      const createdPlant = await prisma.plant.create({
        data: {
          name: plant.name,
          description: plant.description,
          plantGroupId: plantGroup.id,
        },
      });

      await prisma.norms.create({
        data: {
          plantId: createdPlant.id,
          temperatureMin: 18,
          temperatureMax: 26,
          airHumidityMin: 50,
          airHumidityMax: 80,
          substrateHumidityMin: 50,
          substrateHumidityMax: 75,
          phLevelMin: 5.5,
          phLevelMax: 6.5,
          nutrientConcentrationMin: 1.5,
          nutrientConcentrationMax: 2.5,
          solutionTemperatureMin: 18,
          solutionTemperatureMax: 22,
          solutionLvlMin: 50,
          solutionLvlMax: 90,
          lightIntensityMin: 400,
          lightIntensityMax: 700,
        },
      });
    }
  }

  console.log("‚úÖ –ì—Ä—É–ø–ø—ã –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã");

  const stationAdmin = await prisma.station.create({
    data: {
      name: "–°—Ç–∞–Ω—Ü—ñ—è –ø—ñ–¥–≤–∞–ª",
      uuid: "100",
      userId: user1.id,
      zones: {
        create: Array.from({ length: 4 }).map((_, i) => ({
          name: `–ó–æ–Ω–∞ A${i + 1}`,
          index: i,
        })),
      },
    },
    include: { zones: true },
  });

  const stationUser1 = await prisma.station.create({
    data: {
      name: "–°—Ç–∞–Ω—Ü—ñ—è –±–∞–ª–∫–æ–Ω",
      uuid: "101",
      userId: user1.id,
      zones: {
        create: Array.from({ length: 4 }).map((_, i) => ({
          name: `–ó–æ–Ω–∞ B${i + 1}`,
          index: i,
        })),
      },
    },
  });

  console.log("‚úÖ –°—Ç–∞–Ω—Ü—ñ—ó —Ç–∞ –∑–æ–Ω–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ");
  for (const zone of stationAdmin.zones) {
    await prisma.zoneParams.create({
      data: {
        zoneId: zone.id,
        temperature: 22.5,
        airHumidity: 65,
        substrateHumidity: 60,
      },
    });
  }

  console.log("‚úÖ –ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–æ–Ω –¥–ª—è —Å—Ç–∞–Ω—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–¥–∞–Ω—ñ");
  console.log("üå± –°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
}

seed()
  .then(() => prisma.$disconnect())
  .catch((err) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
    prisma.$disconnect();
    process.exit(1);
  });
