
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model PlantGroup
 * 
 */
export type PlantGroup = $Result.DefaultSelection<Prisma.$PlantGroupPayload>
/**
 * Model Plant
 * 
 */
export type Plant = $Result.DefaultSelection<Prisma.$PlantPayload>
/**
 * Model Norms
 * 
 */
export type Norms = $Result.DefaultSelection<Prisma.$NormsPayload>
/**
 * Model Station
 * 
 */
export type Station = $Result.DefaultSelection<Prisma.$StationPayload>
/**
 * Model Zone
 * 
 */
export type Zone = $Result.DefaultSelection<Prisma.$ZonePayload>
/**
 * Model ZoneNorms
 * 
 */
export type ZoneNorms = $Result.DefaultSelection<Prisma.$ZoneNormsPayload>
/**
 * Model StationParamsLog
 * 
 */
export type StationParamsLog = $Result.DefaultSelection<Prisma.$StationParamsLogPayload>
/**
 * Model ZoneParamsLog
 * 
 */
export type ZoneParamsLog = $Result.DefaultSelection<Prisma.$ZoneParamsLogPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more PlantGroups
 * const plantGroups = await prisma.plantGroup.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more PlantGroups
   * const plantGroups = await prisma.plantGroup.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.plantGroup`: Exposes CRUD operations for the **PlantGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantGroups
    * const plantGroups = await prisma.plantGroup.findMany()
    * ```
    */
  get plantGroup(): Prisma.PlantGroupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plant`: Exposes CRUD operations for the **Plant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plants
    * const plants = await prisma.plant.findMany()
    * ```
    */
  get plant(): Prisma.PlantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.norms`: Exposes CRUD operations for the **Norms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Norms
    * const norms = await prisma.norms.findMany()
    * ```
    */
  get norms(): Prisma.NormsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.station`: Exposes CRUD operations for the **Station** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stations
    * const stations = await prisma.station.findMany()
    * ```
    */
  get station(): Prisma.StationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.zone`: Exposes CRUD operations for the **Zone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Zones
    * const zones = await prisma.zone.findMany()
    * ```
    */
  get zone(): Prisma.ZoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.zoneNorms`: Exposes CRUD operations for the **ZoneNorms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ZoneNorms
    * const zoneNorms = await prisma.zoneNorms.findMany()
    * ```
    */
  get zoneNorms(): Prisma.ZoneNormsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stationParamsLog`: Exposes CRUD operations for the **StationParamsLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StationParamsLogs
    * const stationParamsLogs = await prisma.stationParamsLog.findMany()
    * ```
    */
  get stationParamsLog(): Prisma.StationParamsLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.zoneParamsLog`: Exposes CRUD operations for the **ZoneParamsLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ZoneParamsLogs
    * const zoneParamsLogs = await prisma.zoneParamsLog.findMany()
    * ```
    */
  get zoneParamsLog(): Prisma.ZoneParamsLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    PlantGroup: 'PlantGroup',
    Plant: 'Plant',
    Norms: 'Norms',
    Station: 'Station',
    Zone: 'Zone',
    ZoneNorms: 'ZoneNorms',
    StationParamsLog: 'StationParamsLog',
    ZoneParamsLog: 'ZoneParamsLog',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "plantGroup" | "plant" | "norms" | "station" | "zone" | "zoneNorms" | "stationParamsLog" | "zoneParamsLog" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      PlantGroup: {
        payload: Prisma.$PlantGroupPayload<ExtArgs>
        fields: Prisma.PlantGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          findFirst: {
            args: Prisma.PlantGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          findMany: {
            args: Prisma.PlantGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>[]
          }
          create: {
            args: Prisma.PlantGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          createMany: {
            args: Prisma.PlantGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlantGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>[]
          }
          delete: {
            args: Prisma.PlantGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          update: {
            args: Prisma.PlantGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          deleteMany: {
            args: Prisma.PlantGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlantGroupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>[]
          }
          upsert: {
            args: Prisma.PlantGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantGroupPayload>
          }
          aggregate: {
            args: Prisma.PlantGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantGroup>
          }
          groupBy: {
            args: Prisma.PlantGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantGroupCountArgs<ExtArgs>
            result: $Utils.Optional<PlantGroupCountAggregateOutputType> | number
          }
        }
      }
      Plant: {
        payload: Prisma.$PlantPayload<ExtArgs>
        fields: Prisma.PlantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          findFirst: {
            args: Prisma.PlantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          findMany: {
            args: Prisma.PlantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>[]
          }
          create: {
            args: Prisma.PlantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          createMany: {
            args: Prisma.PlantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>[]
          }
          delete: {
            args: Prisma.PlantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          update: {
            args: Prisma.PlantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          deleteMany: {
            args: Prisma.PlantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>[]
          }
          upsert: {
            args: Prisma.PlantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantPayload>
          }
          aggregate: {
            args: Prisma.PlantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlant>
          }
          groupBy: {
            args: Prisma.PlantGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantCountArgs<ExtArgs>
            result: $Utils.Optional<PlantCountAggregateOutputType> | number
          }
        }
      }
      Norms: {
        payload: Prisma.$NormsPayload<ExtArgs>
        fields: Prisma.NormsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NormsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NormsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          findFirst: {
            args: Prisma.NormsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NormsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          findMany: {
            args: Prisma.NormsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>[]
          }
          create: {
            args: Prisma.NormsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          createMany: {
            args: Prisma.NormsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NormsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>[]
          }
          delete: {
            args: Prisma.NormsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          update: {
            args: Prisma.NormsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          deleteMany: {
            args: Prisma.NormsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NormsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NormsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>[]
          }
          upsert: {
            args: Prisma.NormsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NormsPayload>
          }
          aggregate: {
            args: Prisma.NormsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNorms>
          }
          groupBy: {
            args: Prisma.NormsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NormsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NormsCountArgs<ExtArgs>
            result: $Utils.Optional<NormsCountAggregateOutputType> | number
          }
        }
      }
      Station: {
        payload: Prisma.$StationPayload<ExtArgs>
        fields: Prisma.StationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findFirst: {
            args: Prisma.StationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          findMany: {
            args: Prisma.StationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          create: {
            args: Prisma.StationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          createMany: {
            args: Prisma.StationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          delete: {
            args: Prisma.StationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          update: {
            args: Prisma.StationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          deleteMany: {
            args: Prisma.StationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>[]
          }
          upsert: {
            args: Prisma.StationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationPayload>
          }
          aggregate: {
            args: Prisma.StationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStation>
          }
          groupBy: {
            args: Prisma.StationGroupByArgs<ExtArgs>
            result: $Utils.Optional<StationGroupByOutputType>[]
          }
          count: {
            args: Prisma.StationCountArgs<ExtArgs>
            result: $Utils.Optional<StationCountAggregateOutputType> | number
          }
        }
      }
      Zone: {
        payload: Prisma.$ZonePayload<ExtArgs>
        fields: Prisma.ZoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findFirst: {
            args: Prisma.ZoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          findMany: {
            args: Prisma.ZoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          create: {
            args: Prisma.ZoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          createMany: {
            args: Prisma.ZoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          delete: {
            args: Prisma.ZoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          update: {
            args: Prisma.ZoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          deleteMany: {
            args: Prisma.ZoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ZoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>[]
          }
          upsert: {
            args: Prisma.ZoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZonePayload>
          }
          aggregate: {
            args: Prisma.ZoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZone>
          }
          groupBy: {
            args: Prisma.ZoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneCountAggregateOutputType> | number
          }
        }
      }
      ZoneNorms: {
        payload: Prisma.$ZoneNormsPayload<ExtArgs>
        fields: Prisma.ZoneNormsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneNormsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneNormsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          findFirst: {
            args: Prisma.ZoneNormsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneNormsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          findMany: {
            args: Prisma.ZoneNormsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>[]
          }
          create: {
            args: Prisma.ZoneNormsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          createMany: {
            args: Prisma.ZoneNormsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneNormsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>[]
          }
          delete: {
            args: Prisma.ZoneNormsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          update: {
            args: Prisma.ZoneNormsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          deleteMany: {
            args: Prisma.ZoneNormsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneNormsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ZoneNormsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>[]
          }
          upsert: {
            args: Prisma.ZoneNormsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneNormsPayload>
          }
          aggregate: {
            args: Prisma.ZoneNormsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZoneNorms>
          }
          groupBy: {
            args: Prisma.ZoneNormsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneNormsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneNormsCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneNormsCountAggregateOutputType> | number
          }
        }
      }
      StationParamsLog: {
        payload: Prisma.$StationParamsLogPayload<ExtArgs>
        fields: Prisma.StationParamsLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StationParamsLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StationParamsLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          findFirst: {
            args: Prisma.StationParamsLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StationParamsLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          findMany: {
            args: Prisma.StationParamsLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>[]
          }
          create: {
            args: Prisma.StationParamsLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          createMany: {
            args: Prisma.StationParamsLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StationParamsLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>[]
          }
          delete: {
            args: Prisma.StationParamsLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          update: {
            args: Prisma.StationParamsLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          deleteMany: {
            args: Prisma.StationParamsLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StationParamsLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StationParamsLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>[]
          }
          upsert: {
            args: Prisma.StationParamsLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StationParamsLogPayload>
          }
          aggregate: {
            args: Prisma.StationParamsLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStationParamsLog>
          }
          groupBy: {
            args: Prisma.StationParamsLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<StationParamsLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.StationParamsLogCountArgs<ExtArgs>
            result: $Utils.Optional<StationParamsLogCountAggregateOutputType> | number
          }
        }
      }
      ZoneParamsLog: {
        payload: Prisma.$ZoneParamsLogPayload<ExtArgs>
        fields: Prisma.ZoneParamsLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ZoneParamsLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ZoneParamsLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          findFirst: {
            args: Prisma.ZoneParamsLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ZoneParamsLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          findMany: {
            args: Prisma.ZoneParamsLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>[]
          }
          create: {
            args: Prisma.ZoneParamsLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          createMany: {
            args: Prisma.ZoneParamsLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ZoneParamsLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>[]
          }
          delete: {
            args: Prisma.ZoneParamsLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          update: {
            args: Prisma.ZoneParamsLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          deleteMany: {
            args: Prisma.ZoneParamsLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ZoneParamsLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ZoneParamsLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>[]
          }
          upsert: {
            args: Prisma.ZoneParamsLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ZoneParamsLogPayload>
          }
          aggregate: {
            args: Prisma.ZoneParamsLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZoneParamsLog>
          }
          groupBy: {
            args: Prisma.ZoneParamsLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ZoneParamsLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ZoneParamsLogCountArgs<ExtArgs>
            result: $Utils.Optional<ZoneParamsLogCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    plantGroup?: PlantGroupOmit
    plant?: PlantOmit
    norms?: NormsOmit
    station?: StationOmit
    zone?: ZoneOmit
    zoneNorms?: ZoneNormsOmit
    stationParamsLog?: StationParamsLogOmit
    zoneParamsLog?: ZoneParamsLogOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlantGroupCountOutputType
   */

  export type PlantGroupCountOutputType = {
    plants: number
  }

  export type PlantGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | PlantGroupCountOutputTypeCountPlantsArgs
  }

  // Custom InputTypes
  /**
   * PlantGroupCountOutputType without action
   */
  export type PlantGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroupCountOutputType
     */
    select?: PlantGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlantGroupCountOutputType without action
   */
  export type PlantGroupCountOutputTypeCountPlantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantWhereInput
  }


  /**
   * Count Type PlantCountOutputType
   */

  export type PlantCountOutputType = {
    zones: number
  }

  export type PlantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zones?: boolean | PlantCountOutputTypeCountZonesArgs
  }

  // Custom InputTypes
  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantCountOutputType
     */
    select?: PlantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlantCountOutputType without action
   */
  export type PlantCountOutputTypeCountZonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
  }


  /**
   * Count Type StationCountOutputType
   */

  export type StationCountOutputType = {
    zones: number
    StationParamsLog: number
  }

  export type StationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zones?: boolean | StationCountOutputTypeCountZonesArgs
    StationParamsLog?: boolean | StationCountOutputTypeCountStationParamsLogArgs
  }

  // Custom InputTypes
  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationCountOutputType
     */
    select?: StationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountZonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
  }

  /**
   * StationCountOutputType without action
   */
  export type StationCountOutputTypeCountStationParamsLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationParamsLogWhereInput
  }


  /**
   * Count Type ZoneCountOutputType
   */

  export type ZoneCountOutputType = {
    ZoneParamsLog: number
  }

  export type ZoneCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ZoneParamsLog?: boolean | ZoneCountOutputTypeCountZoneParamsLogArgs
  }

  // Custom InputTypes
  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneCountOutputType
     */
    select?: ZoneCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ZoneCountOutputType without action
   */
  export type ZoneCountOutputTypeCountZoneParamsLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneParamsLogWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    stations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stations?: boolean | UserCountOutputTypeCountStationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model PlantGroup
   */

  export type AggregatePlantGroup = {
    _count: PlantGroupCountAggregateOutputType | null
    _avg: PlantGroupAvgAggregateOutputType | null
    _sum: PlantGroupSumAggregateOutputType | null
    _min: PlantGroupMinAggregateOutputType | null
    _max: PlantGroupMaxAggregateOutputType | null
  }

  export type PlantGroupAvgAggregateOutputType = {
    id: number | null
  }

  export type PlantGroupSumAggregateOutputType = {
    id: number | null
  }

  export type PlantGroupMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PlantGroupMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PlantGroupCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PlantGroupAvgAggregateInputType = {
    id?: true
  }

  export type PlantGroupSumAggregateInputType = {
    id?: true
  }

  export type PlantGroupMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlantGroupMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlantGroupCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PlantGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantGroup to aggregate.
     */
    where?: PlantGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGroups to fetch.
     */
    orderBy?: PlantGroupOrderByWithRelationInput | PlantGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantGroups
    **/
    _count?: true | PlantGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlantGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlantGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantGroupMaxAggregateInputType
  }

  export type GetPlantGroupAggregateType<T extends PlantGroupAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantGroup[P]>
      : GetScalarType<T[P], AggregatePlantGroup[P]>
  }




  export type PlantGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantGroupWhereInput
    orderBy?: PlantGroupOrderByWithAggregationInput | PlantGroupOrderByWithAggregationInput[]
    by: PlantGroupScalarFieldEnum[] | PlantGroupScalarFieldEnum
    having?: PlantGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantGroupCountAggregateInputType | true
    _avg?: PlantGroupAvgAggregateInputType
    _sum?: PlantGroupSumAggregateInputType
    _min?: PlantGroupMinAggregateInputType
    _max?: PlantGroupMaxAggregateInputType
  }

  export type PlantGroupGroupByOutputType = {
    id: number
    name: string
    _count: PlantGroupCountAggregateOutputType | null
    _avg: PlantGroupAvgAggregateOutputType | null
    _sum: PlantGroupSumAggregateOutputType | null
    _min: PlantGroupMinAggregateOutputType | null
    _max: PlantGroupMaxAggregateOutputType | null
  }

  type GetPlantGroupGroupByPayload<T extends PlantGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantGroupGroupByOutputType[P]>
            : GetScalarType<T[P], PlantGroupGroupByOutputType[P]>
        }
      >
    >


  export type PlantGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plants?: boolean | PlantGroup$plantsArgs<ExtArgs>
    _count?: boolean | PlantGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantGroup"]>

  export type PlantGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["plantGroup"]>

  export type PlantGroupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["plantGroup"]>

  export type PlantGroupSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PlantGroupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["plantGroup"]>
  export type PlantGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | PlantGroup$plantsArgs<ExtArgs>
    _count?: boolean | PlantGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlantGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlantGroupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlantGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantGroup"
    objects: {
      plants: Prisma.$PlantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["plantGroup"]>
    composites: {}
  }

  type PlantGroupGetPayload<S extends boolean | null | undefined | PlantGroupDefaultArgs> = $Result.GetResult<Prisma.$PlantGroupPayload, S>

  type PlantGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantGroupCountAggregateInputType | true
    }

  export interface PlantGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantGroup'], meta: { name: 'PlantGroup' } }
    /**
     * Find zero or one PlantGroup that matches the filter.
     * @param {PlantGroupFindUniqueArgs} args - Arguments to find a PlantGroup
     * @example
     * // Get one PlantGroup
     * const plantGroup = await prisma.plantGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantGroupFindUniqueArgs>(args: SelectSubset<T, PlantGroupFindUniqueArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlantGroup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantGroupFindUniqueOrThrowArgs} args - Arguments to find a PlantGroup
     * @example
     * // Get one PlantGroup
     * const plantGroup = await prisma.plantGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupFindFirstArgs} args - Arguments to find a PlantGroup
     * @example
     * // Get one PlantGroup
     * const plantGroup = await prisma.plantGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantGroupFindFirstArgs>(args?: SelectSubset<T, PlantGroupFindFirstArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlantGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupFindFirstOrThrowArgs} args - Arguments to find a PlantGroup
     * @example
     * // Get one PlantGroup
     * const plantGroup = await prisma.plantGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlantGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantGroups
     * const plantGroups = await prisma.plantGroup.findMany()
     * 
     * // Get first 10 PlantGroups
     * const plantGroups = await prisma.plantGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantGroupWithIdOnly = await prisma.plantGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantGroupFindManyArgs>(args?: SelectSubset<T, PlantGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlantGroup.
     * @param {PlantGroupCreateArgs} args - Arguments to create a PlantGroup.
     * @example
     * // Create one PlantGroup
     * const PlantGroup = await prisma.plantGroup.create({
     *   data: {
     *     // ... data to create a PlantGroup
     *   }
     * })
     * 
     */
    create<T extends PlantGroupCreateArgs>(args: SelectSubset<T, PlantGroupCreateArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlantGroups.
     * @param {PlantGroupCreateManyArgs} args - Arguments to create many PlantGroups.
     * @example
     * // Create many PlantGroups
     * const plantGroup = await prisma.plantGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantGroupCreateManyArgs>(args?: SelectSubset<T, PlantGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlantGroups and returns the data saved in the database.
     * @param {PlantGroupCreateManyAndReturnArgs} args - Arguments to create many PlantGroups.
     * @example
     * // Create many PlantGroups
     * const plantGroup = await prisma.plantGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlantGroups and only return the `id`
     * const plantGroupWithIdOnly = await prisma.plantGroup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlantGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, PlantGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlantGroup.
     * @param {PlantGroupDeleteArgs} args - Arguments to delete one PlantGroup.
     * @example
     * // Delete one PlantGroup
     * const PlantGroup = await prisma.plantGroup.delete({
     *   where: {
     *     // ... filter to delete one PlantGroup
     *   }
     * })
     * 
     */
    delete<T extends PlantGroupDeleteArgs>(args: SelectSubset<T, PlantGroupDeleteArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlantGroup.
     * @param {PlantGroupUpdateArgs} args - Arguments to update one PlantGroup.
     * @example
     * // Update one PlantGroup
     * const plantGroup = await prisma.plantGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantGroupUpdateArgs>(args: SelectSubset<T, PlantGroupUpdateArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlantGroups.
     * @param {PlantGroupDeleteManyArgs} args - Arguments to filter PlantGroups to delete.
     * @example
     * // Delete a few PlantGroups
     * const { count } = await prisma.plantGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantGroupDeleteManyArgs>(args?: SelectSubset<T, PlantGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantGroups
     * const plantGroup = await prisma.plantGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantGroupUpdateManyArgs>(args: SelectSubset<T, PlantGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantGroups and returns the data updated in the database.
     * @param {PlantGroupUpdateManyAndReturnArgs} args - Arguments to update many PlantGroups.
     * @example
     * // Update many PlantGroups
     * const plantGroup = await prisma.plantGroup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlantGroups and only return the `id`
     * const plantGroupWithIdOnly = await prisma.plantGroup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlantGroupUpdateManyAndReturnArgs>(args: SelectSubset<T, PlantGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlantGroup.
     * @param {PlantGroupUpsertArgs} args - Arguments to update or create a PlantGroup.
     * @example
     * // Update or create a PlantGroup
     * const plantGroup = await prisma.plantGroup.upsert({
     *   create: {
     *     // ... data to create a PlantGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantGroup we want to update
     *   }
     * })
     */
    upsert<T extends PlantGroupUpsertArgs>(args: SelectSubset<T, PlantGroupUpsertArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlantGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupCountArgs} args - Arguments to filter PlantGroups to count.
     * @example
     * // Count the number of PlantGroups
     * const count = await prisma.plantGroup.count({
     *   where: {
     *     // ... the filter for the PlantGroups we want to count
     *   }
     * })
    **/
    count<T extends PlantGroupCountArgs>(
      args?: Subset<T, PlantGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantGroupAggregateArgs>(args: Subset<T, PlantGroupAggregateArgs>): Prisma.PrismaPromise<GetPlantGroupAggregateType<T>>

    /**
     * Group by PlantGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantGroupGroupByArgs['orderBy'] }
        : { orderBy?: PlantGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantGroup model
   */
  readonly fields: PlantGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plants<T extends PlantGroup$plantsArgs<ExtArgs> = {}>(args?: Subset<T, PlantGroup$plantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlantGroup model
   */
  interface PlantGroupFieldRefs {
    readonly id: FieldRef<"PlantGroup", 'Int'>
    readonly name: FieldRef<"PlantGroup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlantGroup findUnique
   */
  export type PlantGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlantGroup to fetch.
     */
    where: PlantGroupWhereUniqueInput
  }

  /**
   * PlantGroup findUniqueOrThrow
   */
  export type PlantGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlantGroup to fetch.
     */
    where: PlantGroupWhereUniqueInput
  }

  /**
   * PlantGroup findFirst
   */
  export type PlantGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlantGroup to fetch.
     */
    where?: PlantGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGroups to fetch.
     */
    orderBy?: PlantGroupOrderByWithRelationInput | PlantGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantGroups.
     */
    cursor?: PlantGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantGroups.
     */
    distinct?: PlantGroupScalarFieldEnum | PlantGroupScalarFieldEnum[]
  }

  /**
   * PlantGroup findFirstOrThrow
   */
  export type PlantGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlantGroup to fetch.
     */
    where?: PlantGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGroups to fetch.
     */
    orderBy?: PlantGroupOrderByWithRelationInput | PlantGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantGroups.
     */
    cursor?: PlantGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantGroups.
     */
    distinct?: PlantGroupScalarFieldEnum | PlantGroupScalarFieldEnum[]
  }

  /**
   * PlantGroup findMany
   */
  export type PlantGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlantGroups to fetch.
     */
    where?: PlantGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantGroups to fetch.
     */
    orderBy?: PlantGroupOrderByWithRelationInput | PlantGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantGroups.
     */
    cursor?: PlantGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantGroups.
     */
    skip?: number
    distinct?: PlantGroupScalarFieldEnum | PlantGroupScalarFieldEnum[]
  }

  /**
   * PlantGroup create
   */
  export type PlantGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantGroup.
     */
    data: XOR<PlantGroupCreateInput, PlantGroupUncheckedCreateInput>
  }

  /**
   * PlantGroup createMany
   */
  export type PlantGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantGroups.
     */
    data: PlantGroupCreateManyInput | PlantGroupCreateManyInput[]
  }

  /**
   * PlantGroup createManyAndReturn
   */
  export type PlantGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * The data used to create many PlantGroups.
     */
    data: PlantGroupCreateManyInput | PlantGroupCreateManyInput[]
  }

  /**
   * PlantGroup update
   */
  export type PlantGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantGroup.
     */
    data: XOR<PlantGroupUpdateInput, PlantGroupUncheckedUpdateInput>
    /**
     * Choose, which PlantGroup to update.
     */
    where: PlantGroupWhereUniqueInput
  }

  /**
   * PlantGroup updateMany
   */
  export type PlantGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantGroups.
     */
    data: XOR<PlantGroupUpdateManyMutationInput, PlantGroupUncheckedUpdateManyInput>
    /**
     * Filter which PlantGroups to update
     */
    where?: PlantGroupWhereInput
    /**
     * Limit how many PlantGroups to update.
     */
    limit?: number
  }

  /**
   * PlantGroup updateManyAndReturn
   */
  export type PlantGroupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * The data used to update PlantGroups.
     */
    data: XOR<PlantGroupUpdateManyMutationInput, PlantGroupUncheckedUpdateManyInput>
    /**
     * Filter which PlantGroups to update
     */
    where?: PlantGroupWhereInput
    /**
     * Limit how many PlantGroups to update.
     */
    limit?: number
  }

  /**
   * PlantGroup upsert
   */
  export type PlantGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantGroup to update in case it exists.
     */
    where: PlantGroupWhereUniqueInput
    /**
     * In case the PlantGroup found by the `where` argument doesn't exist, create a new PlantGroup with this data.
     */
    create: XOR<PlantGroupCreateInput, PlantGroupUncheckedCreateInput>
    /**
     * In case the PlantGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantGroupUpdateInput, PlantGroupUncheckedUpdateInput>
  }

  /**
   * PlantGroup delete
   */
  export type PlantGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
    /**
     * Filter which PlantGroup to delete.
     */
    where: PlantGroupWhereUniqueInput
  }

  /**
   * PlantGroup deleteMany
   */
  export type PlantGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantGroups to delete
     */
    where?: PlantGroupWhereInput
    /**
     * Limit how many PlantGroups to delete.
     */
    limit?: number
  }

  /**
   * PlantGroup.plants
   */
  export type PlantGroup$plantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    where?: PlantWhereInput
    orderBy?: PlantOrderByWithRelationInput | PlantOrderByWithRelationInput[]
    cursor?: PlantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * PlantGroup without action
   */
  export type PlantGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantGroup
     */
    select?: PlantGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlantGroup
     */
    omit?: PlantGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantGroupInclude<ExtArgs> | null
  }


  /**
   * Model Plant
   */

  export type AggregatePlant = {
    _count: PlantCountAggregateOutputType | null
    _avg: PlantAvgAggregateOutputType | null
    _sum: PlantSumAggregateOutputType | null
    _min: PlantMinAggregateOutputType | null
    _max: PlantMaxAggregateOutputType | null
  }

  export type PlantAvgAggregateOutputType = {
    id: number | null
    plantGroupId: number | null
  }

  export type PlantSumAggregateOutputType = {
    id: number | null
    plantGroupId: number | null
  }

  export type PlantMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    plantGroupId: number | null
  }

  export type PlantMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    plantGroupId: number | null
  }

  export type PlantCountAggregateOutputType = {
    id: number
    name: number
    description: number
    plantGroupId: number
    _all: number
  }


  export type PlantAvgAggregateInputType = {
    id?: true
    plantGroupId?: true
  }

  export type PlantSumAggregateInputType = {
    id?: true
    plantGroupId?: true
  }

  export type PlantMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    plantGroupId?: true
  }

  export type PlantMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    plantGroupId?: true
  }

  export type PlantCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    plantGroupId?: true
    _all?: true
  }

  export type PlantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plant to aggregate.
     */
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantOrderByWithRelationInput | PlantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plants
    **/
    _count?: true | PlantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantMaxAggregateInputType
  }

  export type GetPlantAggregateType<T extends PlantAggregateArgs> = {
        [P in keyof T & keyof AggregatePlant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlant[P]>
      : GetScalarType<T[P], AggregatePlant[P]>
  }




  export type PlantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantWhereInput
    orderBy?: PlantOrderByWithAggregationInput | PlantOrderByWithAggregationInput[]
    by: PlantScalarFieldEnum[] | PlantScalarFieldEnum
    having?: PlantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantCountAggregateInputType | true
    _avg?: PlantAvgAggregateInputType
    _sum?: PlantSumAggregateInputType
    _min?: PlantMinAggregateInputType
    _max?: PlantMaxAggregateInputType
  }

  export type PlantGroupByOutputType = {
    id: number
    name: string
    description: string
    plantGroupId: number
    _count: PlantCountAggregateOutputType | null
    _avg: PlantAvgAggregateOutputType | null
    _sum: PlantSumAggregateOutputType | null
    _min: PlantMinAggregateOutputType | null
    _max: PlantMaxAggregateOutputType | null
  }

  type GetPlantGroupByPayload<T extends PlantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantGroupByOutputType[P]>
            : GetScalarType<T[P], PlantGroupByOutputType[P]>
        }
      >
    >


  export type PlantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    plantGroupId?: boolean
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
    norms?: boolean | Plant$normsArgs<ExtArgs>
    zones?: boolean | Plant$zonesArgs<ExtArgs>
    _count?: boolean | PlantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plant"]>

  export type PlantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    plantGroupId?: boolean
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plant"]>

  export type PlantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    plantGroupId?: boolean
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plant"]>

  export type PlantSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    plantGroupId?: boolean
  }

  export type PlantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "plantGroupId", ExtArgs["result"]["plant"]>
  export type PlantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
    norms?: boolean | Plant$normsArgs<ExtArgs>
    zones?: boolean | Plant$zonesArgs<ExtArgs>
    _count?: boolean | PlantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
  }
  export type PlantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plantGroup?: boolean | PlantGroupDefaultArgs<ExtArgs>
  }

  export type $PlantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plant"
    objects: {
      plantGroup: Prisma.$PlantGroupPayload<ExtArgs>
      norms: Prisma.$NormsPayload<ExtArgs> | null
      zones: Prisma.$ZonePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      plantGroupId: number
    }, ExtArgs["result"]["plant"]>
    composites: {}
  }

  type PlantGetPayload<S extends boolean | null | undefined | PlantDefaultArgs> = $Result.GetResult<Prisma.$PlantPayload, S>

  type PlantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlantCountAggregateInputType | true
    }

  export interface PlantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plant'], meta: { name: 'Plant' } }
    /**
     * Find zero or one Plant that matches the filter.
     * @param {PlantFindUniqueArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantFindUniqueArgs>(args: SelectSubset<T, PlantFindUniqueArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Plant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlantFindUniqueOrThrowArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFindFirstArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantFindFirstArgs>(args?: SelectSubset<T, PlantFindFirstArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFindFirstOrThrowArgs} args - Arguments to find a Plant
     * @example
     * // Get one Plant
     * const plant = await prisma.plant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Plants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plants
     * const plants = await prisma.plant.findMany()
     * 
     * // Get first 10 Plants
     * const plants = await prisma.plant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantWithIdOnly = await prisma.plant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantFindManyArgs>(args?: SelectSubset<T, PlantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Plant.
     * @param {PlantCreateArgs} args - Arguments to create a Plant.
     * @example
     * // Create one Plant
     * const Plant = await prisma.plant.create({
     *   data: {
     *     // ... data to create a Plant
     *   }
     * })
     * 
     */
    create<T extends PlantCreateArgs>(args: SelectSubset<T, PlantCreateArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Plants.
     * @param {PlantCreateManyArgs} args - Arguments to create many Plants.
     * @example
     * // Create many Plants
     * const plant = await prisma.plant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantCreateManyArgs>(args?: SelectSubset<T, PlantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plants and returns the data saved in the database.
     * @param {PlantCreateManyAndReturnArgs} args - Arguments to create many Plants.
     * @example
     * // Create many Plants
     * const plant = await prisma.plant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plants and only return the `id`
     * const plantWithIdOnly = await prisma.plant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlantCreateManyAndReturnArgs>(args?: SelectSubset<T, PlantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Plant.
     * @param {PlantDeleteArgs} args - Arguments to delete one Plant.
     * @example
     * // Delete one Plant
     * const Plant = await prisma.plant.delete({
     *   where: {
     *     // ... filter to delete one Plant
     *   }
     * })
     * 
     */
    delete<T extends PlantDeleteArgs>(args: SelectSubset<T, PlantDeleteArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Plant.
     * @param {PlantUpdateArgs} args - Arguments to update one Plant.
     * @example
     * // Update one Plant
     * const plant = await prisma.plant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantUpdateArgs>(args: SelectSubset<T, PlantUpdateArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Plants.
     * @param {PlantDeleteManyArgs} args - Arguments to filter Plants to delete.
     * @example
     * // Delete a few Plants
     * const { count } = await prisma.plant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantDeleteManyArgs>(args?: SelectSubset<T, PlantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plants
     * const plant = await prisma.plant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantUpdateManyArgs>(args: SelectSubset<T, PlantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plants and returns the data updated in the database.
     * @param {PlantUpdateManyAndReturnArgs} args - Arguments to update many Plants.
     * @example
     * // Update many Plants
     * const plant = await prisma.plant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Plants and only return the `id`
     * const plantWithIdOnly = await prisma.plant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlantUpdateManyAndReturnArgs>(args: SelectSubset<T, PlantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Plant.
     * @param {PlantUpsertArgs} args - Arguments to update or create a Plant.
     * @example
     * // Update or create a Plant
     * const plant = await prisma.plant.upsert({
     *   create: {
     *     // ... data to create a Plant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plant we want to update
     *   }
     * })
     */
    upsert<T extends PlantUpsertArgs>(args: SelectSubset<T, PlantUpsertArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantCountArgs} args - Arguments to filter Plants to count.
     * @example
     * // Count the number of Plants
     * const count = await prisma.plant.count({
     *   where: {
     *     // ... the filter for the Plants we want to count
     *   }
     * })
    **/
    count<T extends PlantCountArgs>(
      args?: Subset<T, PlantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantAggregateArgs>(args: Subset<T, PlantAggregateArgs>): Prisma.PrismaPromise<GetPlantAggregateType<T>>

    /**
     * Group by Plant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantGroupByArgs['orderBy'] }
        : { orderBy?: PlantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plant model
   */
  readonly fields: PlantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plantGroup<T extends PlantGroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantGroupDefaultArgs<ExtArgs>>): Prisma__PlantGroupClient<$Result.GetResult<Prisma.$PlantGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    norms<T extends Plant$normsArgs<ExtArgs> = {}>(args?: Subset<T, Plant$normsArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    zones<T extends Plant$zonesArgs<ExtArgs> = {}>(args?: Subset<T, Plant$zonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plant model
   */
  interface PlantFieldRefs {
    readonly id: FieldRef<"Plant", 'Int'>
    readonly name: FieldRef<"Plant", 'String'>
    readonly description: FieldRef<"Plant", 'String'>
    readonly plantGroupId: FieldRef<"Plant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Plant findUnique
   */
  export type PlantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter, which Plant to fetch.
     */
    where: PlantWhereUniqueInput
  }

  /**
   * Plant findUniqueOrThrow
   */
  export type PlantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter, which Plant to fetch.
     */
    where: PlantWhereUniqueInput
  }

  /**
   * Plant findFirst
   */
  export type PlantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter, which Plant to fetch.
     */
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantOrderByWithRelationInput | PlantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plants.
     */
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plants.
     */
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * Plant findFirstOrThrow
   */
  export type PlantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter, which Plant to fetch.
     */
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantOrderByWithRelationInput | PlantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plants.
     */
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plants.
     */
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * Plant findMany
   */
  export type PlantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where?: PlantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantOrderByWithRelationInput | PlantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plants.
     */
    cursor?: PlantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    distinct?: PlantScalarFieldEnum | PlantScalarFieldEnum[]
  }

  /**
   * Plant create
   */
  export type PlantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * The data needed to create a Plant.
     */
    data: XOR<PlantCreateInput, PlantUncheckedCreateInput>
  }

  /**
   * Plant createMany
   */
  export type PlantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plants.
     */
    data: PlantCreateManyInput | PlantCreateManyInput[]
  }

  /**
   * Plant createManyAndReturn
   */
  export type PlantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * The data used to create many Plants.
     */
    data: PlantCreateManyInput | PlantCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plant update
   */
  export type PlantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * The data needed to update a Plant.
     */
    data: XOR<PlantUpdateInput, PlantUncheckedUpdateInput>
    /**
     * Choose, which Plant to update.
     */
    where: PlantWhereUniqueInput
  }

  /**
   * Plant updateMany
   */
  export type PlantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plants.
     */
    data: XOR<PlantUpdateManyMutationInput, PlantUncheckedUpdateManyInput>
    /**
     * Filter which Plants to update
     */
    where?: PlantWhereInput
    /**
     * Limit how many Plants to update.
     */
    limit?: number
  }

  /**
   * Plant updateManyAndReturn
   */
  export type PlantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * The data used to update Plants.
     */
    data: XOR<PlantUpdateManyMutationInput, PlantUncheckedUpdateManyInput>
    /**
     * Filter which Plants to update
     */
    where?: PlantWhereInput
    /**
     * Limit how many Plants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plant upsert
   */
  export type PlantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * The filter to search for the Plant to update in case it exists.
     */
    where: PlantWhereUniqueInput
    /**
     * In case the Plant found by the `where` argument doesn't exist, create a new Plant with this data.
     */
    create: XOR<PlantCreateInput, PlantUncheckedCreateInput>
    /**
     * In case the Plant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantUpdateInput, PlantUncheckedUpdateInput>
  }

  /**
   * Plant delete
   */
  export type PlantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
    /**
     * Filter which Plant to delete.
     */
    where: PlantWhereUniqueInput
  }

  /**
   * Plant deleteMany
   */
  export type PlantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plants to delete
     */
    where?: PlantWhereInput
    /**
     * Limit how many Plants to delete.
     */
    limit?: number
  }

  /**
   * Plant.norms
   */
  export type Plant$normsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    where?: NormsWhereInput
  }

  /**
   * Plant.zones
   */
  export type Plant$zonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    cursor?: ZoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Plant without action
   */
  export type PlantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plant
     */
    select?: PlantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plant
     */
    omit?: PlantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlantInclude<ExtArgs> | null
  }


  /**
   * Model Norms
   */

  export type AggregateNorms = {
    _count: NormsCountAggregateOutputType | null
    _avg: NormsAvgAggregateOutputType | null
    _sum: NormsSumAggregateOutputType | null
    _min: NormsMinAggregateOutputType | null
    _max: NormsMaxAggregateOutputType | null
  }

  export type NormsAvgAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    plantId: number | null
  }

  export type NormsSumAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    plantId: number | null
  }

  export type NormsMinAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    plantId: number | null
  }

  export type NormsMaxAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    plantId: number | null
  }

  export type NormsCountAggregateOutputType = {
    id: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    plantId: number
    _all: number
  }


  export type NormsAvgAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    plantId?: true
  }

  export type NormsSumAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    plantId?: true
  }

  export type NormsMinAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    plantId?: true
  }

  export type NormsMaxAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    plantId?: true
  }

  export type NormsCountAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    plantId?: true
    _all?: true
  }

  export type NormsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Norms to aggregate.
     */
    where?: NormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Norms to fetch.
     */
    orderBy?: NormsOrderByWithRelationInput | NormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Norms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Norms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Norms
    **/
    _count?: true | NormsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NormsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NormsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NormsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NormsMaxAggregateInputType
  }

  export type GetNormsAggregateType<T extends NormsAggregateArgs> = {
        [P in keyof T & keyof AggregateNorms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNorms[P]>
      : GetScalarType<T[P], AggregateNorms[P]>
  }




  export type NormsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NormsWhereInput
    orderBy?: NormsOrderByWithAggregationInput | NormsOrderByWithAggregationInput[]
    by: NormsScalarFieldEnum[] | NormsScalarFieldEnum
    having?: NormsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NormsCountAggregateInputType | true
    _avg?: NormsAvgAggregateInputType
    _sum?: NormsSumAggregateInputType
    _min?: NormsMinAggregateInputType
    _max?: NormsMaxAggregateInputType
  }

  export type NormsGroupByOutputType = {
    id: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    plantId: number
    _count: NormsCountAggregateOutputType | null
    _avg: NormsAvgAggregateOutputType | null
    _sum: NormsSumAggregateOutputType | null
    _min: NormsMinAggregateOutputType | null
    _max: NormsMaxAggregateOutputType | null
  }

  type GetNormsGroupByPayload<T extends NormsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NormsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NormsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NormsGroupByOutputType[P]>
            : GetScalarType<T[P], NormsGroupByOutputType[P]>
        }
      >
    >


  export type NormsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    plantId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["norms"]>

  export type NormsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    plantId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["norms"]>

  export type NormsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    plantId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["norms"]>

  export type NormsSelectScalar = {
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    plantId?: boolean
  }

  export type NormsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "temperatureMin" | "temperatureMax" | "airHumidityMin" | "airHumidityMax" | "substrateHumidityMin" | "substrateHumidityMax" | "phLevelMin" | "phLevelMax" | "nutrientConcentrationMin" | "nutrientConcentrationMax" | "solutionTemperatureMin" | "solutionTemperatureMax" | "solutionLvlMin" | "solutionLvlMax" | "lightIntensityMin" | "lightIntensityMax" | "plantId", ExtArgs["result"]["norms"]>
  export type NormsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }
  export type NormsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }
  export type NormsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
  }

  export type $NormsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Norms"
    objects: {
      plant: Prisma.$PlantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      temperatureMin: number
      temperatureMax: number
      airHumidityMin: number
      airHumidityMax: number
      substrateHumidityMin: number
      substrateHumidityMax: number
      phLevelMin: number
      phLevelMax: number
      nutrientConcentrationMin: number
      nutrientConcentrationMax: number
      solutionTemperatureMin: number
      solutionTemperatureMax: number
      solutionLvlMin: number
      solutionLvlMax: number
      lightIntensityMin: number
      lightIntensityMax: number
      plantId: number
    }, ExtArgs["result"]["norms"]>
    composites: {}
  }

  type NormsGetPayload<S extends boolean | null | undefined | NormsDefaultArgs> = $Result.GetResult<Prisma.$NormsPayload, S>

  type NormsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NormsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NormsCountAggregateInputType | true
    }

  export interface NormsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Norms'], meta: { name: 'Norms' } }
    /**
     * Find zero or one Norms that matches the filter.
     * @param {NormsFindUniqueArgs} args - Arguments to find a Norms
     * @example
     * // Get one Norms
     * const norms = await prisma.norms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NormsFindUniqueArgs>(args: SelectSubset<T, NormsFindUniqueArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Norms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NormsFindUniqueOrThrowArgs} args - Arguments to find a Norms
     * @example
     * // Get one Norms
     * const norms = await prisma.norms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NormsFindUniqueOrThrowArgs>(args: SelectSubset<T, NormsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Norms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsFindFirstArgs} args - Arguments to find a Norms
     * @example
     * // Get one Norms
     * const norms = await prisma.norms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NormsFindFirstArgs>(args?: SelectSubset<T, NormsFindFirstArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Norms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsFindFirstOrThrowArgs} args - Arguments to find a Norms
     * @example
     * // Get one Norms
     * const norms = await prisma.norms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NormsFindFirstOrThrowArgs>(args?: SelectSubset<T, NormsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Norms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Norms
     * const norms = await prisma.norms.findMany()
     * 
     * // Get first 10 Norms
     * const norms = await prisma.norms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const normsWithIdOnly = await prisma.norms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NormsFindManyArgs>(args?: SelectSubset<T, NormsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Norms.
     * @param {NormsCreateArgs} args - Arguments to create a Norms.
     * @example
     * // Create one Norms
     * const Norms = await prisma.norms.create({
     *   data: {
     *     // ... data to create a Norms
     *   }
     * })
     * 
     */
    create<T extends NormsCreateArgs>(args: SelectSubset<T, NormsCreateArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Norms.
     * @param {NormsCreateManyArgs} args - Arguments to create many Norms.
     * @example
     * // Create many Norms
     * const norms = await prisma.norms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NormsCreateManyArgs>(args?: SelectSubset<T, NormsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Norms and returns the data saved in the database.
     * @param {NormsCreateManyAndReturnArgs} args - Arguments to create many Norms.
     * @example
     * // Create many Norms
     * const norms = await prisma.norms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Norms and only return the `id`
     * const normsWithIdOnly = await prisma.norms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NormsCreateManyAndReturnArgs>(args?: SelectSubset<T, NormsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Norms.
     * @param {NormsDeleteArgs} args - Arguments to delete one Norms.
     * @example
     * // Delete one Norms
     * const Norms = await prisma.norms.delete({
     *   where: {
     *     // ... filter to delete one Norms
     *   }
     * })
     * 
     */
    delete<T extends NormsDeleteArgs>(args: SelectSubset<T, NormsDeleteArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Norms.
     * @param {NormsUpdateArgs} args - Arguments to update one Norms.
     * @example
     * // Update one Norms
     * const norms = await prisma.norms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NormsUpdateArgs>(args: SelectSubset<T, NormsUpdateArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Norms.
     * @param {NormsDeleteManyArgs} args - Arguments to filter Norms to delete.
     * @example
     * // Delete a few Norms
     * const { count } = await prisma.norms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NormsDeleteManyArgs>(args?: SelectSubset<T, NormsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Norms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Norms
     * const norms = await prisma.norms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NormsUpdateManyArgs>(args: SelectSubset<T, NormsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Norms and returns the data updated in the database.
     * @param {NormsUpdateManyAndReturnArgs} args - Arguments to update many Norms.
     * @example
     * // Update many Norms
     * const norms = await prisma.norms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Norms and only return the `id`
     * const normsWithIdOnly = await prisma.norms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NormsUpdateManyAndReturnArgs>(args: SelectSubset<T, NormsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Norms.
     * @param {NormsUpsertArgs} args - Arguments to update or create a Norms.
     * @example
     * // Update or create a Norms
     * const norms = await prisma.norms.upsert({
     *   create: {
     *     // ... data to create a Norms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Norms we want to update
     *   }
     * })
     */
    upsert<T extends NormsUpsertArgs>(args: SelectSubset<T, NormsUpsertArgs<ExtArgs>>): Prisma__NormsClient<$Result.GetResult<Prisma.$NormsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Norms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsCountArgs} args - Arguments to filter Norms to count.
     * @example
     * // Count the number of Norms
     * const count = await prisma.norms.count({
     *   where: {
     *     // ... the filter for the Norms we want to count
     *   }
     * })
    **/
    count<T extends NormsCountArgs>(
      args?: Subset<T, NormsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NormsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Norms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NormsAggregateArgs>(args: Subset<T, NormsAggregateArgs>): Prisma.PrismaPromise<GetNormsAggregateType<T>>

    /**
     * Group by Norms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NormsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NormsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NormsGroupByArgs['orderBy'] }
        : { orderBy?: NormsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NormsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Norms model
   */
  readonly fields: NormsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Norms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NormsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantDefaultArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Norms model
   */
  interface NormsFieldRefs {
    readonly id: FieldRef<"Norms", 'Int'>
    readonly temperatureMin: FieldRef<"Norms", 'Float'>
    readonly temperatureMax: FieldRef<"Norms", 'Float'>
    readonly airHumidityMin: FieldRef<"Norms", 'Float'>
    readonly airHumidityMax: FieldRef<"Norms", 'Float'>
    readonly substrateHumidityMin: FieldRef<"Norms", 'Float'>
    readonly substrateHumidityMax: FieldRef<"Norms", 'Float'>
    readonly phLevelMin: FieldRef<"Norms", 'Float'>
    readonly phLevelMax: FieldRef<"Norms", 'Float'>
    readonly nutrientConcentrationMin: FieldRef<"Norms", 'Float'>
    readonly nutrientConcentrationMax: FieldRef<"Norms", 'Float'>
    readonly solutionTemperatureMin: FieldRef<"Norms", 'Float'>
    readonly solutionTemperatureMax: FieldRef<"Norms", 'Float'>
    readonly solutionLvlMin: FieldRef<"Norms", 'Float'>
    readonly solutionLvlMax: FieldRef<"Norms", 'Float'>
    readonly lightIntensityMin: FieldRef<"Norms", 'Float'>
    readonly lightIntensityMax: FieldRef<"Norms", 'Float'>
    readonly plantId: FieldRef<"Norms", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Norms findUnique
   */
  export type NormsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter, which Norms to fetch.
     */
    where: NormsWhereUniqueInput
  }

  /**
   * Norms findUniqueOrThrow
   */
  export type NormsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter, which Norms to fetch.
     */
    where: NormsWhereUniqueInput
  }

  /**
   * Norms findFirst
   */
  export type NormsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter, which Norms to fetch.
     */
    where?: NormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Norms to fetch.
     */
    orderBy?: NormsOrderByWithRelationInput | NormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Norms.
     */
    cursor?: NormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Norms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Norms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Norms.
     */
    distinct?: NormsScalarFieldEnum | NormsScalarFieldEnum[]
  }

  /**
   * Norms findFirstOrThrow
   */
  export type NormsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter, which Norms to fetch.
     */
    where?: NormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Norms to fetch.
     */
    orderBy?: NormsOrderByWithRelationInput | NormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Norms.
     */
    cursor?: NormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Norms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Norms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Norms.
     */
    distinct?: NormsScalarFieldEnum | NormsScalarFieldEnum[]
  }

  /**
   * Norms findMany
   */
  export type NormsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter, which Norms to fetch.
     */
    where?: NormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Norms to fetch.
     */
    orderBy?: NormsOrderByWithRelationInput | NormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Norms.
     */
    cursor?: NormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Norms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Norms.
     */
    skip?: number
    distinct?: NormsScalarFieldEnum | NormsScalarFieldEnum[]
  }

  /**
   * Norms create
   */
  export type NormsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * The data needed to create a Norms.
     */
    data: XOR<NormsCreateInput, NormsUncheckedCreateInput>
  }

  /**
   * Norms createMany
   */
  export type NormsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Norms.
     */
    data: NormsCreateManyInput | NormsCreateManyInput[]
  }

  /**
   * Norms createManyAndReturn
   */
  export type NormsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * The data used to create many Norms.
     */
    data: NormsCreateManyInput | NormsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Norms update
   */
  export type NormsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * The data needed to update a Norms.
     */
    data: XOR<NormsUpdateInput, NormsUncheckedUpdateInput>
    /**
     * Choose, which Norms to update.
     */
    where: NormsWhereUniqueInput
  }

  /**
   * Norms updateMany
   */
  export type NormsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Norms.
     */
    data: XOR<NormsUpdateManyMutationInput, NormsUncheckedUpdateManyInput>
    /**
     * Filter which Norms to update
     */
    where?: NormsWhereInput
    /**
     * Limit how many Norms to update.
     */
    limit?: number
  }

  /**
   * Norms updateManyAndReturn
   */
  export type NormsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * The data used to update Norms.
     */
    data: XOR<NormsUpdateManyMutationInput, NormsUncheckedUpdateManyInput>
    /**
     * Filter which Norms to update
     */
    where?: NormsWhereInput
    /**
     * Limit how many Norms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Norms upsert
   */
  export type NormsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * The filter to search for the Norms to update in case it exists.
     */
    where: NormsWhereUniqueInput
    /**
     * In case the Norms found by the `where` argument doesn't exist, create a new Norms with this data.
     */
    create: XOR<NormsCreateInput, NormsUncheckedCreateInput>
    /**
     * In case the Norms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NormsUpdateInput, NormsUncheckedUpdateInput>
  }

  /**
   * Norms delete
   */
  export type NormsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
    /**
     * Filter which Norms to delete.
     */
    where: NormsWhereUniqueInput
  }

  /**
   * Norms deleteMany
   */
  export type NormsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Norms to delete
     */
    where?: NormsWhereInput
    /**
     * Limit how many Norms to delete.
     */
    limit?: number
  }

  /**
   * Norms without action
   */
  export type NormsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Norms
     */
    select?: NormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Norms
     */
    omit?: NormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NormsInclude<ExtArgs> | null
  }


  /**
   * Model Station
   */

  export type AggregateStation = {
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  export type StationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StationMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type StationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
  }

  export type StationCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    _all: number
  }


  export type StationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StationMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type StationMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
  }

  export type StationCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type StationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Station to aggregate.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stations
    **/
    _count?: true | StationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationMaxAggregateInputType
  }

  export type GetStationAggregateType<T extends StationAggregateArgs> = {
        [P in keyof T & keyof AggregateStation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStation[P]>
      : GetScalarType<T[P], AggregateStation[P]>
  }




  export type StationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationWhereInput
    orderBy?: StationOrderByWithAggregationInput | StationOrderByWithAggregationInput[]
    by: StationScalarFieldEnum[] | StationScalarFieldEnum
    having?: StationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationCountAggregateInputType | true
    _avg?: StationAvgAggregateInputType
    _sum?: StationSumAggregateInputType
    _min?: StationMinAggregateInputType
    _max?: StationMaxAggregateInputType
  }

  export type StationGroupByOutputType = {
    id: number
    name: string
    userId: number
    _count: StationCountAggregateOutputType | null
    _avg: StationAvgAggregateOutputType | null
    _sum: StationSumAggregateOutputType | null
    _min: StationMinAggregateOutputType | null
    _max: StationMaxAggregateOutputType | null
  }

  type GetStationGroupByPayload<T extends StationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationGroupByOutputType[P]>
            : GetScalarType<T[P], StationGroupByOutputType[P]>
        }
      >
    >


  export type StationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    zones?: boolean | Station$zonesArgs<ExtArgs>
    StationParamsLog?: boolean | Station$StationParamsLogArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["station"]>

  export type StationSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
  }

  export type StationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId", ExtArgs["result"]["station"]>
  export type StationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zones?: boolean | Station$zonesArgs<ExtArgs>
    StationParamsLog?: boolean | Station$StationParamsLogArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Station"
    objects: {
      zones: Prisma.$ZonePayload<ExtArgs>[]
      StationParamsLog: Prisma.$StationParamsLogPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number
    }, ExtArgs["result"]["station"]>
    composites: {}
  }

  type StationGetPayload<S extends boolean | null | undefined | StationDefaultArgs> = $Result.GetResult<Prisma.$StationPayload, S>

  type StationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StationCountAggregateInputType | true
    }

  export interface StationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Station'], meta: { name: 'Station' } }
    /**
     * Find zero or one Station that matches the filter.
     * @param {StationFindUniqueArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StationFindUniqueArgs>(args: SelectSubset<T, StationFindUniqueArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Station that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StationFindUniqueOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StationFindUniqueOrThrowArgs>(args: SelectSubset<T, StationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Station that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StationFindFirstArgs>(args?: SelectSubset<T, StationFindFirstArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Station that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindFirstOrThrowArgs} args - Arguments to find a Station
     * @example
     * // Get one Station
     * const station = await prisma.station.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StationFindFirstOrThrowArgs>(args?: SelectSubset<T, StationFindFirstOrThrowArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stations
     * const stations = await prisma.station.findMany()
     * 
     * // Get first 10 Stations
     * const stations = await prisma.station.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationWithIdOnly = await prisma.station.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StationFindManyArgs>(args?: SelectSubset<T, StationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Station.
     * @param {StationCreateArgs} args - Arguments to create a Station.
     * @example
     * // Create one Station
     * const Station = await prisma.station.create({
     *   data: {
     *     // ... data to create a Station
     *   }
     * })
     * 
     */
    create<T extends StationCreateArgs>(args: SelectSubset<T, StationCreateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stations.
     * @param {StationCreateManyArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StationCreateManyArgs>(args?: SelectSubset<T, StationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stations and returns the data saved in the database.
     * @param {StationCreateManyAndReturnArgs} args - Arguments to create many Stations.
     * @example
     * // Create many Stations
     * const station = await prisma.station.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stations and only return the `id`
     * const stationWithIdOnly = await prisma.station.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StationCreateManyAndReturnArgs>(args?: SelectSubset<T, StationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Station.
     * @param {StationDeleteArgs} args - Arguments to delete one Station.
     * @example
     * // Delete one Station
     * const Station = await prisma.station.delete({
     *   where: {
     *     // ... filter to delete one Station
     *   }
     * })
     * 
     */
    delete<T extends StationDeleteArgs>(args: SelectSubset<T, StationDeleteArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Station.
     * @param {StationUpdateArgs} args - Arguments to update one Station.
     * @example
     * // Update one Station
     * const station = await prisma.station.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StationUpdateArgs>(args: SelectSubset<T, StationUpdateArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stations.
     * @param {StationDeleteManyArgs} args - Arguments to filter Stations to delete.
     * @example
     * // Delete a few Stations
     * const { count } = await prisma.station.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StationDeleteManyArgs>(args?: SelectSubset<T, StationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StationUpdateManyArgs>(args: SelectSubset<T, StationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations and returns the data updated in the database.
     * @param {StationUpdateManyAndReturnArgs} args - Arguments to update many Stations.
     * @example
     * // Update many Stations
     * const station = await prisma.station.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stations and only return the `id`
     * const stationWithIdOnly = await prisma.station.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StationUpdateManyAndReturnArgs>(args: SelectSubset<T, StationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Station.
     * @param {StationUpsertArgs} args - Arguments to update or create a Station.
     * @example
     * // Update or create a Station
     * const station = await prisma.station.upsert({
     *   create: {
     *     // ... data to create a Station
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Station we want to update
     *   }
     * })
     */
    upsert<T extends StationUpsertArgs>(args: SelectSubset<T, StationUpsertArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationCountArgs} args - Arguments to filter Stations to count.
     * @example
     * // Count the number of Stations
     * const count = await prisma.station.count({
     *   where: {
     *     // ... the filter for the Stations we want to count
     *   }
     * })
    **/
    count<T extends StationCountArgs>(
      args?: Subset<T, StationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationAggregateArgs>(args: Subset<T, StationAggregateArgs>): Prisma.PrismaPromise<GetStationAggregateType<T>>

    /**
     * Group by Station.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationGroupByArgs['orderBy'] }
        : { orderBy?: StationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Station model
   */
  readonly fields: StationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Station.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zones<T extends Station$zonesArgs<ExtArgs> = {}>(args?: Subset<T, Station$zonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    StationParamsLog<T extends Station$StationParamsLogArgs<ExtArgs> = {}>(args?: Subset<T, Station$StationParamsLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Station model
   */
  interface StationFieldRefs {
    readonly id: FieldRef<"Station", 'Int'>
    readonly name: FieldRef<"Station", 'String'>
    readonly userId: FieldRef<"Station", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Station findUnique
   */
  export type StationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findUniqueOrThrow
   */
  export type StationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station findFirst
   */
  export type StationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findFirstOrThrow
   */
  export type StationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Station to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station findMany
   */
  export type StationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stations.
     */
    cursor?: StationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * Station create
   */
  export type StationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to create a Station.
     */
    data: XOR<StationCreateInput, StationUncheckedCreateInput>
  }

  /**
   * Station createMany
   */
  export type StationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
  }

  /**
   * Station createManyAndReturn
   */
  export type StationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * The data used to create many Stations.
     */
    data: StationCreateManyInput | StationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Station update
   */
  export type StationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The data needed to update a Station.
     */
    data: XOR<StationUpdateInput, StationUncheckedUpdateInput>
    /**
     * Choose, which Station to update.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station updateMany
   */
  export type StationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to update.
     */
    limit?: number
  }

  /**
   * Station updateManyAndReturn
   */
  export type StationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * The data used to update Stations.
     */
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Station upsert
   */
  export type StationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * The filter to search for the Station to update in case it exists.
     */
    where: StationWhereUniqueInput
    /**
     * In case the Station found by the `where` argument doesn't exist, create a new Station with this data.
     */
    create: XOR<StationCreateInput, StationUncheckedCreateInput>
    /**
     * In case the Station was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationUpdateInput, StationUncheckedUpdateInput>
  }

  /**
   * Station delete
   */
  export type StationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    /**
     * Filter which Station to delete.
     */
    where: StationWhereUniqueInput
  }

  /**
   * Station deleteMany
   */
  export type StationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stations to delete
     */
    where?: StationWhereInput
    /**
     * Limit how many Stations to delete.
     */
    limit?: number
  }

  /**
   * Station.zones
   */
  export type Station$zonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    cursor?: ZoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Station.StationParamsLog
   */
  export type Station$StationParamsLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    where?: StationParamsLogWhereInput
    orderBy?: StationParamsLogOrderByWithRelationInput | StationParamsLogOrderByWithRelationInput[]
    cursor?: StationParamsLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StationParamsLogScalarFieldEnum | StationParamsLogScalarFieldEnum[]
  }

  /**
   * Station without action
   */
  export type StationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
  }


  /**
   * Model Zone
   */

  export type AggregateZone = {
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  export type ZoneAvgAggregateOutputType = {
    id: number | null
    plantId: number | null
    stationId: number | null
  }

  export type ZoneSumAggregateOutputType = {
    id: number | null
    plantId: number | null
    stationId: number | null
  }

  export type ZoneMinAggregateOutputType = {
    id: number | null
    name: string | null
    plantId: number | null
    isLightOn: boolean | null
    stationId: number | null
  }

  export type ZoneMaxAggregateOutputType = {
    id: number | null
    name: string | null
    plantId: number | null
    isLightOn: boolean | null
    stationId: number | null
  }

  export type ZoneCountAggregateOutputType = {
    id: number
    name: number
    plantId: number
    isLightOn: number
    stationId: number
    _all: number
  }


  export type ZoneAvgAggregateInputType = {
    id?: true
    plantId?: true
    stationId?: true
  }

  export type ZoneSumAggregateInputType = {
    id?: true
    plantId?: true
    stationId?: true
  }

  export type ZoneMinAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
    isLightOn?: true
    stationId?: true
  }

  export type ZoneMaxAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
    isLightOn?: true
    stationId?: true
  }

  export type ZoneCountAggregateInputType = {
    id?: true
    name?: true
    plantId?: true
    isLightOn?: true
    stationId?: true
    _all?: true
  }

  export type ZoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zone to aggregate.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Zones
    **/
    _count?: true | ZoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneMaxAggregateInputType
  }

  export type GetZoneAggregateType<T extends ZoneAggregateArgs> = {
        [P in keyof T & keyof AggregateZone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZone[P]>
      : GetScalarType<T[P], AggregateZone[P]>
  }




  export type ZoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneWhereInput
    orderBy?: ZoneOrderByWithAggregationInput | ZoneOrderByWithAggregationInput[]
    by: ZoneScalarFieldEnum[] | ZoneScalarFieldEnum
    having?: ZoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneCountAggregateInputType | true
    _avg?: ZoneAvgAggregateInputType
    _sum?: ZoneSumAggregateInputType
    _min?: ZoneMinAggregateInputType
    _max?: ZoneMaxAggregateInputType
  }

  export type ZoneGroupByOutputType = {
    id: number
    name: string
    plantId: number
    isLightOn: boolean
    stationId: number
    _count: ZoneCountAggregateOutputType | null
    _avg: ZoneAvgAggregateOutputType | null
    _sum: ZoneSumAggregateOutputType | null
    _min: ZoneMinAggregateOutputType | null
    _max: ZoneMaxAggregateOutputType | null
  }

  type GetZoneGroupByPayload<T extends ZoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneGroupByOutputType[P]>
        }
      >
    >


  export type ZoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plantId?: boolean
    isLightOn?: boolean
    stationId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    ZoneParamsLog?: boolean | Zone$ZoneParamsLogArgs<ExtArgs>
    zoneNorms?: boolean | Zone$zoneNormsArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plantId?: boolean
    isLightOn?: boolean
    stationId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plantId?: boolean
    isLightOn?: boolean
    stationId?: boolean
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zone"]>

  export type ZoneSelectScalar = {
    id?: boolean
    name?: boolean
    plantId?: boolean
    isLightOn?: boolean
    stationId?: boolean
  }

  export type ZoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "plantId" | "isLightOn" | "stationId", ExtArgs["result"]["zone"]>
  export type ZoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
    ZoneParamsLog?: boolean | Zone$ZoneParamsLogArgs<ExtArgs>
    zoneNorms?: boolean | Zone$zoneNormsArgs<ExtArgs>
    _count?: boolean | ZoneCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ZoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type ZoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantDefaultArgs<ExtArgs>
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $ZonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Zone"
    objects: {
      plant: Prisma.$PlantPayload<ExtArgs>
      station: Prisma.$StationPayload<ExtArgs>
      ZoneParamsLog: Prisma.$ZoneParamsLogPayload<ExtArgs>[]
      zoneNorms: Prisma.$ZoneNormsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      plantId: number
      isLightOn: boolean
      stationId: number
    }, ExtArgs["result"]["zone"]>
    composites: {}
  }

  type ZoneGetPayload<S extends boolean | null | undefined | ZoneDefaultArgs> = $Result.GetResult<Prisma.$ZonePayload, S>

  type ZoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ZoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ZoneCountAggregateInputType | true
    }

  export interface ZoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Zone'], meta: { name: 'Zone' } }
    /**
     * Find zero or one Zone that matches the filter.
     * @param {ZoneFindUniqueArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneFindUniqueArgs>(args: SelectSubset<T, ZoneFindUniqueArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Zone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ZoneFindUniqueOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Zone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneFindFirstArgs>(args?: SelectSubset<T, ZoneFindFirstArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Zone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindFirstOrThrowArgs} args - Arguments to find a Zone
     * @example
     * // Get one Zone
     * const zone = await prisma.zone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Zones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Zones
     * const zones = await prisma.zone.findMany()
     * 
     * // Get first 10 Zones
     * const zones = await prisma.zone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneWithIdOnly = await prisma.zone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneFindManyArgs>(args?: SelectSubset<T, ZoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Zone.
     * @param {ZoneCreateArgs} args - Arguments to create a Zone.
     * @example
     * // Create one Zone
     * const Zone = await prisma.zone.create({
     *   data: {
     *     // ... data to create a Zone
     *   }
     * })
     * 
     */
    create<T extends ZoneCreateArgs>(args: SelectSubset<T, ZoneCreateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Zones.
     * @param {ZoneCreateManyArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneCreateManyArgs>(args?: SelectSubset<T, ZoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Zones and returns the data saved in the database.
     * @param {ZoneCreateManyAndReturnArgs} args - Arguments to create many Zones.
     * @example
     * // Create many Zones
     * const zone = await prisma.zone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Zones and only return the `id`
     * const zoneWithIdOnly = await prisma.zone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Zone.
     * @param {ZoneDeleteArgs} args - Arguments to delete one Zone.
     * @example
     * // Delete one Zone
     * const Zone = await prisma.zone.delete({
     *   where: {
     *     // ... filter to delete one Zone
     *   }
     * })
     * 
     */
    delete<T extends ZoneDeleteArgs>(args: SelectSubset<T, ZoneDeleteArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Zone.
     * @param {ZoneUpdateArgs} args - Arguments to update one Zone.
     * @example
     * // Update one Zone
     * const zone = await prisma.zone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneUpdateArgs>(args: SelectSubset<T, ZoneUpdateArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Zones.
     * @param {ZoneDeleteManyArgs} args - Arguments to filter Zones to delete.
     * @example
     * // Delete a few Zones
     * const { count } = await prisma.zone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneDeleteManyArgs>(args?: SelectSubset<T, ZoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Zones
     * const zone = await prisma.zone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneUpdateManyArgs>(args: SelectSubset<T, ZoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Zones and returns the data updated in the database.
     * @param {ZoneUpdateManyAndReturnArgs} args - Arguments to update many Zones.
     * @example
     * // Update many Zones
     * const zone = await prisma.zone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Zones and only return the `id`
     * const zoneWithIdOnly = await prisma.zone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ZoneUpdateManyAndReturnArgs>(args: SelectSubset<T, ZoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Zone.
     * @param {ZoneUpsertArgs} args - Arguments to update or create a Zone.
     * @example
     * // Update or create a Zone
     * const zone = await prisma.zone.upsert({
     *   create: {
     *     // ... data to create a Zone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Zone we want to update
     *   }
     * })
     */
    upsert<T extends ZoneUpsertArgs>(args: SelectSubset<T, ZoneUpsertArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Zones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneCountArgs} args - Arguments to filter Zones to count.
     * @example
     * // Count the number of Zones
     * const count = await prisma.zone.count({
     *   where: {
     *     // ... the filter for the Zones we want to count
     *   }
     * })
    **/
    count<T extends ZoneCountArgs>(
      args?: Subset<T, ZoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneAggregateArgs>(args: Subset<T, ZoneAggregateArgs>): Prisma.PrismaPromise<GetZoneAggregateType<T>>

    /**
     * Group by Zone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneGroupByArgs['orderBy'] }
        : { orderBy?: ZoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Zone model
   */
  readonly fields: ZoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Zone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plant<T extends PlantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantDefaultArgs<ExtArgs>>): Prisma__PlantClient<$Result.GetResult<Prisma.$PlantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ZoneParamsLog<T extends Zone$ZoneParamsLogArgs<ExtArgs> = {}>(args?: Subset<T, Zone$ZoneParamsLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    zoneNorms<T extends Zone$zoneNormsArgs<ExtArgs> = {}>(args?: Subset<T, Zone$zoneNormsArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Zone model
   */
  interface ZoneFieldRefs {
    readonly id: FieldRef<"Zone", 'Int'>
    readonly name: FieldRef<"Zone", 'String'>
    readonly plantId: FieldRef<"Zone", 'Int'>
    readonly isLightOn: FieldRef<"Zone", 'Boolean'>
    readonly stationId: FieldRef<"Zone", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Zone findUnique
   */
  export type ZoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findUniqueOrThrow
   */
  export type ZoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone findFirst
   */
  export type ZoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findFirstOrThrow
   */
  export type ZoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zone to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Zones.
     */
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone findMany
   */
  export type ZoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter, which Zones to fetch.
     */
    where?: ZoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Zones to fetch.
     */
    orderBy?: ZoneOrderByWithRelationInput | ZoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Zones.
     */
    cursor?: ZoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Zones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Zones.
     */
    skip?: number
    distinct?: ZoneScalarFieldEnum | ZoneScalarFieldEnum[]
  }

  /**
   * Zone create
   */
  export type ZoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to create a Zone.
     */
    data: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
  }

  /**
   * Zone createMany
   */
  export type ZoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
  }

  /**
   * Zone createManyAndReturn
   */
  export type ZoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * The data used to create many Zones.
     */
    data: ZoneCreateManyInput | ZoneCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Zone update
   */
  export type ZoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The data needed to update a Zone.
     */
    data: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
    /**
     * Choose, which Zone to update.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone updateMany
   */
  export type ZoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Zones.
     */
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyInput>
    /**
     * Filter which Zones to update
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to update.
     */
    limit?: number
  }

  /**
   * Zone updateManyAndReturn
   */
  export type ZoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * The data used to update Zones.
     */
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyInput>
    /**
     * Filter which Zones to update
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Zone upsert
   */
  export type ZoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * The filter to search for the Zone to update in case it exists.
     */
    where: ZoneWhereUniqueInput
    /**
     * In case the Zone found by the `where` argument doesn't exist, create a new Zone with this data.
     */
    create: XOR<ZoneCreateInput, ZoneUncheckedCreateInput>
    /**
     * In case the Zone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneUpdateInput, ZoneUncheckedUpdateInput>
  }

  /**
   * Zone delete
   */
  export type ZoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
    /**
     * Filter which Zone to delete.
     */
    where: ZoneWhereUniqueInput
  }

  /**
   * Zone deleteMany
   */
  export type ZoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Zones to delete
     */
    where?: ZoneWhereInput
    /**
     * Limit how many Zones to delete.
     */
    limit?: number
  }

  /**
   * Zone.ZoneParamsLog
   */
  export type Zone$ZoneParamsLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    where?: ZoneParamsLogWhereInput
    orderBy?: ZoneParamsLogOrderByWithRelationInput | ZoneParamsLogOrderByWithRelationInput[]
    cursor?: ZoneParamsLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ZoneParamsLogScalarFieldEnum | ZoneParamsLogScalarFieldEnum[]
  }

  /**
   * Zone.zoneNorms
   */
  export type Zone$zoneNormsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    where?: ZoneNormsWhereInput
  }

  /**
   * Zone without action
   */
  export type ZoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Zone
     */
    select?: ZoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Zone
     */
    omit?: ZoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneInclude<ExtArgs> | null
  }


  /**
   * Model ZoneNorms
   */

  export type AggregateZoneNorms = {
    _count: ZoneNormsCountAggregateOutputType | null
    _avg: ZoneNormsAvgAggregateOutputType | null
    _sum: ZoneNormsSumAggregateOutputType | null
    _min: ZoneNormsMinAggregateOutputType | null
    _max: ZoneNormsMaxAggregateOutputType | null
  }

  export type ZoneNormsAvgAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    zoneId: number | null
  }

  export type ZoneNormsSumAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    zoneId: number | null
  }

  export type ZoneNormsMinAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    zoneId: number | null
  }

  export type ZoneNormsMaxAggregateOutputType = {
    id: number | null
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    zoneId: number | null
  }

  export type ZoneNormsCountAggregateOutputType = {
    id: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    zoneId: number
    _all: number
  }


  export type ZoneNormsAvgAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    zoneId?: true
  }

  export type ZoneNormsSumAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    zoneId?: true
  }

  export type ZoneNormsMinAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    zoneId?: true
  }

  export type ZoneNormsMaxAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    zoneId?: true
  }

  export type ZoneNormsCountAggregateInputType = {
    id?: true
    temperatureMin?: true
    temperatureMax?: true
    airHumidityMin?: true
    airHumidityMax?: true
    substrateHumidityMin?: true
    substrateHumidityMax?: true
    phLevelMin?: true
    phLevelMax?: true
    nutrientConcentrationMin?: true
    nutrientConcentrationMax?: true
    solutionTemperatureMin?: true
    solutionTemperatureMax?: true
    solutionLvlMin?: true
    solutionLvlMax?: true
    lightIntensityMin?: true
    lightIntensityMax?: true
    zoneId?: true
    _all?: true
  }

  export type ZoneNormsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneNorms to aggregate.
     */
    where?: ZoneNormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneNorms to fetch.
     */
    orderBy?: ZoneNormsOrderByWithRelationInput | ZoneNormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneNormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneNorms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneNorms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ZoneNorms
    **/
    _count?: true | ZoneNormsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneNormsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneNormsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneNormsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneNormsMaxAggregateInputType
  }

  export type GetZoneNormsAggregateType<T extends ZoneNormsAggregateArgs> = {
        [P in keyof T & keyof AggregateZoneNorms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZoneNorms[P]>
      : GetScalarType<T[P], AggregateZoneNorms[P]>
  }




  export type ZoneNormsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneNormsWhereInput
    orderBy?: ZoneNormsOrderByWithAggregationInput | ZoneNormsOrderByWithAggregationInput[]
    by: ZoneNormsScalarFieldEnum[] | ZoneNormsScalarFieldEnum
    having?: ZoneNormsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneNormsCountAggregateInputType | true
    _avg?: ZoneNormsAvgAggregateInputType
    _sum?: ZoneNormsSumAggregateInputType
    _min?: ZoneNormsMinAggregateInputType
    _max?: ZoneNormsMaxAggregateInputType
  }

  export type ZoneNormsGroupByOutputType = {
    id: number
    temperatureMin: number | null
    temperatureMax: number | null
    airHumidityMin: number | null
    airHumidityMax: number | null
    substrateHumidityMin: number | null
    substrateHumidityMax: number | null
    phLevelMin: number | null
    phLevelMax: number | null
    nutrientConcentrationMin: number | null
    nutrientConcentrationMax: number | null
    solutionTemperatureMin: number | null
    solutionTemperatureMax: number | null
    solutionLvlMin: number | null
    solutionLvlMax: number | null
    lightIntensityMin: number | null
    lightIntensityMax: number | null
    zoneId: number
    _count: ZoneNormsCountAggregateOutputType | null
    _avg: ZoneNormsAvgAggregateOutputType | null
    _sum: ZoneNormsSumAggregateOutputType | null
    _min: ZoneNormsMinAggregateOutputType | null
    _max: ZoneNormsMaxAggregateOutputType | null
  }

  type GetZoneNormsGroupByPayload<T extends ZoneNormsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneNormsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneNormsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneNormsGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneNormsGroupByOutputType[P]>
        }
      >
    >


  export type ZoneNormsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneNorms"]>

  export type ZoneNormsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneNorms"]>

  export type ZoneNormsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    zoneId?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneNorms"]>

  export type ZoneNormsSelectScalar = {
    id?: boolean
    temperatureMin?: boolean
    temperatureMax?: boolean
    airHumidityMin?: boolean
    airHumidityMax?: boolean
    substrateHumidityMin?: boolean
    substrateHumidityMax?: boolean
    phLevelMin?: boolean
    phLevelMax?: boolean
    nutrientConcentrationMin?: boolean
    nutrientConcentrationMax?: boolean
    solutionTemperatureMin?: boolean
    solutionTemperatureMax?: boolean
    solutionLvlMin?: boolean
    solutionLvlMax?: boolean
    lightIntensityMin?: boolean
    lightIntensityMax?: boolean
    zoneId?: boolean
  }

  export type ZoneNormsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "temperatureMin" | "temperatureMax" | "airHumidityMin" | "airHumidityMax" | "substrateHumidityMin" | "substrateHumidityMax" | "phLevelMin" | "phLevelMax" | "nutrientConcentrationMin" | "nutrientConcentrationMax" | "solutionTemperatureMin" | "solutionTemperatureMax" | "solutionLvlMin" | "solutionLvlMax" | "lightIntensityMin" | "lightIntensityMax" | "zoneId", ExtArgs["result"]["zoneNorms"]>
  export type ZoneNormsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }
  export type ZoneNormsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }
  export type ZoneNormsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }

  export type $ZoneNormsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ZoneNorms"
    objects: {
      zone: Prisma.$ZonePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      temperatureMin: number | null
      temperatureMax: number | null
      airHumidityMin: number | null
      airHumidityMax: number | null
      substrateHumidityMin: number | null
      substrateHumidityMax: number | null
      phLevelMin: number | null
      phLevelMax: number | null
      nutrientConcentrationMin: number | null
      nutrientConcentrationMax: number | null
      solutionTemperatureMin: number | null
      solutionTemperatureMax: number | null
      solutionLvlMin: number | null
      solutionLvlMax: number | null
      lightIntensityMin: number | null
      lightIntensityMax: number | null
      zoneId: number
    }, ExtArgs["result"]["zoneNorms"]>
    composites: {}
  }

  type ZoneNormsGetPayload<S extends boolean | null | undefined | ZoneNormsDefaultArgs> = $Result.GetResult<Prisma.$ZoneNormsPayload, S>

  type ZoneNormsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ZoneNormsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ZoneNormsCountAggregateInputType | true
    }

  export interface ZoneNormsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ZoneNorms'], meta: { name: 'ZoneNorms' } }
    /**
     * Find zero or one ZoneNorms that matches the filter.
     * @param {ZoneNormsFindUniqueArgs} args - Arguments to find a ZoneNorms
     * @example
     * // Get one ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneNormsFindUniqueArgs>(args: SelectSubset<T, ZoneNormsFindUniqueArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ZoneNorms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ZoneNormsFindUniqueOrThrowArgs} args - Arguments to find a ZoneNorms
     * @example
     * // Get one ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneNormsFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneNormsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ZoneNorms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsFindFirstArgs} args - Arguments to find a ZoneNorms
     * @example
     * // Get one ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneNormsFindFirstArgs>(args?: SelectSubset<T, ZoneNormsFindFirstArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ZoneNorms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsFindFirstOrThrowArgs} args - Arguments to find a ZoneNorms
     * @example
     * // Get one ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneNormsFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneNormsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ZoneNorms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findMany()
     * 
     * // Get first 10 ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneNormsWithIdOnly = await prisma.zoneNorms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneNormsFindManyArgs>(args?: SelectSubset<T, ZoneNormsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ZoneNorms.
     * @param {ZoneNormsCreateArgs} args - Arguments to create a ZoneNorms.
     * @example
     * // Create one ZoneNorms
     * const ZoneNorms = await prisma.zoneNorms.create({
     *   data: {
     *     // ... data to create a ZoneNorms
     *   }
     * })
     * 
     */
    create<T extends ZoneNormsCreateArgs>(args: SelectSubset<T, ZoneNormsCreateArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ZoneNorms.
     * @param {ZoneNormsCreateManyArgs} args - Arguments to create many ZoneNorms.
     * @example
     * // Create many ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneNormsCreateManyArgs>(args?: SelectSubset<T, ZoneNormsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ZoneNorms and returns the data saved in the database.
     * @param {ZoneNormsCreateManyAndReturnArgs} args - Arguments to create many ZoneNorms.
     * @example
     * // Create many ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ZoneNorms and only return the `id`
     * const zoneNormsWithIdOnly = await prisma.zoneNorms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneNormsCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneNormsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ZoneNorms.
     * @param {ZoneNormsDeleteArgs} args - Arguments to delete one ZoneNorms.
     * @example
     * // Delete one ZoneNorms
     * const ZoneNorms = await prisma.zoneNorms.delete({
     *   where: {
     *     // ... filter to delete one ZoneNorms
     *   }
     * })
     * 
     */
    delete<T extends ZoneNormsDeleteArgs>(args: SelectSubset<T, ZoneNormsDeleteArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ZoneNorms.
     * @param {ZoneNormsUpdateArgs} args - Arguments to update one ZoneNorms.
     * @example
     * // Update one ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneNormsUpdateArgs>(args: SelectSubset<T, ZoneNormsUpdateArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ZoneNorms.
     * @param {ZoneNormsDeleteManyArgs} args - Arguments to filter ZoneNorms to delete.
     * @example
     * // Delete a few ZoneNorms
     * const { count } = await prisma.zoneNorms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneNormsDeleteManyArgs>(args?: SelectSubset<T, ZoneNormsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoneNorms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneNormsUpdateManyArgs>(args: SelectSubset<T, ZoneNormsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoneNorms and returns the data updated in the database.
     * @param {ZoneNormsUpdateManyAndReturnArgs} args - Arguments to update many ZoneNorms.
     * @example
     * // Update many ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ZoneNorms and only return the `id`
     * const zoneNormsWithIdOnly = await prisma.zoneNorms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ZoneNormsUpdateManyAndReturnArgs>(args: SelectSubset<T, ZoneNormsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ZoneNorms.
     * @param {ZoneNormsUpsertArgs} args - Arguments to update or create a ZoneNorms.
     * @example
     * // Update or create a ZoneNorms
     * const zoneNorms = await prisma.zoneNorms.upsert({
     *   create: {
     *     // ... data to create a ZoneNorms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ZoneNorms we want to update
     *   }
     * })
     */
    upsert<T extends ZoneNormsUpsertArgs>(args: SelectSubset<T, ZoneNormsUpsertArgs<ExtArgs>>): Prisma__ZoneNormsClient<$Result.GetResult<Prisma.$ZoneNormsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ZoneNorms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsCountArgs} args - Arguments to filter ZoneNorms to count.
     * @example
     * // Count the number of ZoneNorms
     * const count = await prisma.zoneNorms.count({
     *   where: {
     *     // ... the filter for the ZoneNorms we want to count
     *   }
     * })
    **/
    count<T extends ZoneNormsCountArgs>(
      args?: Subset<T, ZoneNormsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneNormsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ZoneNorms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneNormsAggregateArgs>(args: Subset<T, ZoneNormsAggregateArgs>): Prisma.PrismaPromise<GetZoneNormsAggregateType<T>>

    /**
     * Group by ZoneNorms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneNormsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneNormsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneNormsGroupByArgs['orderBy'] }
        : { orderBy?: ZoneNormsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneNormsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneNormsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ZoneNorms model
   */
  readonly fields: ZoneNormsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ZoneNorms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneNormsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zone<T extends ZoneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZoneDefaultArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ZoneNorms model
   */
  interface ZoneNormsFieldRefs {
    readonly id: FieldRef<"ZoneNorms", 'Int'>
    readonly temperatureMin: FieldRef<"ZoneNorms", 'Float'>
    readonly temperatureMax: FieldRef<"ZoneNorms", 'Float'>
    readonly airHumidityMin: FieldRef<"ZoneNorms", 'Float'>
    readonly airHumidityMax: FieldRef<"ZoneNorms", 'Float'>
    readonly substrateHumidityMin: FieldRef<"ZoneNorms", 'Float'>
    readonly substrateHumidityMax: FieldRef<"ZoneNorms", 'Float'>
    readonly phLevelMin: FieldRef<"ZoneNorms", 'Float'>
    readonly phLevelMax: FieldRef<"ZoneNorms", 'Float'>
    readonly nutrientConcentrationMin: FieldRef<"ZoneNorms", 'Float'>
    readonly nutrientConcentrationMax: FieldRef<"ZoneNorms", 'Float'>
    readonly solutionTemperatureMin: FieldRef<"ZoneNorms", 'Float'>
    readonly solutionTemperatureMax: FieldRef<"ZoneNorms", 'Float'>
    readonly solutionLvlMin: FieldRef<"ZoneNorms", 'Float'>
    readonly solutionLvlMax: FieldRef<"ZoneNorms", 'Float'>
    readonly lightIntensityMin: FieldRef<"ZoneNorms", 'Float'>
    readonly lightIntensityMax: FieldRef<"ZoneNorms", 'Float'>
    readonly zoneId: FieldRef<"ZoneNorms", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ZoneNorms findUnique
   */
  export type ZoneNormsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter, which ZoneNorms to fetch.
     */
    where: ZoneNormsWhereUniqueInput
  }

  /**
   * ZoneNorms findUniqueOrThrow
   */
  export type ZoneNormsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter, which ZoneNorms to fetch.
     */
    where: ZoneNormsWhereUniqueInput
  }

  /**
   * ZoneNorms findFirst
   */
  export type ZoneNormsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter, which ZoneNorms to fetch.
     */
    where?: ZoneNormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneNorms to fetch.
     */
    orderBy?: ZoneNormsOrderByWithRelationInput | ZoneNormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneNorms.
     */
    cursor?: ZoneNormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneNorms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneNorms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneNorms.
     */
    distinct?: ZoneNormsScalarFieldEnum | ZoneNormsScalarFieldEnum[]
  }

  /**
   * ZoneNorms findFirstOrThrow
   */
  export type ZoneNormsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter, which ZoneNorms to fetch.
     */
    where?: ZoneNormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneNorms to fetch.
     */
    orderBy?: ZoneNormsOrderByWithRelationInput | ZoneNormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneNorms.
     */
    cursor?: ZoneNormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneNorms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneNorms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneNorms.
     */
    distinct?: ZoneNormsScalarFieldEnum | ZoneNormsScalarFieldEnum[]
  }

  /**
   * ZoneNorms findMany
   */
  export type ZoneNormsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter, which ZoneNorms to fetch.
     */
    where?: ZoneNormsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneNorms to fetch.
     */
    orderBy?: ZoneNormsOrderByWithRelationInput | ZoneNormsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ZoneNorms.
     */
    cursor?: ZoneNormsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneNorms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneNorms.
     */
    skip?: number
    distinct?: ZoneNormsScalarFieldEnum | ZoneNormsScalarFieldEnum[]
  }

  /**
   * ZoneNorms create
   */
  export type ZoneNormsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * The data needed to create a ZoneNorms.
     */
    data: XOR<ZoneNormsCreateInput, ZoneNormsUncheckedCreateInput>
  }

  /**
   * ZoneNorms createMany
   */
  export type ZoneNormsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ZoneNorms.
     */
    data: ZoneNormsCreateManyInput | ZoneNormsCreateManyInput[]
  }

  /**
   * ZoneNorms createManyAndReturn
   */
  export type ZoneNormsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * The data used to create many ZoneNorms.
     */
    data: ZoneNormsCreateManyInput | ZoneNormsCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ZoneNorms update
   */
  export type ZoneNormsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * The data needed to update a ZoneNorms.
     */
    data: XOR<ZoneNormsUpdateInput, ZoneNormsUncheckedUpdateInput>
    /**
     * Choose, which ZoneNorms to update.
     */
    where: ZoneNormsWhereUniqueInput
  }

  /**
   * ZoneNorms updateMany
   */
  export type ZoneNormsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ZoneNorms.
     */
    data: XOR<ZoneNormsUpdateManyMutationInput, ZoneNormsUncheckedUpdateManyInput>
    /**
     * Filter which ZoneNorms to update
     */
    where?: ZoneNormsWhereInput
    /**
     * Limit how many ZoneNorms to update.
     */
    limit?: number
  }

  /**
   * ZoneNorms updateManyAndReturn
   */
  export type ZoneNormsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * The data used to update ZoneNorms.
     */
    data: XOR<ZoneNormsUpdateManyMutationInput, ZoneNormsUncheckedUpdateManyInput>
    /**
     * Filter which ZoneNorms to update
     */
    where?: ZoneNormsWhereInput
    /**
     * Limit how many ZoneNorms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ZoneNorms upsert
   */
  export type ZoneNormsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * The filter to search for the ZoneNorms to update in case it exists.
     */
    where: ZoneNormsWhereUniqueInput
    /**
     * In case the ZoneNorms found by the `where` argument doesn't exist, create a new ZoneNorms with this data.
     */
    create: XOR<ZoneNormsCreateInput, ZoneNormsUncheckedCreateInput>
    /**
     * In case the ZoneNorms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneNormsUpdateInput, ZoneNormsUncheckedUpdateInput>
  }

  /**
   * ZoneNorms delete
   */
  export type ZoneNormsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
    /**
     * Filter which ZoneNorms to delete.
     */
    where: ZoneNormsWhereUniqueInput
  }

  /**
   * ZoneNorms deleteMany
   */
  export type ZoneNormsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneNorms to delete
     */
    where?: ZoneNormsWhereInput
    /**
     * Limit how many ZoneNorms to delete.
     */
    limit?: number
  }

  /**
   * ZoneNorms without action
   */
  export type ZoneNormsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneNorms
     */
    select?: ZoneNormsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneNorms
     */
    omit?: ZoneNormsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneNormsInclude<ExtArgs> | null
  }


  /**
   * Model StationParamsLog
   */

  export type AggregateStationParamsLog = {
    _count: StationParamsLogCountAggregateOutputType | null
    _avg: StationParamsLogAvgAggregateOutputType | null
    _sum: StationParamsLogSumAggregateOutputType | null
    _min: StationParamsLogMinAggregateOutputType | null
    _max: StationParamsLogMaxAggregateOutputType | null
  }

  export type StationParamsLogAvgAggregateOutputType = {
    id: number | null
    stationId: number | null
    phLevel: number | null
    nutrientConcentration: number | null
    solutionTemperature: number | null
    solutionLvl: number | null
  }

  export type StationParamsLogSumAggregateOutputType = {
    id: number | null
    stationId: number | null
    phLevel: number | null
    nutrientConcentration: number | null
    solutionTemperature: number | null
    solutionLvl: number | null
  }

  export type StationParamsLogMinAggregateOutputType = {
    id: number | null
    stationId: number | null
    recordedAt: Date | null
    phLevel: number | null
    nutrientConcentration: number | null
    solutionTemperature: number | null
    solutionLvl: number | null
  }

  export type StationParamsLogMaxAggregateOutputType = {
    id: number | null
    stationId: number | null
    recordedAt: Date | null
    phLevel: number | null
    nutrientConcentration: number | null
    solutionTemperature: number | null
    solutionLvl: number | null
  }

  export type StationParamsLogCountAggregateOutputType = {
    id: number
    stationId: number
    recordedAt: number
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
    _all: number
  }


  export type StationParamsLogAvgAggregateInputType = {
    id?: true
    stationId?: true
    phLevel?: true
    nutrientConcentration?: true
    solutionTemperature?: true
    solutionLvl?: true
  }

  export type StationParamsLogSumAggregateInputType = {
    id?: true
    stationId?: true
    phLevel?: true
    nutrientConcentration?: true
    solutionTemperature?: true
    solutionLvl?: true
  }

  export type StationParamsLogMinAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    phLevel?: true
    nutrientConcentration?: true
    solutionTemperature?: true
    solutionLvl?: true
  }

  export type StationParamsLogMaxAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    phLevel?: true
    nutrientConcentration?: true
    solutionTemperature?: true
    solutionLvl?: true
  }

  export type StationParamsLogCountAggregateInputType = {
    id?: true
    stationId?: true
    recordedAt?: true
    phLevel?: true
    nutrientConcentration?: true
    solutionTemperature?: true
    solutionLvl?: true
    _all?: true
  }

  export type StationParamsLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StationParamsLog to aggregate.
     */
    where?: StationParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationParamsLogs to fetch.
     */
    orderBy?: StationParamsLogOrderByWithRelationInput | StationParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StationParamsLogs
    **/
    _count?: true | StationParamsLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StationParamsLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StationParamsLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationParamsLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationParamsLogMaxAggregateInputType
  }

  export type GetStationParamsLogAggregateType<T extends StationParamsLogAggregateArgs> = {
        [P in keyof T & keyof AggregateStationParamsLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStationParamsLog[P]>
      : GetScalarType<T[P], AggregateStationParamsLog[P]>
  }




  export type StationParamsLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StationParamsLogWhereInput
    orderBy?: StationParamsLogOrderByWithAggregationInput | StationParamsLogOrderByWithAggregationInput[]
    by: StationParamsLogScalarFieldEnum[] | StationParamsLogScalarFieldEnum
    having?: StationParamsLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationParamsLogCountAggregateInputType | true
    _avg?: StationParamsLogAvgAggregateInputType
    _sum?: StationParamsLogSumAggregateInputType
    _min?: StationParamsLogMinAggregateInputType
    _max?: StationParamsLogMaxAggregateInputType
  }

  export type StationParamsLogGroupByOutputType = {
    id: number
    stationId: number
    recordedAt: Date
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
    _count: StationParamsLogCountAggregateOutputType | null
    _avg: StationParamsLogAvgAggregateOutputType | null
    _sum: StationParamsLogSumAggregateOutputType | null
    _min: StationParamsLogMinAggregateOutputType | null
    _max: StationParamsLogMaxAggregateOutputType | null
  }

  type GetStationParamsLogGroupByPayload<T extends StationParamsLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StationParamsLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationParamsLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationParamsLogGroupByOutputType[P]>
            : GetScalarType<T[P], StationParamsLogGroupByOutputType[P]>
        }
      >
    >


  export type StationParamsLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    phLevel?: boolean
    nutrientConcentration?: boolean
    solutionTemperature?: boolean
    solutionLvl?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationParamsLog"]>

  export type StationParamsLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    phLevel?: boolean
    nutrientConcentration?: boolean
    solutionTemperature?: boolean
    solutionLvl?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationParamsLog"]>

  export type StationParamsLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    phLevel?: boolean
    nutrientConcentration?: boolean
    solutionTemperature?: boolean
    solutionLvl?: boolean
    station?: boolean | StationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stationParamsLog"]>

  export type StationParamsLogSelectScalar = {
    id?: boolean
    stationId?: boolean
    recordedAt?: boolean
    phLevel?: boolean
    nutrientConcentration?: boolean
    solutionTemperature?: boolean
    solutionLvl?: boolean
  }

  export type StationParamsLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stationId" | "recordedAt" | "phLevel" | "nutrientConcentration" | "solutionTemperature" | "solutionLvl", ExtArgs["result"]["stationParamsLog"]>
  export type StationParamsLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type StationParamsLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }
  export type StationParamsLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    station?: boolean | StationDefaultArgs<ExtArgs>
  }

  export type $StationParamsLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StationParamsLog"
    objects: {
      station: Prisma.$StationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      stationId: number
      recordedAt: Date
      phLevel: number
      nutrientConcentration: number
      solutionTemperature: number
      solutionLvl: number
    }, ExtArgs["result"]["stationParamsLog"]>
    composites: {}
  }

  type StationParamsLogGetPayload<S extends boolean | null | undefined | StationParamsLogDefaultArgs> = $Result.GetResult<Prisma.$StationParamsLogPayload, S>

  type StationParamsLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StationParamsLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StationParamsLogCountAggregateInputType | true
    }

  export interface StationParamsLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StationParamsLog'], meta: { name: 'StationParamsLog' } }
    /**
     * Find zero or one StationParamsLog that matches the filter.
     * @param {StationParamsLogFindUniqueArgs} args - Arguments to find a StationParamsLog
     * @example
     * // Get one StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StationParamsLogFindUniqueArgs>(args: SelectSubset<T, StationParamsLogFindUniqueArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StationParamsLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StationParamsLogFindUniqueOrThrowArgs} args - Arguments to find a StationParamsLog
     * @example
     * // Get one StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StationParamsLogFindUniqueOrThrowArgs>(args: SelectSubset<T, StationParamsLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StationParamsLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogFindFirstArgs} args - Arguments to find a StationParamsLog
     * @example
     * // Get one StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StationParamsLogFindFirstArgs>(args?: SelectSubset<T, StationParamsLogFindFirstArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StationParamsLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogFindFirstOrThrowArgs} args - Arguments to find a StationParamsLog
     * @example
     * // Get one StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StationParamsLogFindFirstOrThrowArgs>(args?: SelectSubset<T, StationParamsLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StationParamsLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StationParamsLogs
     * const stationParamsLogs = await prisma.stationParamsLog.findMany()
     * 
     * // Get first 10 StationParamsLogs
     * const stationParamsLogs = await prisma.stationParamsLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationParamsLogWithIdOnly = await prisma.stationParamsLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StationParamsLogFindManyArgs>(args?: SelectSubset<T, StationParamsLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StationParamsLog.
     * @param {StationParamsLogCreateArgs} args - Arguments to create a StationParamsLog.
     * @example
     * // Create one StationParamsLog
     * const StationParamsLog = await prisma.stationParamsLog.create({
     *   data: {
     *     // ... data to create a StationParamsLog
     *   }
     * })
     * 
     */
    create<T extends StationParamsLogCreateArgs>(args: SelectSubset<T, StationParamsLogCreateArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StationParamsLogs.
     * @param {StationParamsLogCreateManyArgs} args - Arguments to create many StationParamsLogs.
     * @example
     * // Create many StationParamsLogs
     * const stationParamsLog = await prisma.stationParamsLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StationParamsLogCreateManyArgs>(args?: SelectSubset<T, StationParamsLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StationParamsLogs and returns the data saved in the database.
     * @param {StationParamsLogCreateManyAndReturnArgs} args - Arguments to create many StationParamsLogs.
     * @example
     * // Create many StationParamsLogs
     * const stationParamsLog = await prisma.stationParamsLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StationParamsLogs and only return the `id`
     * const stationParamsLogWithIdOnly = await prisma.stationParamsLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StationParamsLogCreateManyAndReturnArgs>(args?: SelectSubset<T, StationParamsLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StationParamsLog.
     * @param {StationParamsLogDeleteArgs} args - Arguments to delete one StationParamsLog.
     * @example
     * // Delete one StationParamsLog
     * const StationParamsLog = await prisma.stationParamsLog.delete({
     *   where: {
     *     // ... filter to delete one StationParamsLog
     *   }
     * })
     * 
     */
    delete<T extends StationParamsLogDeleteArgs>(args: SelectSubset<T, StationParamsLogDeleteArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StationParamsLog.
     * @param {StationParamsLogUpdateArgs} args - Arguments to update one StationParamsLog.
     * @example
     * // Update one StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StationParamsLogUpdateArgs>(args: SelectSubset<T, StationParamsLogUpdateArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StationParamsLogs.
     * @param {StationParamsLogDeleteManyArgs} args - Arguments to filter StationParamsLogs to delete.
     * @example
     * // Delete a few StationParamsLogs
     * const { count } = await prisma.stationParamsLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StationParamsLogDeleteManyArgs>(args?: SelectSubset<T, StationParamsLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StationParamsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StationParamsLogs
     * const stationParamsLog = await prisma.stationParamsLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StationParamsLogUpdateManyArgs>(args: SelectSubset<T, StationParamsLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StationParamsLogs and returns the data updated in the database.
     * @param {StationParamsLogUpdateManyAndReturnArgs} args - Arguments to update many StationParamsLogs.
     * @example
     * // Update many StationParamsLogs
     * const stationParamsLog = await prisma.stationParamsLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StationParamsLogs and only return the `id`
     * const stationParamsLogWithIdOnly = await prisma.stationParamsLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StationParamsLogUpdateManyAndReturnArgs>(args: SelectSubset<T, StationParamsLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StationParamsLog.
     * @param {StationParamsLogUpsertArgs} args - Arguments to update or create a StationParamsLog.
     * @example
     * // Update or create a StationParamsLog
     * const stationParamsLog = await prisma.stationParamsLog.upsert({
     *   create: {
     *     // ... data to create a StationParamsLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StationParamsLog we want to update
     *   }
     * })
     */
    upsert<T extends StationParamsLogUpsertArgs>(args: SelectSubset<T, StationParamsLogUpsertArgs<ExtArgs>>): Prisma__StationParamsLogClient<$Result.GetResult<Prisma.$StationParamsLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StationParamsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogCountArgs} args - Arguments to filter StationParamsLogs to count.
     * @example
     * // Count the number of StationParamsLogs
     * const count = await prisma.stationParamsLog.count({
     *   where: {
     *     // ... the filter for the StationParamsLogs we want to count
     *   }
     * })
    **/
    count<T extends StationParamsLogCountArgs>(
      args?: Subset<T, StationParamsLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationParamsLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StationParamsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationParamsLogAggregateArgs>(args: Subset<T, StationParamsLogAggregateArgs>): Prisma.PrismaPromise<GetStationParamsLogAggregateType<T>>

    /**
     * Group by StationParamsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationParamsLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationParamsLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationParamsLogGroupByArgs['orderBy'] }
        : { orderBy?: StationParamsLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationParamsLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationParamsLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StationParamsLog model
   */
  readonly fields: StationParamsLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StationParamsLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StationParamsLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    station<T extends StationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StationDefaultArgs<ExtArgs>>): Prisma__StationClient<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StationParamsLog model
   */
  interface StationParamsLogFieldRefs {
    readonly id: FieldRef<"StationParamsLog", 'Int'>
    readonly stationId: FieldRef<"StationParamsLog", 'Int'>
    readonly recordedAt: FieldRef<"StationParamsLog", 'DateTime'>
    readonly phLevel: FieldRef<"StationParamsLog", 'Float'>
    readonly nutrientConcentration: FieldRef<"StationParamsLog", 'Float'>
    readonly solutionTemperature: FieldRef<"StationParamsLog", 'Float'>
    readonly solutionLvl: FieldRef<"StationParamsLog", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * StationParamsLog findUnique
   */
  export type StationParamsLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which StationParamsLog to fetch.
     */
    where: StationParamsLogWhereUniqueInput
  }

  /**
   * StationParamsLog findUniqueOrThrow
   */
  export type StationParamsLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which StationParamsLog to fetch.
     */
    where: StationParamsLogWhereUniqueInput
  }

  /**
   * StationParamsLog findFirst
   */
  export type StationParamsLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which StationParamsLog to fetch.
     */
    where?: StationParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationParamsLogs to fetch.
     */
    orderBy?: StationParamsLogOrderByWithRelationInput | StationParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StationParamsLogs.
     */
    cursor?: StationParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StationParamsLogs.
     */
    distinct?: StationParamsLogScalarFieldEnum | StationParamsLogScalarFieldEnum[]
  }

  /**
   * StationParamsLog findFirstOrThrow
   */
  export type StationParamsLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which StationParamsLog to fetch.
     */
    where?: StationParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationParamsLogs to fetch.
     */
    orderBy?: StationParamsLogOrderByWithRelationInput | StationParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StationParamsLogs.
     */
    cursor?: StationParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StationParamsLogs.
     */
    distinct?: StationParamsLogScalarFieldEnum | StationParamsLogScalarFieldEnum[]
  }

  /**
   * StationParamsLog findMany
   */
  export type StationParamsLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which StationParamsLogs to fetch.
     */
    where?: StationParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StationParamsLogs to fetch.
     */
    orderBy?: StationParamsLogOrderByWithRelationInput | StationParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StationParamsLogs.
     */
    cursor?: StationParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StationParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StationParamsLogs.
     */
    skip?: number
    distinct?: StationParamsLogScalarFieldEnum | StationParamsLogScalarFieldEnum[]
  }

  /**
   * StationParamsLog create
   */
  export type StationParamsLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * The data needed to create a StationParamsLog.
     */
    data: XOR<StationParamsLogCreateInput, StationParamsLogUncheckedCreateInput>
  }

  /**
   * StationParamsLog createMany
   */
  export type StationParamsLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StationParamsLogs.
     */
    data: StationParamsLogCreateManyInput | StationParamsLogCreateManyInput[]
  }

  /**
   * StationParamsLog createManyAndReturn
   */
  export type StationParamsLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * The data used to create many StationParamsLogs.
     */
    data: StationParamsLogCreateManyInput | StationParamsLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StationParamsLog update
   */
  export type StationParamsLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * The data needed to update a StationParamsLog.
     */
    data: XOR<StationParamsLogUpdateInput, StationParamsLogUncheckedUpdateInput>
    /**
     * Choose, which StationParamsLog to update.
     */
    where: StationParamsLogWhereUniqueInput
  }

  /**
   * StationParamsLog updateMany
   */
  export type StationParamsLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StationParamsLogs.
     */
    data: XOR<StationParamsLogUpdateManyMutationInput, StationParamsLogUncheckedUpdateManyInput>
    /**
     * Filter which StationParamsLogs to update
     */
    where?: StationParamsLogWhereInput
    /**
     * Limit how many StationParamsLogs to update.
     */
    limit?: number
  }

  /**
   * StationParamsLog updateManyAndReturn
   */
  export type StationParamsLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * The data used to update StationParamsLogs.
     */
    data: XOR<StationParamsLogUpdateManyMutationInput, StationParamsLogUncheckedUpdateManyInput>
    /**
     * Filter which StationParamsLogs to update
     */
    where?: StationParamsLogWhereInput
    /**
     * Limit how many StationParamsLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StationParamsLog upsert
   */
  export type StationParamsLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * The filter to search for the StationParamsLog to update in case it exists.
     */
    where: StationParamsLogWhereUniqueInput
    /**
     * In case the StationParamsLog found by the `where` argument doesn't exist, create a new StationParamsLog with this data.
     */
    create: XOR<StationParamsLogCreateInput, StationParamsLogUncheckedCreateInput>
    /**
     * In case the StationParamsLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationParamsLogUpdateInput, StationParamsLogUncheckedUpdateInput>
  }

  /**
   * StationParamsLog delete
   */
  export type StationParamsLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
    /**
     * Filter which StationParamsLog to delete.
     */
    where: StationParamsLogWhereUniqueInput
  }

  /**
   * StationParamsLog deleteMany
   */
  export type StationParamsLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StationParamsLogs to delete
     */
    where?: StationParamsLogWhereInput
    /**
     * Limit how many StationParamsLogs to delete.
     */
    limit?: number
  }

  /**
   * StationParamsLog without action
   */
  export type StationParamsLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationParamsLog
     */
    select?: StationParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StationParamsLog
     */
    omit?: StationParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationParamsLogInclude<ExtArgs> | null
  }


  /**
   * Model ZoneParamsLog
   */

  export type AggregateZoneParamsLog = {
    _count: ZoneParamsLogCountAggregateOutputType | null
    _avg: ZoneParamsLogAvgAggregateOutputType | null
    _sum: ZoneParamsLogSumAggregateOutputType | null
    _min: ZoneParamsLogMinAggregateOutputType | null
    _max: ZoneParamsLogMaxAggregateOutputType | null
  }

  export type ZoneParamsLogAvgAggregateOutputType = {
    id: number | null
    zoneId: number | null
    temperature: number | null
    airHumidity: number | null
    substrateHumidity: number | null
  }

  export type ZoneParamsLogSumAggregateOutputType = {
    id: number | null
    zoneId: number | null
    temperature: number | null
    airHumidity: number | null
    substrateHumidity: number | null
  }

  export type ZoneParamsLogMinAggregateOutputType = {
    id: number | null
    zoneId: number | null
    recordedAt: Date | null
    temperature: number | null
    airHumidity: number | null
    substrateHumidity: number | null
    isLightOn: boolean | null
  }

  export type ZoneParamsLogMaxAggregateOutputType = {
    id: number | null
    zoneId: number | null
    recordedAt: Date | null
    temperature: number | null
    airHumidity: number | null
    substrateHumidity: number | null
    isLightOn: boolean | null
  }

  export type ZoneParamsLogCountAggregateOutputType = {
    id: number
    zoneId: number
    recordedAt: number
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn: number
    _all: number
  }


  export type ZoneParamsLogAvgAggregateInputType = {
    id?: true
    zoneId?: true
    temperature?: true
    airHumidity?: true
    substrateHumidity?: true
  }

  export type ZoneParamsLogSumAggregateInputType = {
    id?: true
    zoneId?: true
    temperature?: true
    airHumidity?: true
    substrateHumidity?: true
  }

  export type ZoneParamsLogMinAggregateInputType = {
    id?: true
    zoneId?: true
    recordedAt?: true
    temperature?: true
    airHumidity?: true
    substrateHumidity?: true
    isLightOn?: true
  }

  export type ZoneParamsLogMaxAggregateInputType = {
    id?: true
    zoneId?: true
    recordedAt?: true
    temperature?: true
    airHumidity?: true
    substrateHumidity?: true
    isLightOn?: true
  }

  export type ZoneParamsLogCountAggregateInputType = {
    id?: true
    zoneId?: true
    recordedAt?: true
    temperature?: true
    airHumidity?: true
    substrateHumidity?: true
    isLightOn?: true
    _all?: true
  }

  export type ZoneParamsLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneParamsLog to aggregate.
     */
    where?: ZoneParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneParamsLogs to fetch.
     */
    orderBy?: ZoneParamsLogOrderByWithRelationInput | ZoneParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ZoneParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ZoneParamsLogs
    **/
    _count?: true | ZoneParamsLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ZoneParamsLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ZoneParamsLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ZoneParamsLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ZoneParamsLogMaxAggregateInputType
  }

  export type GetZoneParamsLogAggregateType<T extends ZoneParamsLogAggregateArgs> = {
        [P in keyof T & keyof AggregateZoneParamsLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZoneParamsLog[P]>
      : GetScalarType<T[P], AggregateZoneParamsLog[P]>
  }




  export type ZoneParamsLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ZoneParamsLogWhereInput
    orderBy?: ZoneParamsLogOrderByWithAggregationInput | ZoneParamsLogOrderByWithAggregationInput[]
    by: ZoneParamsLogScalarFieldEnum[] | ZoneParamsLogScalarFieldEnum
    having?: ZoneParamsLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ZoneParamsLogCountAggregateInputType | true
    _avg?: ZoneParamsLogAvgAggregateInputType
    _sum?: ZoneParamsLogSumAggregateInputType
    _min?: ZoneParamsLogMinAggregateInputType
    _max?: ZoneParamsLogMaxAggregateInputType
  }

  export type ZoneParamsLogGroupByOutputType = {
    id: number
    zoneId: number
    recordedAt: Date
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn: boolean | null
    _count: ZoneParamsLogCountAggregateOutputType | null
    _avg: ZoneParamsLogAvgAggregateOutputType | null
    _sum: ZoneParamsLogSumAggregateOutputType | null
    _min: ZoneParamsLogMinAggregateOutputType | null
    _max: ZoneParamsLogMaxAggregateOutputType | null
  }

  type GetZoneParamsLogGroupByPayload<T extends ZoneParamsLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ZoneParamsLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ZoneParamsLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ZoneParamsLogGroupByOutputType[P]>
            : GetScalarType<T[P], ZoneParamsLogGroupByOutputType[P]>
        }
      >
    >


  export type ZoneParamsLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    airHumidity?: boolean
    substrateHumidity?: boolean
    isLightOn?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneParamsLog"]>

  export type ZoneParamsLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    airHumidity?: boolean
    substrateHumidity?: boolean
    isLightOn?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneParamsLog"]>

  export type ZoneParamsLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    zoneId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    airHumidity?: boolean
    substrateHumidity?: boolean
    isLightOn?: boolean
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["zoneParamsLog"]>

  export type ZoneParamsLogSelectScalar = {
    id?: boolean
    zoneId?: boolean
    recordedAt?: boolean
    temperature?: boolean
    airHumidity?: boolean
    substrateHumidity?: boolean
    isLightOn?: boolean
  }

  export type ZoneParamsLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "zoneId" | "recordedAt" | "temperature" | "airHumidity" | "substrateHumidity" | "isLightOn", ExtArgs["result"]["zoneParamsLog"]>
  export type ZoneParamsLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }
  export type ZoneParamsLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }
  export type ZoneParamsLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    zone?: boolean | ZoneDefaultArgs<ExtArgs>
  }

  export type $ZoneParamsLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ZoneParamsLog"
    objects: {
      zone: Prisma.$ZonePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      zoneId: number
      recordedAt: Date
      temperature: number
      airHumidity: number
      substrateHumidity: number
      isLightOn: boolean | null
    }, ExtArgs["result"]["zoneParamsLog"]>
    composites: {}
  }

  type ZoneParamsLogGetPayload<S extends boolean | null | undefined | ZoneParamsLogDefaultArgs> = $Result.GetResult<Prisma.$ZoneParamsLogPayload, S>

  type ZoneParamsLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ZoneParamsLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ZoneParamsLogCountAggregateInputType | true
    }

  export interface ZoneParamsLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ZoneParamsLog'], meta: { name: 'ZoneParamsLog' } }
    /**
     * Find zero or one ZoneParamsLog that matches the filter.
     * @param {ZoneParamsLogFindUniqueArgs} args - Arguments to find a ZoneParamsLog
     * @example
     * // Get one ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ZoneParamsLogFindUniqueArgs>(args: SelectSubset<T, ZoneParamsLogFindUniqueArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ZoneParamsLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ZoneParamsLogFindUniqueOrThrowArgs} args - Arguments to find a ZoneParamsLog
     * @example
     * // Get one ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ZoneParamsLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ZoneParamsLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ZoneParamsLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogFindFirstArgs} args - Arguments to find a ZoneParamsLog
     * @example
     * // Get one ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ZoneParamsLogFindFirstArgs>(args?: SelectSubset<T, ZoneParamsLogFindFirstArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ZoneParamsLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogFindFirstOrThrowArgs} args - Arguments to find a ZoneParamsLog
     * @example
     * // Get one ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ZoneParamsLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ZoneParamsLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ZoneParamsLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ZoneParamsLogs
     * const zoneParamsLogs = await prisma.zoneParamsLog.findMany()
     * 
     * // Get first 10 ZoneParamsLogs
     * const zoneParamsLogs = await prisma.zoneParamsLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const zoneParamsLogWithIdOnly = await prisma.zoneParamsLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ZoneParamsLogFindManyArgs>(args?: SelectSubset<T, ZoneParamsLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ZoneParamsLog.
     * @param {ZoneParamsLogCreateArgs} args - Arguments to create a ZoneParamsLog.
     * @example
     * // Create one ZoneParamsLog
     * const ZoneParamsLog = await prisma.zoneParamsLog.create({
     *   data: {
     *     // ... data to create a ZoneParamsLog
     *   }
     * })
     * 
     */
    create<T extends ZoneParamsLogCreateArgs>(args: SelectSubset<T, ZoneParamsLogCreateArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ZoneParamsLogs.
     * @param {ZoneParamsLogCreateManyArgs} args - Arguments to create many ZoneParamsLogs.
     * @example
     * // Create many ZoneParamsLogs
     * const zoneParamsLog = await prisma.zoneParamsLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ZoneParamsLogCreateManyArgs>(args?: SelectSubset<T, ZoneParamsLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ZoneParamsLogs and returns the data saved in the database.
     * @param {ZoneParamsLogCreateManyAndReturnArgs} args - Arguments to create many ZoneParamsLogs.
     * @example
     * // Create many ZoneParamsLogs
     * const zoneParamsLog = await prisma.zoneParamsLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ZoneParamsLogs and only return the `id`
     * const zoneParamsLogWithIdOnly = await prisma.zoneParamsLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ZoneParamsLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ZoneParamsLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ZoneParamsLog.
     * @param {ZoneParamsLogDeleteArgs} args - Arguments to delete one ZoneParamsLog.
     * @example
     * // Delete one ZoneParamsLog
     * const ZoneParamsLog = await prisma.zoneParamsLog.delete({
     *   where: {
     *     // ... filter to delete one ZoneParamsLog
     *   }
     * })
     * 
     */
    delete<T extends ZoneParamsLogDeleteArgs>(args: SelectSubset<T, ZoneParamsLogDeleteArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ZoneParamsLog.
     * @param {ZoneParamsLogUpdateArgs} args - Arguments to update one ZoneParamsLog.
     * @example
     * // Update one ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ZoneParamsLogUpdateArgs>(args: SelectSubset<T, ZoneParamsLogUpdateArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ZoneParamsLogs.
     * @param {ZoneParamsLogDeleteManyArgs} args - Arguments to filter ZoneParamsLogs to delete.
     * @example
     * // Delete a few ZoneParamsLogs
     * const { count } = await prisma.zoneParamsLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ZoneParamsLogDeleteManyArgs>(args?: SelectSubset<T, ZoneParamsLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoneParamsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ZoneParamsLogs
     * const zoneParamsLog = await prisma.zoneParamsLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ZoneParamsLogUpdateManyArgs>(args: SelectSubset<T, ZoneParamsLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ZoneParamsLogs and returns the data updated in the database.
     * @param {ZoneParamsLogUpdateManyAndReturnArgs} args - Arguments to update many ZoneParamsLogs.
     * @example
     * // Update many ZoneParamsLogs
     * const zoneParamsLog = await prisma.zoneParamsLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ZoneParamsLogs and only return the `id`
     * const zoneParamsLogWithIdOnly = await prisma.zoneParamsLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ZoneParamsLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ZoneParamsLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ZoneParamsLog.
     * @param {ZoneParamsLogUpsertArgs} args - Arguments to update or create a ZoneParamsLog.
     * @example
     * // Update or create a ZoneParamsLog
     * const zoneParamsLog = await prisma.zoneParamsLog.upsert({
     *   create: {
     *     // ... data to create a ZoneParamsLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ZoneParamsLog we want to update
     *   }
     * })
     */
    upsert<T extends ZoneParamsLogUpsertArgs>(args: SelectSubset<T, ZoneParamsLogUpsertArgs<ExtArgs>>): Prisma__ZoneParamsLogClient<$Result.GetResult<Prisma.$ZoneParamsLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ZoneParamsLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogCountArgs} args - Arguments to filter ZoneParamsLogs to count.
     * @example
     * // Count the number of ZoneParamsLogs
     * const count = await prisma.zoneParamsLog.count({
     *   where: {
     *     // ... the filter for the ZoneParamsLogs we want to count
     *   }
     * })
    **/
    count<T extends ZoneParamsLogCountArgs>(
      args?: Subset<T, ZoneParamsLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ZoneParamsLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ZoneParamsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ZoneParamsLogAggregateArgs>(args: Subset<T, ZoneParamsLogAggregateArgs>): Prisma.PrismaPromise<GetZoneParamsLogAggregateType<T>>

    /**
     * Group by ZoneParamsLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ZoneParamsLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ZoneParamsLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ZoneParamsLogGroupByArgs['orderBy'] }
        : { orderBy?: ZoneParamsLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ZoneParamsLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZoneParamsLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ZoneParamsLog model
   */
  readonly fields: ZoneParamsLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ZoneParamsLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ZoneParamsLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    zone<T extends ZoneDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ZoneDefaultArgs<ExtArgs>>): Prisma__ZoneClient<$Result.GetResult<Prisma.$ZonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ZoneParamsLog model
   */
  interface ZoneParamsLogFieldRefs {
    readonly id: FieldRef<"ZoneParamsLog", 'Int'>
    readonly zoneId: FieldRef<"ZoneParamsLog", 'Int'>
    readonly recordedAt: FieldRef<"ZoneParamsLog", 'DateTime'>
    readonly temperature: FieldRef<"ZoneParamsLog", 'Float'>
    readonly airHumidity: FieldRef<"ZoneParamsLog", 'Float'>
    readonly substrateHumidity: FieldRef<"ZoneParamsLog", 'Float'>
    readonly isLightOn: FieldRef<"ZoneParamsLog", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ZoneParamsLog findUnique
   */
  export type ZoneParamsLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which ZoneParamsLog to fetch.
     */
    where: ZoneParamsLogWhereUniqueInput
  }

  /**
   * ZoneParamsLog findUniqueOrThrow
   */
  export type ZoneParamsLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which ZoneParamsLog to fetch.
     */
    where: ZoneParamsLogWhereUniqueInput
  }

  /**
   * ZoneParamsLog findFirst
   */
  export type ZoneParamsLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which ZoneParamsLog to fetch.
     */
    where?: ZoneParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneParamsLogs to fetch.
     */
    orderBy?: ZoneParamsLogOrderByWithRelationInput | ZoneParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneParamsLogs.
     */
    cursor?: ZoneParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneParamsLogs.
     */
    distinct?: ZoneParamsLogScalarFieldEnum | ZoneParamsLogScalarFieldEnum[]
  }

  /**
   * ZoneParamsLog findFirstOrThrow
   */
  export type ZoneParamsLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which ZoneParamsLog to fetch.
     */
    where?: ZoneParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneParamsLogs to fetch.
     */
    orderBy?: ZoneParamsLogOrderByWithRelationInput | ZoneParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ZoneParamsLogs.
     */
    cursor?: ZoneParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneParamsLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ZoneParamsLogs.
     */
    distinct?: ZoneParamsLogScalarFieldEnum | ZoneParamsLogScalarFieldEnum[]
  }

  /**
   * ZoneParamsLog findMany
   */
  export type ZoneParamsLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter, which ZoneParamsLogs to fetch.
     */
    where?: ZoneParamsLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ZoneParamsLogs to fetch.
     */
    orderBy?: ZoneParamsLogOrderByWithRelationInput | ZoneParamsLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ZoneParamsLogs.
     */
    cursor?: ZoneParamsLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ZoneParamsLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ZoneParamsLogs.
     */
    skip?: number
    distinct?: ZoneParamsLogScalarFieldEnum | ZoneParamsLogScalarFieldEnum[]
  }

  /**
   * ZoneParamsLog create
   */
  export type ZoneParamsLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ZoneParamsLog.
     */
    data: XOR<ZoneParamsLogCreateInput, ZoneParamsLogUncheckedCreateInput>
  }

  /**
   * ZoneParamsLog createMany
   */
  export type ZoneParamsLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ZoneParamsLogs.
     */
    data: ZoneParamsLogCreateManyInput | ZoneParamsLogCreateManyInput[]
  }

  /**
   * ZoneParamsLog createManyAndReturn
   */
  export type ZoneParamsLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * The data used to create many ZoneParamsLogs.
     */
    data: ZoneParamsLogCreateManyInput | ZoneParamsLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ZoneParamsLog update
   */
  export type ZoneParamsLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ZoneParamsLog.
     */
    data: XOR<ZoneParamsLogUpdateInput, ZoneParamsLogUncheckedUpdateInput>
    /**
     * Choose, which ZoneParamsLog to update.
     */
    where: ZoneParamsLogWhereUniqueInput
  }

  /**
   * ZoneParamsLog updateMany
   */
  export type ZoneParamsLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ZoneParamsLogs.
     */
    data: XOR<ZoneParamsLogUpdateManyMutationInput, ZoneParamsLogUncheckedUpdateManyInput>
    /**
     * Filter which ZoneParamsLogs to update
     */
    where?: ZoneParamsLogWhereInput
    /**
     * Limit how many ZoneParamsLogs to update.
     */
    limit?: number
  }

  /**
   * ZoneParamsLog updateManyAndReturn
   */
  export type ZoneParamsLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * The data used to update ZoneParamsLogs.
     */
    data: XOR<ZoneParamsLogUpdateManyMutationInput, ZoneParamsLogUncheckedUpdateManyInput>
    /**
     * Filter which ZoneParamsLogs to update
     */
    where?: ZoneParamsLogWhereInput
    /**
     * Limit how many ZoneParamsLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ZoneParamsLog upsert
   */
  export type ZoneParamsLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ZoneParamsLog to update in case it exists.
     */
    where: ZoneParamsLogWhereUniqueInput
    /**
     * In case the ZoneParamsLog found by the `where` argument doesn't exist, create a new ZoneParamsLog with this data.
     */
    create: XOR<ZoneParamsLogCreateInput, ZoneParamsLogUncheckedCreateInput>
    /**
     * In case the ZoneParamsLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ZoneParamsLogUpdateInput, ZoneParamsLogUncheckedUpdateInput>
  }

  /**
   * ZoneParamsLog delete
   */
  export type ZoneParamsLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
    /**
     * Filter which ZoneParamsLog to delete.
     */
    where: ZoneParamsLogWhereUniqueInput
  }

  /**
   * ZoneParamsLog deleteMany
   */
  export type ZoneParamsLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ZoneParamsLogs to delete
     */
    where?: ZoneParamsLogWhereInput
    /**
     * Limit how many ZoneParamsLogs to delete.
     */
    limit?: number
  }

  /**
   * ZoneParamsLog without action
   */
  export type ZoneParamsLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ZoneParamsLog
     */
    select?: ZoneParamsLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ZoneParamsLog
     */
    omit?: ZoneParamsLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ZoneParamsLogInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    stations?: boolean | User$stationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "password" | "role", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stations?: boolean | User$stationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      stations: Prisma.$StationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      name: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stations<T extends User$stationsArgs<ExtArgs> = {}>(args?: Subset<T, User$stationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.stations
   */
  export type User$stationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Station
     */
    select?: StationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Station
     */
    omit?: StationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StationInclude<ExtArgs> | null
    where?: StationWhereInput
    orderBy?: StationOrderByWithRelationInput | StationOrderByWithRelationInput[]
    cursor?: StationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StationScalarFieldEnum | StationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PlantGroupScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PlantGroupScalarFieldEnum = (typeof PlantGroupScalarFieldEnum)[keyof typeof PlantGroupScalarFieldEnum]


  export const PlantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    plantGroupId: 'plantGroupId'
  };

  export type PlantScalarFieldEnum = (typeof PlantScalarFieldEnum)[keyof typeof PlantScalarFieldEnum]


  export const NormsScalarFieldEnum: {
    id: 'id',
    temperatureMin: 'temperatureMin',
    temperatureMax: 'temperatureMax',
    airHumidityMin: 'airHumidityMin',
    airHumidityMax: 'airHumidityMax',
    substrateHumidityMin: 'substrateHumidityMin',
    substrateHumidityMax: 'substrateHumidityMax',
    phLevelMin: 'phLevelMin',
    phLevelMax: 'phLevelMax',
    nutrientConcentrationMin: 'nutrientConcentrationMin',
    nutrientConcentrationMax: 'nutrientConcentrationMax',
    solutionTemperatureMin: 'solutionTemperatureMin',
    solutionTemperatureMax: 'solutionTemperatureMax',
    solutionLvlMin: 'solutionLvlMin',
    solutionLvlMax: 'solutionLvlMax',
    lightIntensityMin: 'lightIntensityMin',
    lightIntensityMax: 'lightIntensityMax',
    plantId: 'plantId'
  };

  export type NormsScalarFieldEnum = (typeof NormsScalarFieldEnum)[keyof typeof NormsScalarFieldEnum]


  export const StationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId'
  };

  export type StationScalarFieldEnum = (typeof StationScalarFieldEnum)[keyof typeof StationScalarFieldEnum]


  export const ZoneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    plantId: 'plantId',
    isLightOn: 'isLightOn',
    stationId: 'stationId'
  };

  export type ZoneScalarFieldEnum = (typeof ZoneScalarFieldEnum)[keyof typeof ZoneScalarFieldEnum]


  export const ZoneNormsScalarFieldEnum: {
    id: 'id',
    temperatureMin: 'temperatureMin',
    temperatureMax: 'temperatureMax',
    airHumidityMin: 'airHumidityMin',
    airHumidityMax: 'airHumidityMax',
    substrateHumidityMin: 'substrateHumidityMin',
    substrateHumidityMax: 'substrateHumidityMax',
    phLevelMin: 'phLevelMin',
    phLevelMax: 'phLevelMax',
    nutrientConcentrationMin: 'nutrientConcentrationMin',
    nutrientConcentrationMax: 'nutrientConcentrationMax',
    solutionTemperatureMin: 'solutionTemperatureMin',
    solutionTemperatureMax: 'solutionTemperatureMax',
    solutionLvlMin: 'solutionLvlMin',
    solutionLvlMax: 'solutionLvlMax',
    lightIntensityMin: 'lightIntensityMin',
    lightIntensityMax: 'lightIntensityMax',
    zoneId: 'zoneId'
  };

  export type ZoneNormsScalarFieldEnum = (typeof ZoneNormsScalarFieldEnum)[keyof typeof ZoneNormsScalarFieldEnum]


  export const StationParamsLogScalarFieldEnum: {
    id: 'id',
    stationId: 'stationId',
    recordedAt: 'recordedAt',
    phLevel: 'phLevel',
    nutrientConcentration: 'nutrientConcentration',
    solutionTemperature: 'solutionTemperature',
    solutionLvl: 'solutionLvl'
  };

  export type StationParamsLogScalarFieldEnum = (typeof StationParamsLogScalarFieldEnum)[keyof typeof StationParamsLogScalarFieldEnum]


  export const ZoneParamsLogScalarFieldEnum: {
    id: 'id',
    zoneId: 'zoneId',
    recordedAt: 'recordedAt',
    temperature: 'temperature',
    airHumidity: 'airHumidity',
    substrateHumidity: 'substrateHumidity',
    isLightOn: 'isLightOn'
  };

  export type ZoneParamsLogScalarFieldEnum = (typeof ZoneParamsLogScalarFieldEnum)[keyof typeof ZoneParamsLogScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    
  /**
   * Deep Input Types
   */


  export type PlantGroupWhereInput = {
    AND?: PlantGroupWhereInput | PlantGroupWhereInput[]
    OR?: PlantGroupWhereInput[]
    NOT?: PlantGroupWhereInput | PlantGroupWhereInput[]
    id?: IntFilter<"PlantGroup"> | number
    name?: StringFilter<"PlantGroup"> | string
    plants?: PlantListRelationFilter
  }

  export type PlantGroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    plants?: PlantOrderByRelationAggregateInput
  }

  export type PlantGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlantGroupWhereInput | PlantGroupWhereInput[]
    OR?: PlantGroupWhereInput[]
    NOT?: PlantGroupWhereInput | PlantGroupWhereInput[]
    name?: StringFilter<"PlantGroup"> | string
    plants?: PlantListRelationFilter
  }, "id">

  export type PlantGroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PlantGroupCountOrderByAggregateInput
    _avg?: PlantGroupAvgOrderByAggregateInput
    _max?: PlantGroupMaxOrderByAggregateInput
    _min?: PlantGroupMinOrderByAggregateInput
    _sum?: PlantGroupSumOrderByAggregateInput
  }

  export type PlantGroupScalarWhereWithAggregatesInput = {
    AND?: PlantGroupScalarWhereWithAggregatesInput | PlantGroupScalarWhereWithAggregatesInput[]
    OR?: PlantGroupScalarWhereWithAggregatesInput[]
    NOT?: PlantGroupScalarWhereWithAggregatesInput | PlantGroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlantGroup"> | number
    name?: StringWithAggregatesFilter<"PlantGroup"> | string
  }

  export type PlantWhereInput = {
    AND?: PlantWhereInput | PlantWhereInput[]
    OR?: PlantWhereInput[]
    NOT?: PlantWhereInput | PlantWhereInput[]
    id?: IntFilter<"Plant"> | number
    name?: StringFilter<"Plant"> | string
    description?: StringFilter<"Plant"> | string
    plantGroupId?: IntFilter<"Plant"> | number
    plantGroup?: XOR<PlantGroupScalarRelationFilter, PlantGroupWhereInput>
    norms?: XOR<NormsNullableScalarRelationFilter, NormsWhereInput> | null
    zones?: ZoneListRelationFilter
  }

  export type PlantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    plantGroupId?: SortOrder
    plantGroup?: PlantGroupOrderByWithRelationInput
    norms?: NormsOrderByWithRelationInput
    zones?: ZoneOrderByRelationAggregateInput
  }

  export type PlantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlantWhereInput | PlantWhereInput[]
    OR?: PlantWhereInput[]
    NOT?: PlantWhereInput | PlantWhereInput[]
    name?: StringFilter<"Plant"> | string
    description?: StringFilter<"Plant"> | string
    plantGroupId?: IntFilter<"Plant"> | number
    plantGroup?: XOR<PlantGroupScalarRelationFilter, PlantGroupWhereInput>
    norms?: XOR<NormsNullableScalarRelationFilter, NormsWhereInput> | null
    zones?: ZoneListRelationFilter
  }, "id">

  export type PlantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    plantGroupId?: SortOrder
    _count?: PlantCountOrderByAggregateInput
    _avg?: PlantAvgOrderByAggregateInput
    _max?: PlantMaxOrderByAggregateInput
    _min?: PlantMinOrderByAggregateInput
    _sum?: PlantSumOrderByAggregateInput
  }

  export type PlantScalarWhereWithAggregatesInput = {
    AND?: PlantScalarWhereWithAggregatesInput | PlantScalarWhereWithAggregatesInput[]
    OR?: PlantScalarWhereWithAggregatesInput[]
    NOT?: PlantScalarWhereWithAggregatesInput | PlantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plant"> | number
    name?: StringWithAggregatesFilter<"Plant"> | string
    description?: StringWithAggregatesFilter<"Plant"> | string
    plantGroupId?: IntWithAggregatesFilter<"Plant"> | number
  }

  export type NormsWhereInput = {
    AND?: NormsWhereInput | NormsWhereInput[]
    OR?: NormsWhereInput[]
    NOT?: NormsWhereInput | NormsWhereInput[]
    id?: IntFilter<"Norms"> | number
    temperatureMin?: FloatFilter<"Norms"> | number
    temperatureMax?: FloatFilter<"Norms"> | number
    airHumidityMin?: FloatFilter<"Norms"> | number
    airHumidityMax?: FloatFilter<"Norms"> | number
    substrateHumidityMin?: FloatFilter<"Norms"> | number
    substrateHumidityMax?: FloatFilter<"Norms"> | number
    phLevelMin?: FloatFilter<"Norms"> | number
    phLevelMax?: FloatFilter<"Norms"> | number
    nutrientConcentrationMin?: FloatFilter<"Norms"> | number
    nutrientConcentrationMax?: FloatFilter<"Norms"> | number
    solutionTemperatureMin?: FloatFilter<"Norms"> | number
    solutionTemperatureMax?: FloatFilter<"Norms"> | number
    solutionLvlMin?: FloatFilter<"Norms"> | number
    solutionLvlMax?: FloatFilter<"Norms"> | number
    lightIntensityMin?: FloatFilter<"Norms"> | number
    lightIntensityMax?: FloatFilter<"Norms"> | number
    plantId?: IntFilter<"Norms"> | number
    plant?: XOR<PlantScalarRelationFilter, PlantWhereInput>
  }

  export type NormsOrderByWithRelationInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
    plant?: PlantOrderByWithRelationInput
  }

  export type NormsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    plantId?: number
    AND?: NormsWhereInput | NormsWhereInput[]
    OR?: NormsWhereInput[]
    NOT?: NormsWhereInput | NormsWhereInput[]
    temperatureMin?: FloatFilter<"Norms"> | number
    temperatureMax?: FloatFilter<"Norms"> | number
    airHumidityMin?: FloatFilter<"Norms"> | number
    airHumidityMax?: FloatFilter<"Norms"> | number
    substrateHumidityMin?: FloatFilter<"Norms"> | number
    substrateHumidityMax?: FloatFilter<"Norms"> | number
    phLevelMin?: FloatFilter<"Norms"> | number
    phLevelMax?: FloatFilter<"Norms"> | number
    nutrientConcentrationMin?: FloatFilter<"Norms"> | number
    nutrientConcentrationMax?: FloatFilter<"Norms"> | number
    solutionTemperatureMin?: FloatFilter<"Norms"> | number
    solutionTemperatureMax?: FloatFilter<"Norms"> | number
    solutionLvlMin?: FloatFilter<"Norms"> | number
    solutionLvlMax?: FloatFilter<"Norms"> | number
    lightIntensityMin?: FloatFilter<"Norms"> | number
    lightIntensityMax?: FloatFilter<"Norms"> | number
    plant?: XOR<PlantScalarRelationFilter, PlantWhereInput>
  }, "id" | "plantId">

  export type NormsOrderByWithAggregationInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
    _count?: NormsCountOrderByAggregateInput
    _avg?: NormsAvgOrderByAggregateInput
    _max?: NormsMaxOrderByAggregateInput
    _min?: NormsMinOrderByAggregateInput
    _sum?: NormsSumOrderByAggregateInput
  }

  export type NormsScalarWhereWithAggregatesInput = {
    AND?: NormsScalarWhereWithAggregatesInput | NormsScalarWhereWithAggregatesInput[]
    OR?: NormsScalarWhereWithAggregatesInput[]
    NOT?: NormsScalarWhereWithAggregatesInput | NormsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Norms"> | number
    temperatureMin?: FloatWithAggregatesFilter<"Norms"> | number
    temperatureMax?: FloatWithAggregatesFilter<"Norms"> | number
    airHumidityMin?: FloatWithAggregatesFilter<"Norms"> | number
    airHumidityMax?: FloatWithAggregatesFilter<"Norms"> | number
    substrateHumidityMin?: FloatWithAggregatesFilter<"Norms"> | number
    substrateHumidityMax?: FloatWithAggregatesFilter<"Norms"> | number
    phLevelMin?: FloatWithAggregatesFilter<"Norms"> | number
    phLevelMax?: FloatWithAggregatesFilter<"Norms"> | number
    nutrientConcentrationMin?: FloatWithAggregatesFilter<"Norms"> | number
    nutrientConcentrationMax?: FloatWithAggregatesFilter<"Norms"> | number
    solutionTemperatureMin?: FloatWithAggregatesFilter<"Norms"> | number
    solutionTemperatureMax?: FloatWithAggregatesFilter<"Norms"> | number
    solutionLvlMin?: FloatWithAggregatesFilter<"Norms"> | number
    solutionLvlMax?: FloatWithAggregatesFilter<"Norms"> | number
    lightIntensityMin?: FloatWithAggregatesFilter<"Norms"> | number
    lightIntensityMax?: FloatWithAggregatesFilter<"Norms"> | number
    plantId?: IntWithAggregatesFilter<"Norms"> | number
  }

  export type StationWhereInput = {
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    id?: IntFilter<"Station"> | number
    name?: StringFilter<"Station"> | string
    userId?: IntFilter<"Station"> | number
    zones?: ZoneListRelationFilter
    StationParamsLog?: StationParamsLogListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    zones?: ZoneOrderByRelationAggregateInput
    StationParamsLog?: StationParamsLogOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type StationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StationWhereInput | StationWhereInput[]
    OR?: StationWhereInput[]
    NOT?: StationWhereInput | StationWhereInput[]
    name?: StringFilter<"Station"> | string
    userId?: IntFilter<"Station"> | number
    zones?: ZoneListRelationFilter
    StationParamsLog?: StationParamsLogListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: StationCountOrderByAggregateInput
    _avg?: StationAvgOrderByAggregateInput
    _max?: StationMaxOrderByAggregateInput
    _min?: StationMinOrderByAggregateInput
    _sum?: StationSumOrderByAggregateInput
  }

  export type StationScalarWhereWithAggregatesInput = {
    AND?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    OR?: StationScalarWhereWithAggregatesInput[]
    NOT?: StationScalarWhereWithAggregatesInput | StationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Station"> | number
    name?: StringWithAggregatesFilter<"Station"> | string
    userId?: IntWithAggregatesFilter<"Station"> | number
  }

  export type ZoneWhereInput = {
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    id?: IntFilter<"Zone"> | number
    name?: StringFilter<"Zone"> | string
    plantId?: IntFilter<"Zone"> | number
    isLightOn?: BoolFilter<"Zone"> | boolean
    stationId?: IntFilter<"Zone"> | number
    plant?: XOR<PlantScalarRelationFilter, PlantWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    ZoneParamsLog?: ZoneParamsLogListRelationFilter
    zoneNorms?: XOR<ZoneNormsNullableScalarRelationFilter, ZoneNormsWhereInput> | null
  }

  export type ZoneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    isLightOn?: SortOrder
    stationId?: SortOrder
    plant?: PlantOrderByWithRelationInput
    station?: StationOrderByWithRelationInput
    ZoneParamsLog?: ZoneParamsLogOrderByRelationAggregateInput
    zoneNorms?: ZoneNormsOrderByWithRelationInput
  }

  export type ZoneWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ZoneWhereInput | ZoneWhereInput[]
    OR?: ZoneWhereInput[]
    NOT?: ZoneWhereInput | ZoneWhereInput[]
    name?: StringFilter<"Zone"> | string
    plantId?: IntFilter<"Zone"> | number
    isLightOn?: BoolFilter<"Zone"> | boolean
    stationId?: IntFilter<"Zone"> | number
    plant?: XOR<PlantScalarRelationFilter, PlantWhereInput>
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
    ZoneParamsLog?: ZoneParamsLogListRelationFilter
    zoneNorms?: XOR<ZoneNormsNullableScalarRelationFilter, ZoneNormsWhereInput> | null
  }, "id">

  export type ZoneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    isLightOn?: SortOrder
    stationId?: SortOrder
    _count?: ZoneCountOrderByAggregateInput
    _avg?: ZoneAvgOrderByAggregateInput
    _max?: ZoneMaxOrderByAggregateInput
    _min?: ZoneMinOrderByAggregateInput
    _sum?: ZoneSumOrderByAggregateInput
  }

  export type ZoneScalarWhereWithAggregatesInput = {
    AND?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    OR?: ZoneScalarWhereWithAggregatesInput[]
    NOT?: ZoneScalarWhereWithAggregatesInput | ZoneScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Zone"> | number
    name?: StringWithAggregatesFilter<"Zone"> | string
    plantId?: IntWithAggregatesFilter<"Zone"> | number
    isLightOn?: BoolWithAggregatesFilter<"Zone"> | boolean
    stationId?: IntWithAggregatesFilter<"Zone"> | number
  }

  export type ZoneNormsWhereInput = {
    AND?: ZoneNormsWhereInput | ZoneNormsWhereInput[]
    OR?: ZoneNormsWhereInput[]
    NOT?: ZoneNormsWhereInput | ZoneNormsWhereInput[]
    id?: IntFilter<"ZoneNorms"> | number
    temperatureMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    temperatureMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    airHumidityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    airHumidityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    substrateHumidityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    substrateHumidityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    phLevelMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    phLevelMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionTemperatureMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionTemperatureMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionLvlMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionLvlMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    lightIntensityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    lightIntensityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    zoneId?: IntFilter<"ZoneNorms"> | number
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
  }

  export type ZoneNormsOrderByWithRelationInput = {
    id?: SortOrder
    temperatureMin?: SortOrderInput | SortOrder
    temperatureMax?: SortOrderInput | SortOrder
    airHumidityMin?: SortOrderInput | SortOrder
    airHumidityMax?: SortOrderInput | SortOrder
    substrateHumidityMin?: SortOrderInput | SortOrder
    substrateHumidityMax?: SortOrderInput | SortOrder
    phLevelMin?: SortOrderInput | SortOrder
    phLevelMax?: SortOrderInput | SortOrder
    nutrientConcentrationMin?: SortOrderInput | SortOrder
    nutrientConcentrationMax?: SortOrderInput | SortOrder
    solutionTemperatureMin?: SortOrderInput | SortOrder
    solutionTemperatureMax?: SortOrderInput | SortOrder
    solutionLvlMin?: SortOrderInput | SortOrder
    solutionLvlMax?: SortOrderInput | SortOrder
    lightIntensityMin?: SortOrderInput | SortOrder
    lightIntensityMax?: SortOrderInput | SortOrder
    zoneId?: SortOrder
    zone?: ZoneOrderByWithRelationInput
  }

  export type ZoneNormsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    zoneId?: number
    AND?: ZoneNormsWhereInput | ZoneNormsWhereInput[]
    OR?: ZoneNormsWhereInput[]
    NOT?: ZoneNormsWhereInput | ZoneNormsWhereInput[]
    temperatureMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    temperatureMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    airHumidityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    airHumidityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    substrateHumidityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    substrateHumidityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    phLevelMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    phLevelMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionTemperatureMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionTemperatureMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionLvlMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    solutionLvlMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    lightIntensityMin?: FloatNullableFilter<"ZoneNorms"> | number | null
    lightIntensityMax?: FloatNullableFilter<"ZoneNorms"> | number | null
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
  }, "id" | "zoneId">

  export type ZoneNormsOrderByWithAggregationInput = {
    id?: SortOrder
    temperatureMin?: SortOrderInput | SortOrder
    temperatureMax?: SortOrderInput | SortOrder
    airHumidityMin?: SortOrderInput | SortOrder
    airHumidityMax?: SortOrderInput | SortOrder
    substrateHumidityMin?: SortOrderInput | SortOrder
    substrateHumidityMax?: SortOrderInput | SortOrder
    phLevelMin?: SortOrderInput | SortOrder
    phLevelMax?: SortOrderInput | SortOrder
    nutrientConcentrationMin?: SortOrderInput | SortOrder
    nutrientConcentrationMax?: SortOrderInput | SortOrder
    solutionTemperatureMin?: SortOrderInput | SortOrder
    solutionTemperatureMax?: SortOrderInput | SortOrder
    solutionLvlMin?: SortOrderInput | SortOrder
    solutionLvlMax?: SortOrderInput | SortOrder
    lightIntensityMin?: SortOrderInput | SortOrder
    lightIntensityMax?: SortOrderInput | SortOrder
    zoneId?: SortOrder
    _count?: ZoneNormsCountOrderByAggregateInput
    _avg?: ZoneNormsAvgOrderByAggregateInput
    _max?: ZoneNormsMaxOrderByAggregateInput
    _min?: ZoneNormsMinOrderByAggregateInput
    _sum?: ZoneNormsSumOrderByAggregateInput
  }

  export type ZoneNormsScalarWhereWithAggregatesInput = {
    AND?: ZoneNormsScalarWhereWithAggregatesInput | ZoneNormsScalarWhereWithAggregatesInput[]
    OR?: ZoneNormsScalarWhereWithAggregatesInput[]
    NOT?: ZoneNormsScalarWhereWithAggregatesInput | ZoneNormsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ZoneNorms"> | number
    temperatureMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    temperatureMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    airHumidityMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    airHumidityMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    substrateHumidityMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    substrateHumidityMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    phLevelMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    phLevelMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    nutrientConcentrationMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    solutionTemperatureMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    solutionTemperatureMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    solutionLvlMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    solutionLvlMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    lightIntensityMin?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    lightIntensityMax?: FloatNullableWithAggregatesFilter<"ZoneNorms"> | number | null
    zoneId?: IntWithAggregatesFilter<"ZoneNorms"> | number
  }

  export type StationParamsLogWhereInput = {
    AND?: StationParamsLogWhereInput | StationParamsLogWhereInput[]
    OR?: StationParamsLogWhereInput[]
    NOT?: StationParamsLogWhereInput | StationParamsLogWhereInput[]
    id?: IntFilter<"StationParamsLog"> | number
    stationId?: IntFilter<"StationParamsLog"> | number
    recordedAt?: DateTimeFilter<"StationParamsLog"> | Date | string
    phLevel?: FloatFilter<"StationParamsLog"> | number
    nutrientConcentration?: FloatFilter<"StationParamsLog"> | number
    solutionTemperature?: FloatFilter<"StationParamsLog"> | number
    solutionLvl?: FloatFilter<"StationParamsLog"> | number
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }

  export type StationParamsLogOrderByWithRelationInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
    station?: StationOrderByWithRelationInput
  }

  export type StationParamsLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StationParamsLogWhereInput | StationParamsLogWhereInput[]
    OR?: StationParamsLogWhereInput[]
    NOT?: StationParamsLogWhereInput | StationParamsLogWhereInput[]
    stationId?: IntFilter<"StationParamsLog"> | number
    recordedAt?: DateTimeFilter<"StationParamsLog"> | Date | string
    phLevel?: FloatFilter<"StationParamsLog"> | number
    nutrientConcentration?: FloatFilter<"StationParamsLog"> | number
    solutionTemperature?: FloatFilter<"StationParamsLog"> | number
    solutionLvl?: FloatFilter<"StationParamsLog"> | number
    station?: XOR<StationScalarRelationFilter, StationWhereInput>
  }, "id">

  export type StationParamsLogOrderByWithAggregationInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
    _count?: StationParamsLogCountOrderByAggregateInput
    _avg?: StationParamsLogAvgOrderByAggregateInput
    _max?: StationParamsLogMaxOrderByAggregateInput
    _min?: StationParamsLogMinOrderByAggregateInput
    _sum?: StationParamsLogSumOrderByAggregateInput
  }

  export type StationParamsLogScalarWhereWithAggregatesInput = {
    AND?: StationParamsLogScalarWhereWithAggregatesInput | StationParamsLogScalarWhereWithAggregatesInput[]
    OR?: StationParamsLogScalarWhereWithAggregatesInput[]
    NOT?: StationParamsLogScalarWhereWithAggregatesInput | StationParamsLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StationParamsLog"> | number
    stationId?: IntWithAggregatesFilter<"StationParamsLog"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"StationParamsLog"> | Date | string
    phLevel?: FloatWithAggregatesFilter<"StationParamsLog"> | number
    nutrientConcentration?: FloatWithAggregatesFilter<"StationParamsLog"> | number
    solutionTemperature?: FloatWithAggregatesFilter<"StationParamsLog"> | number
    solutionLvl?: FloatWithAggregatesFilter<"StationParamsLog"> | number
  }

  export type ZoneParamsLogWhereInput = {
    AND?: ZoneParamsLogWhereInput | ZoneParamsLogWhereInput[]
    OR?: ZoneParamsLogWhereInput[]
    NOT?: ZoneParamsLogWhereInput | ZoneParamsLogWhereInput[]
    id?: IntFilter<"ZoneParamsLog"> | number
    zoneId?: IntFilter<"ZoneParamsLog"> | number
    recordedAt?: DateTimeFilter<"ZoneParamsLog"> | Date | string
    temperature?: FloatFilter<"ZoneParamsLog"> | number
    airHumidity?: FloatFilter<"ZoneParamsLog"> | number
    substrateHumidity?: FloatFilter<"ZoneParamsLog"> | number
    isLightOn?: BoolNullableFilter<"ZoneParamsLog"> | boolean | null
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
  }

  export type ZoneParamsLogOrderByWithRelationInput = {
    id?: SortOrder
    zoneId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
    isLightOn?: SortOrderInput | SortOrder
    zone?: ZoneOrderByWithRelationInput
  }

  export type ZoneParamsLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ZoneParamsLogWhereInput | ZoneParamsLogWhereInput[]
    OR?: ZoneParamsLogWhereInput[]
    NOT?: ZoneParamsLogWhereInput | ZoneParamsLogWhereInput[]
    zoneId?: IntFilter<"ZoneParamsLog"> | number
    recordedAt?: DateTimeFilter<"ZoneParamsLog"> | Date | string
    temperature?: FloatFilter<"ZoneParamsLog"> | number
    airHumidity?: FloatFilter<"ZoneParamsLog"> | number
    substrateHumidity?: FloatFilter<"ZoneParamsLog"> | number
    isLightOn?: BoolNullableFilter<"ZoneParamsLog"> | boolean | null
    zone?: XOR<ZoneScalarRelationFilter, ZoneWhereInput>
  }, "id">

  export type ZoneParamsLogOrderByWithAggregationInput = {
    id?: SortOrder
    zoneId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
    isLightOn?: SortOrderInput | SortOrder
    _count?: ZoneParamsLogCountOrderByAggregateInput
    _avg?: ZoneParamsLogAvgOrderByAggregateInput
    _max?: ZoneParamsLogMaxOrderByAggregateInput
    _min?: ZoneParamsLogMinOrderByAggregateInput
    _sum?: ZoneParamsLogSumOrderByAggregateInput
  }

  export type ZoneParamsLogScalarWhereWithAggregatesInput = {
    AND?: ZoneParamsLogScalarWhereWithAggregatesInput | ZoneParamsLogScalarWhereWithAggregatesInput[]
    OR?: ZoneParamsLogScalarWhereWithAggregatesInput[]
    NOT?: ZoneParamsLogScalarWhereWithAggregatesInput | ZoneParamsLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ZoneParamsLog"> | number
    zoneId?: IntWithAggregatesFilter<"ZoneParamsLog"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"ZoneParamsLog"> | Date | string
    temperature?: FloatWithAggregatesFilter<"ZoneParamsLog"> | number
    airHumidity?: FloatWithAggregatesFilter<"ZoneParamsLog"> | number
    substrateHumidity?: FloatWithAggregatesFilter<"ZoneParamsLog"> | number
    isLightOn?: BoolNullableWithAggregatesFilter<"ZoneParamsLog"> | boolean | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    stations?: StationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    stations?: StationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    stations?: StationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type PlantGroupCreateInput = {
    name: string
    plants?: PlantCreateNestedManyWithoutPlantGroupInput
  }

  export type PlantGroupUncheckedCreateInput = {
    id?: number
    name: string
    plants?: PlantUncheckedCreateNestedManyWithoutPlantGroupInput
  }

  export type PlantGroupUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantUpdateManyWithoutPlantGroupNestedInput
  }

  export type PlantGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plants?: PlantUncheckedUpdateManyWithoutPlantGroupNestedInput
  }

  export type PlantGroupCreateManyInput = {
    id?: number
    name: string
  }

  export type PlantGroupUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantCreateInput = {
    name: string
    description: string
    plantGroup: PlantGroupCreateNestedOneWithoutPlantsInput
    norms?: NormsCreateNestedOneWithoutPlantInput
    zones?: ZoneCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    plantGroupId: number
    norms?: NormsUncheckedCreateNestedOneWithoutPlantInput
    zones?: ZoneUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroup?: PlantGroupUpdateOneRequiredWithoutPlantsNestedInput
    norms?: NormsUpdateOneWithoutPlantNestedInput
    zones?: ZoneUpdateManyWithoutPlantNestedInput
  }

  export type PlantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroupId?: IntFieldUpdateOperationsInput | number
    norms?: NormsUncheckedUpdateOneWithoutPlantNestedInput
    zones?: ZoneUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantCreateManyInput = {
    id?: number
    name: string
    description: string
    plantGroupId: number
  }

  export type PlantUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PlantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroupId?: IntFieldUpdateOperationsInput | number
  }

  export type NormsCreateInput = {
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    plant: PlantCreateNestedOneWithoutNormsInput
  }

  export type NormsUncheckedCreateInput = {
    id?: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    plantId: number
  }

  export type NormsUpdateInput = {
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
    plant?: PlantUpdateOneRequiredWithoutNormsNestedInput
  }

  export type NormsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
  }

  export type NormsCreateManyInput = {
    id?: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
    plantId: number
  }

  export type NormsUpdateManyMutationInput = {
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
  }

  export type NormsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
    plantId?: IntFieldUpdateOperationsInput | number
  }

  export type StationCreateInput = {
    name: string
    zones?: ZoneCreateNestedManyWithoutStationInput
    StationParamsLog?: StationParamsLogCreateNestedManyWithoutStationInput
    user: UserCreateNestedOneWithoutStationsInput
  }

  export type StationUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
    zones?: ZoneUncheckedCreateNestedManyWithoutStationInput
    StationParamsLog?: StationParamsLogUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    zones?: ZoneUpdateManyWithoutStationNestedInput
    StationParamsLog?: StationParamsLogUpdateManyWithoutStationNestedInput
    user?: UserUpdateOneRequiredWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    zones?: ZoneUncheckedUpdateManyWithoutStationNestedInput
    StationParamsLog?: StationParamsLogUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationCreateManyInput = {
    id?: number
    name: string
    userId: number
  }

  export type StationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ZoneCreateInput = {
    name: string
    isLightOn?: boolean
    plant: PlantCreateNestedOneWithoutZonesInput
    station: StationCreateNestedOneWithoutZonesInput
    ZoneParamsLog?: ZoneParamsLogCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsCreateNestedOneWithoutZoneInput
  }

  export type ZoneUncheckedCreateInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
    stationId: number
    ZoneParamsLog?: ZoneParamsLogUncheckedCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsUncheckedCreateNestedOneWithoutZoneInput
  }

  export type ZoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    plant?: PlantUpdateOneRequiredWithoutZonesNestedInput
    station?: StationUpdateOneRequiredWithoutZonesNestedInput
    ZoneParamsLog?: ZoneParamsLogUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
    ZoneParamsLog?: ZoneParamsLogUncheckedUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUncheckedUpdateOneWithoutZoneNestedInput
  }

  export type ZoneCreateManyInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
    stationId: number
  }

  export type ZoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ZoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
  }

  export type ZoneNormsCreateInput = {
    temperatureMin?: number | null
    temperatureMax?: number | null
    airHumidityMin?: number | null
    airHumidityMax?: number | null
    substrateHumidityMin?: number | null
    substrateHumidityMax?: number | null
    phLevelMin?: number | null
    phLevelMax?: number | null
    nutrientConcentrationMin?: number | null
    nutrientConcentrationMax?: number | null
    solutionTemperatureMin?: number | null
    solutionTemperatureMax?: number | null
    solutionLvlMin?: number | null
    solutionLvlMax?: number | null
    lightIntensityMin?: number | null
    lightIntensityMax?: number | null
    zone: ZoneCreateNestedOneWithoutZoneNormsInput
  }

  export type ZoneNormsUncheckedCreateInput = {
    id?: number
    temperatureMin?: number | null
    temperatureMax?: number | null
    airHumidityMin?: number | null
    airHumidityMax?: number | null
    substrateHumidityMin?: number | null
    substrateHumidityMax?: number | null
    phLevelMin?: number | null
    phLevelMax?: number | null
    nutrientConcentrationMin?: number | null
    nutrientConcentrationMax?: number | null
    solutionTemperatureMin?: number | null
    solutionTemperatureMax?: number | null
    solutionLvlMin?: number | null
    solutionLvlMax?: number | null
    lightIntensityMin?: number | null
    lightIntensityMax?: number | null
    zoneId: number
  }

  export type ZoneNormsUpdateInput = {
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    zone?: ZoneUpdateOneRequiredWithoutZoneNormsNestedInput
  }

  export type ZoneNormsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    zoneId?: IntFieldUpdateOperationsInput | number
  }

  export type ZoneNormsCreateManyInput = {
    id?: number
    temperatureMin?: number | null
    temperatureMax?: number | null
    airHumidityMin?: number | null
    airHumidityMax?: number | null
    substrateHumidityMin?: number | null
    substrateHumidityMax?: number | null
    phLevelMin?: number | null
    phLevelMax?: number | null
    nutrientConcentrationMin?: number | null
    nutrientConcentrationMax?: number | null
    solutionTemperatureMin?: number | null
    solutionTemperatureMax?: number | null
    solutionLvlMin?: number | null
    solutionLvlMax?: number | null
    lightIntensityMin?: number | null
    lightIntensityMax?: number | null
    zoneId: number
  }

  export type ZoneNormsUpdateManyMutationInput = {
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ZoneNormsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    zoneId?: IntFieldUpdateOperationsInput | number
  }

  export type StationParamsLogCreateInput = {
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
    station: StationCreateNestedOneWithoutStationParamsLogInput
  }

  export type StationParamsLogUncheckedCreateInput = {
    id?: number
    stationId: number
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
  }

  export type StationParamsLogUpdateInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
    station?: StationUpdateOneRequiredWithoutStationParamsLogNestedInput
  }

  export type StationParamsLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type StationParamsLogCreateManyInput = {
    id?: number
    stationId: number
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
  }

  export type StationParamsLogUpdateManyMutationInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type StationParamsLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stationId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type ZoneParamsLogCreateInput = {
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
    zone: ZoneCreateNestedOneWithoutZoneParamsLogInput
  }

  export type ZoneParamsLogUncheckedCreateInput = {
    id?: number
    zoneId: number
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
  }

  export type ZoneParamsLogUpdateInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
    zone?: ZoneUpdateOneRequiredWithoutZoneParamsLogNestedInput
  }

  export type ZoneParamsLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ZoneParamsLogCreateManyInput = {
    id?: number
    zoneId: number
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
  }

  export type ZoneParamsLogUpdateManyMutationInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ZoneParamsLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    zoneId?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserCreateInput = {
    email: string
    name: string
    password: string
    role?: $Enums.Role
    stations?: StationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: $Enums.Role
    stations?: StationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    stations?: StationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    stations?: StationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PlantListRelationFilter = {
    every?: PlantWhereInput
    some?: PlantWhereInput
    none?: PlantWhereInput
  }

  export type PlantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantGroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlantGroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlantGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlantGroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlantGroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type PlantGroupScalarRelationFilter = {
    is?: PlantGroupWhereInput
    isNot?: PlantGroupWhereInput
  }

  export type NormsNullableScalarRelationFilter = {
    is?: NormsWhereInput | null
    isNot?: NormsWhereInput | null
  }

  export type ZoneListRelationFilter = {
    every?: ZoneWhereInput
    some?: ZoneWhereInput
    none?: ZoneWhereInput
  }

  export type ZoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    plantGroupId?: SortOrder
  }

  export type PlantAvgOrderByAggregateInput = {
    id?: SortOrder
    plantGroupId?: SortOrder
  }

  export type PlantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    plantGroupId?: SortOrder
  }

  export type PlantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    plantGroupId?: SortOrder
  }

  export type PlantSumOrderByAggregateInput = {
    id?: SortOrder
    plantGroupId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PlantScalarRelationFilter = {
    is?: PlantWhereInput
    isNot?: PlantWhereInput
  }

  export type NormsCountOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
  }

  export type NormsAvgOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
  }

  export type NormsMaxOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
  }

  export type NormsMinOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
  }

  export type NormsSumOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    plantId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StationParamsLogListRelationFilter = {
    every?: StationParamsLogWhereInput
    some?: StationParamsLogWhereInput
    none?: StationParamsLogWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StationParamsLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StationScalarRelationFilter = {
    is?: StationWhereInput
    isNot?: StationWhereInput
  }

  export type ZoneParamsLogListRelationFilter = {
    every?: ZoneParamsLogWhereInput
    some?: ZoneParamsLogWhereInput
    none?: ZoneParamsLogWhereInput
  }

  export type ZoneNormsNullableScalarRelationFilter = {
    is?: ZoneNormsWhereInput | null
    isNot?: ZoneNormsWhereInput | null
  }

  export type ZoneParamsLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ZoneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    isLightOn?: SortOrder
    stationId?: SortOrder
  }

  export type ZoneAvgOrderByAggregateInput = {
    id?: SortOrder
    plantId?: SortOrder
    stationId?: SortOrder
  }

  export type ZoneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    isLightOn?: SortOrder
    stationId?: SortOrder
  }

  export type ZoneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    plantId?: SortOrder
    isLightOn?: SortOrder
    stationId?: SortOrder
  }

  export type ZoneSumOrderByAggregateInput = {
    id?: SortOrder
    plantId?: SortOrder
    stationId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ZoneScalarRelationFilter = {
    is?: ZoneWhereInput
    isNot?: ZoneWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ZoneNormsCountOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    zoneId?: SortOrder
  }

  export type ZoneNormsAvgOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    zoneId?: SortOrder
  }

  export type ZoneNormsMaxOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    zoneId?: SortOrder
  }

  export type ZoneNormsMinOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    zoneId?: SortOrder
  }

  export type ZoneNormsSumOrderByAggregateInput = {
    id?: SortOrder
    temperatureMin?: SortOrder
    temperatureMax?: SortOrder
    airHumidityMin?: SortOrder
    airHumidityMax?: SortOrder
    substrateHumidityMin?: SortOrder
    substrateHumidityMax?: SortOrder
    phLevelMin?: SortOrder
    phLevelMax?: SortOrder
    nutrientConcentrationMin?: SortOrder
    nutrientConcentrationMax?: SortOrder
    solutionTemperatureMin?: SortOrder
    solutionTemperatureMax?: SortOrder
    solutionLvlMin?: SortOrder
    solutionLvlMax?: SortOrder
    lightIntensityMin?: SortOrder
    lightIntensityMax?: SortOrder
    zoneId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StationParamsLogCountOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
  }

  export type StationParamsLogAvgOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
  }

  export type StationParamsLogMaxOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
  }

  export type StationParamsLogMinOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    recordedAt?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
  }

  export type StationParamsLogSumOrderByAggregateInput = {
    id?: SortOrder
    stationId?: SortOrder
    phLevel?: SortOrder
    nutrientConcentration?: SortOrder
    solutionTemperature?: SortOrder
    solutionLvl?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ZoneParamsLogCountOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
    isLightOn?: SortOrder
  }

  export type ZoneParamsLogAvgOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
  }

  export type ZoneParamsLogMaxOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
    isLightOn?: SortOrder
  }

  export type ZoneParamsLogMinOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    recordedAt?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
    isLightOn?: SortOrder
  }

  export type ZoneParamsLogSumOrderByAggregateInput = {
    id?: SortOrder
    zoneId?: SortOrder
    temperature?: SortOrder
    airHumidity?: SortOrder
    substrateHumidity?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StationListRelationFilter = {
    every?: StationWhereInput
    some?: StationWhereInput
    none?: StationWhereInput
  }

  export type StationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type PlantCreateNestedManyWithoutPlantGroupInput = {
    create?: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput> | PlantCreateWithoutPlantGroupInput[] | PlantUncheckedCreateWithoutPlantGroupInput[]
    connectOrCreate?: PlantCreateOrConnectWithoutPlantGroupInput | PlantCreateOrConnectWithoutPlantGroupInput[]
    createMany?: PlantCreateManyPlantGroupInputEnvelope
    connect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
  }

  export type PlantUncheckedCreateNestedManyWithoutPlantGroupInput = {
    create?: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput> | PlantCreateWithoutPlantGroupInput[] | PlantUncheckedCreateWithoutPlantGroupInput[]
    connectOrCreate?: PlantCreateOrConnectWithoutPlantGroupInput | PlantCreateOrConnectWithoutPlantGroupInput[]
    createMany?: PlantCreateManyPlantGroupInputEnvelope
    connect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PlantUpdateManyWithoutPlantGroupNestedInput = {
    create?: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput> | PlantCreateWithoutPlantGroupInput[] | PlantUncheckedCreateWithoutPlantGroupInput[]
    connectOrCreate?: PlantCreateOrConnectWithoutPlantGroupInput | PlantCreateOrConnectWithoutPlantGroupInput[]
    upsert?: PlantUpsertWithWhereUniqueWithoutPlantGroupInput | PlantUpsertWithWhereUniqueWithoutPlantGroupInput[]
    createMany?: PlantCreateManyPlantGroupInputEnvelope
    set?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    disconnect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    delete?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    connect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    update?: PlantUpdateWithWhereUniqueWithoutPlantGroupInput | PlantUpdateWithWhereUniqueWithoutPlantGroupInput[]
    updateMany?: PlantUpdateManyWithWhereWithoutPlantGroupInput | PlantUpdateManyWithWhereWithoutPlantGroupInput[]
    deleteMany?: PlantScalarWhereInput | PlantScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlantUncheckedUpdateManyWithoutPlantGroupNestedInput = {
    create?: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput> | PlantCreateWithoutPlantGroupInput[] | PlantUncheckedCreateWithoutPlantGroupInput[]
    connectOrCreate?: PlantCreateOrConnectWithoutPlantGroupInput | PlantCreateOrConnectWithoutPlantGroupInput[]
    upsert?: PlantUpsertWithWhereUniqueWithoutPlantGroupInput | PlantUpsertWithWhereUniqueWithoutPlantGroupInput[]
    createMany?: PlantCreateManyPlantGroupInputEnvelope
    set?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    disconnect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    delete?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    connect?: PlantWhereUniqueInput | PlantWhereUniqueInput[]
    update?: PlantUpdateWithWhereUniqueWithoutPlantGroupInput | PlantUpdateWithWhereUniqueWithoutPlantGroupInput[]
    updateMany?: PlantUpdateManyWithWhereWithoutPlantGroupInput | PlantUpdateManyWithWhereWithoutPlantGroupInput[]
    deleteMany?: PlantScalarWhereInput | PlantScalarWhereInput[]
  }

  export type PlantGroupCreateNestedOneWithoutPlantsInput = {
    create?: XOR<PlantGroupCreateWithoutPlantsInput, PlantGroupUncheckedCreateWithoutPlantsInput>
    connectOrCreate?: PlantGroupCreateOrConnectWithoutPlantsInput
    connect?: PlantGroupWhereUniqueInput
  }

  export type NormsCreateNestedOneWithoutPlantInput = {
    create?: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: NormsCreateOrConnectWithoutPlantInput
    connect?: NormsWhereUniqueInput
  }

  export type ZoneCreateNestedManyWithoutPlantInput = {
    create?: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput> | ZoneCreateWithoutPlantInput[] | ZoneUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutPlantInput | ZoneCreateOrConnectWithoutPlantInput[]
    createMany?: ZoneCreateManyPlantInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type NormsUncheckedCreateNestedOneWithoutPlantInput = {
    create?: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: NormsCreateOrConnectWithoutPlantInput
    connect?: NormsWhereUniqueInput
  }

  export type ZoneUncheckedCreateNestedManyWithoutPlantInput = {
    create?: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput> | ZoneCreateWithoutPlantInput[] | ZoneUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutPlantInput | ZoneCreateOrConnectWithoutPlantInput[]
    createMany?: ZoneCreateManyPlantInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type PlantGroupUpdateOneRequiredWithoutPlantsNestedInput = {
    create?: XOR<PlantGroupCreateWithoutPlantsInput, PlantGroupUncheckedCreateWithoutPlantsInput>
    connectOrCreate?: PlantGroupCreateOrConnectWithoutPlantsInput
    upsert?: PlantGroupUpsertWithoutPlantsInput
    connect?: PlantGroupWhereUniqueInput
    update?: XOR<XOR<PlantGroupUpdateToOneWithWhereWithoutPlantsInput, PlantGroupUpdateWithoutPlantsInput>, PlantGroupUncheckedUpdateWithoutPlantsInput>
  }

  export type NormsUpdateOneWithoutPlantNestedInput = {
    create?: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: NormsCreateOrConnectWithoutPlantInput
    upsert?: NormsUpsertWithoutPlantInput
    disconnect?: NormsWhereInput | boolean
    delete?: NormsWhereInput | boolean
    connect?: NormsWhereUniqueInput
    update?: XOR<XOR<NormsUpdateToOneWithWhereWithoutPlantInput, NormsUpdateWithoutPlantInput>, NormsUncheckedUpdateWithoutPlantInput>
  }

  export type ZoneUpdateManyWithoutPlantNestedInput = {
    create?: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput> | ZoneCreateWithoutPlantInput[] | ZoneUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutPlantInput | ZoneCreateOrConnectWithoutPlantInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutPlantInput | ZoneUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: ZoneCreateManyPlantInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutPlantInput | ZoneUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutPlantInput | ZoneUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type NormsUncheckedUpdateOneWithoutPlantNestedInput = {
    create?: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: NormsCreateOrConnectWithoutPlantInput
    upsert?: NormsUpsertWithoutPlantInput
    disconnect?: NormsWhereInput | boolean
    delete?: NormsWhereInput | boolean
    connect?: NormsWhereUniqueInput
    update?: XOR<XOR<NormsUpdateToOneWithWhereWithoutPlantInput, NormsUpdateWithoutPlantInput>, NormsUncheckedUpdateWithoutPlantInput>
  }

  export type ZoneUncheckedUpdateManyWithoutPlantNestedInput = {
    create?: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput> | ZoneCreateWithoutPlantInput[] | ZoneUncheckedCreateWithoutPlantInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutPlantInput | ZoneCreateOrConnectWithoutPlantInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutPlantInput | ZoneUpsertWithWhereUniqueWithoutPlantInput[]
    createMany?: ZoneCreateManyPlantInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutPlantInput | ZoneUpdateWithWhereUniqueWithoutPlantInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutPlantInput | ZoneUpdateManyWithWhereWithoutPlantInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type PlantCreateNestedOneWithoutNormsInput = {
    create?: XOR<PlantCreateWithoutNormsInput, PlantUncheckedCreateWithoutNormsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutNormsInput
    connect?: PlantWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlantUpdateOneRequiredWithoutNormsNestedInput = {
    create?: XOR<PlantCreateWithoutNormsInput, PlantUncheckedCreateWithoutNormsInput>
    connectOrCreate?: PlantCreateOrConnectWithoutNormsInput
    upsert?: PlantUpsertWithoutNormsInput
    connect?: PlantWhereUniqueInput
    update?: XOR<XOR<PlantUpdateToOneWithWhereWithoutNormsInput, PlantUpdateWithoutNormsInput>, PlantUncheckedUpdateWithoutNormsInput>
  }

  export type ZoneCreateNestedManyWithoutStationInput = {
    create?: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput> | ZoneCreateWithoutStationInput[] | ZoneUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutStationInput | ZoneCreateOrConnectWithoutStationInput[]
    createMany?: ZoneCreateManyStationInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type StationParamsLogCreateNestedManyWithoutStationInput = {
    create?: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput> | StationParamsLogCreateWithoutStationInput[] | StationParamsLogUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationParamsLogCreateOrConnectWithoutStationInput | StationParamsLogCreateOrConnectWithoutStationInput[]
    createMany?: StationParamsLogCreateManyStationInputEnvelope
    connect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStationsInput = {
    create?: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationsInput
    connect?: UserWhereUniqueInput
  }

  export type ZoneUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput> | ZoneCreateWithoutStationInput[] | ZoneUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutStationInput | ZoneCreateOrConnectWithoutStationInput[]
    createMany?: ZoneCreateManyStationInputEnvelope
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
  }

  export type StationParamsLogUncheckedCreateNestedManyWithoutStationInput = {
    create?: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput> | StationParamsLogCreateWithoutStationInput[] | StationParamsLogUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationParamsLogCreateOrConnectWithoutStationInput | StationParamsLogCreateOrConnectWithoutStationInput[]
    createMany?: StationParamsLogCreateManyStationInputEnvelope
    connect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
  }

  export type ZoneUpdateManyWithoutStationNestedInput = {
    create?: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput> | ZoneCreateWithoutStationInput[] | ZoneUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutStationInput | ZoneCreateOrConnectWithoutStationInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutStationInput | ZoneUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ZoneCreateManyStationInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutStationInput | ZoneUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutStationInput | ZoneUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type StationParamsLogUpdateManyWithoutStationNestedInput = {
    create?: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput> | StationParamsLogCreateWithoutStationInput[] | StationParamsLogUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationParamsLogCreateOrConnectWithoutStationInput | StationParamsLogCreateOrConnectWithoutStationInput[]
    upsert?: StationParamsLogUpsertWithWhereUniqueWithoutStationInput | StationParamsLogUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: StationParamsLogCreateManyStationInputEnvelope
    set?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    disconnect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    delete?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    connect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    update?: StationParamsLogUpdateWithWhereUniqueWithoutStationInput | StationParamsLogUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: StationParamsLogUpdateManyWithWhereWithoutStationInput | StationParamsLogUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: StationParamsLogScalarWhereInput | StationParamsLogScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStationsNestedInput = {
    create?: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStationsInput
    upsert?: UserUpsertWithoutStationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStationsInput, UserUpdateWithoutStationsInput>, UserUncheckedUpdateWithoutStationsInput>
  }

  export type ZoneUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput> | ZoneCreateWithoutStationInput[] | ZoneUncheckedCreateWithoutStationInput[]
    connectOrCreate?: ZoneCreateOrConnectWithoutStationInput | ZoneCreateOrConnectWithoutStationInput[]
    upsert?: ZoneUpsertWithWhereUniqueWithoutStationInput | ZoneUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: ZoneCreateManyStationInputEnvelope
    set?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    disconnect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    delete?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    connect?: ZoneWhereUniqueInput | ZoneWhereUniqueInput[]
    update?: ZoneUpdateWithWhereUniqueWithoutStationInput | ZoneUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: ZoneUpdateManyWithWhereWithoutStationInput | ZoneUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
  }

  export type StationParamsLogUncheckedUpdateManyWithoutStationNestedInput = {
    create?: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput> | StationParamsLogCreateWithoutStationInput[] | StationParamsLogUncheckedCreateWithoutStationInput[]
    connectOrCreate?: StationParamsLogCreateOrConnectWithoutStationInput | StationParamsLogCreateOrConnectWithoutStationInput[]
    upsert?: StationParamsLogUpsertWithWhereUniqueWithoutStationInput | StationParamsLogUpsertWithWhereUniqueWithoutStationInput[]
    createMany?: StationParamsLogCreateManyStationInputEnvelope
    set?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    disconnect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    delete?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    connect?: StationParamsLogWhereUniqueInput | StationParamsLogWhereUniqueInput[]
    update?: StationParamsLogUpdateWithWhereUniqueWithoutStationInput | StationParamsLogUpdateWithWhereUniqueWithoutStationInput[]
    updateMany?: StationParamsLogUpdateManyWithWhereWithoutStationInput | StationParamsLogUpdateManyWithWhereWithoutStationInput[]
    deleteMany?: StationParamsLogScalarWhereInput | StationParamsLogScalarWhereInput[]
  }

  export type PlantCreateNestedOneWithoutZonesInput = {
    create?: XOR<PlantCreateWithoutZonesInput, PlantUncheckedCreateWithoutZonesInput>
    connectOrCreate?: PlantCreateOrConnectWithoutZonesInput
    connect?: PlantWhereUniqueInput
  }

  export type StationCreateNestedOneWithoutZonesInput = {
    create?: XOR<StationCreateWithoutZonesInput, StationUncheckedCreateWithoutZonesInput>
    connectOrCreate?: StationCreateOrConnectWithoutZonesInput
    connect?: StationWhereUniqueInput
  }

  export type ZoneParamsLogCreateNestedManyWithoutZoneInput = {
    create?: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput> | ZoneParamsLogCreateWithoutZoneInput[] | ZoneParamsLogUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneParamsLogCreateOrConnectWithoutZoneInput | ZoneParamsLogCreateOrConnectWithoutZoneInput[]
    createMany?: ZoneParamsLogCreateManyZoneInputEnvelope
    connect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
  }

  export type ZoneNormsCreateNestedOneWithoutZoneInput = {
    create?: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
    connectOrCreate?: ZoneNormsCreateOrConnectWithoutZoneInput
    connect?: ZoneNormsWhereUniqueInput
  }

  export type ZoneParamsLogUncheckedCreateNestedManyWithoutZoneInput = {
    create?: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput> | ZoneParamsLogCreateWithoutZoneInput[] | ZoneParamsLogUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneParamsLogCreateOrConnectWithoutZoneInput | ZoneParamsLogCreateOrConnectWithoutZoneInput[]
    createMany?: ZoneParamsLogCreateManyZoneInputEnvelope
    connect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
  }

  export type ZoneNormsUncheckedCreateNestedOneWithoutZoneInput = {
    create?: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
    connectOrCreate?: ZoneNormsCreateOrConnectWithoutZoneInput
    connect?: ZoneNormsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type PlantUpdateOneRequiredWithoutZonesNestedInput = {
    create?: XOR<PlantCreateWithoutZonesInput, PlantUncheckedCreateWithoutZonesInput>
    connectOrCreate?: PlantCreateOrConnectWithoutZonesInput
    upsert?: PlantUpsertWithoutZonesInput
    connect?: PlantWhereUniqueInput
    update?: XOR<XOR<PlantUpdateToOneWithWhereWithoutZonesInput, PlantUpdateWithoutZonesInput>, PlantUncheckedUpdateWithoutZonesInput>
  }

  export type StationUpdateOneRequiredWithoutZonesNestedInput = {
    create?: XOR<StationCreateWithoutZonesInput, StationUncheckedCreateWithoutZonesInput>
    connectOrCreate?: StationCreateOrConnectWithoutZonesInput
    upsert?: StationUpsertWithoutZonesInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutZonesInput, StationUpdateWithoutZonesInput>, StationUncheckedUpdateWithoutZonesInput>
  }

  export type ZoneParamsLogUpdateManyWithoutZoneNestedInput = {
    create?: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput> | ZoneParamsLogCreateWithoutZoneInput[] | ZoneParamsLogUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneParamsLogCreateOrConnectWithoutZoneInput | ZoneParamsLogCreateOrConnectWithoutZoneInput[]
    upsert?: ZoneParamsLogUpsertWithWhereUniqueWithoutZoneInput | ZoneParamsLogUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: ZoneParamsLogCreateManyZoneInputEnvelope
    set?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    disconnect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    delete?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    connect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    update?: ZoneParamsLogUpdateWithWhereUniqueWithoutZoneInput | ZoneParamsLogUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: ZoneParamsLogUpdateManyWithWhereWithoutZoneInput | ZoneParamsLogUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: ZoneParamsLogScalarWhereInput | ZoneParamsLogScalarWhereInput[]
  }

  export type ZoneNormsUpdateOneWithoutZoneNestedInput = {
    create?: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
    connectOrCreate?: ZoneNormsCreateOrConnectWithoutZoneInput
    upsert?: ZoneNormsUpsertWithoutZoneInput
    disconnect?: ZoneNormsWhereInput | boolean
    delete?: ZoneNormsWhereInput | boolean
    connect?: ZoneNormsWhereUniqueInput
    update?: XOR<XOR<ZoneNormsUpdateToOneWithWhereWithoutZoneInput, ZoneNormsUpdateWithoutZoneInput>, ZoneNormsUncheckedUpdateWithoutZoneInput>
  }

  export type ZoneParamsLogUncheckedUpdateManyWithoutZoneNestedInput = {
    create?: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput> | ZoneParamsLogCreateWithoutZoneInput[] | ZoneParamsLogUncheckedCreateWithoutZoneInput[]
    connectOrCreate?: ZoneParamsLogCreateOrConnectWithoutZoneInput | ZoneParamsLogCreateOrConnectWithoutZoneInput[]
    upsert?: ZoneParamsLogUpsertWithWhereUniqueWithoutZoneInput | ZoneParamsLogUpsertWithWhereUniqueWithoutZoneInput[]
    createMany?: ZoneParamsLogCreateManyZoneInputEnvelope
    set?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    disconnect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    delete?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    connect?: ZoneParamsLogWhereUniqueInput | ZoneParamsLogWhereUniqueInput[]
    update?: ZoneParamsLogUpdateWithWhereUniqueWithoutZoneInput | ZoneParamsLogUpdateWithWhereUniqueWithoutZoneInput[]
    updateMany?: ZoneParamsLogUpdateManyWithWhereWithoutZoneInput | ZoneParamsLogUpdateManyWithWhereWithoutZoneInput[]
    deleteMany?: ZoneParamsLogScalarWhereInput | ZoneParamsLogScalarWhereInput[]
  }

  export type ZoneNormsUncheckedUpdateOneWithoutZoneNestedInput = {
    create?: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
    connectOrCreate?: ZoneNormsCreateOrConnectWithoutZoneInput
    upsert?: ZoneNormsUpsertWithoutZoneInput
    disconnect?: ZoneNormsWhereInput | boolean
    delete?: ZoneNormsWhereInput | boolean
    connect?: ZoneNormsWhereUniqueInput
    update?: XOR<XOR<ZoneNormsUpdateToOneWithWhereWithoutZoneInput, ZoneNormsUpdateWithoutZoneInput>, ZoneNormsUncheckedUpdateWithoutZoneInput>
  }

  export type ZoneCreateNestedOneWithoutZoneNormsInput = {
    create?: XOR<ZoneCreateWithoutZoneNormsInput, ZoneUncheckedCreateWithoutZoneNormsInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutZoneNormsInput
    connect?: ZoneWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ZoneUpdateOneRequiredWithoutZoneNormsNestedInput = {
    create?: XOR<ZoneCreateWithoutZoneNormsInput, ZoneUncheckedCreateWithoutZoneNormsInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutZoneNormsInput
    upsert?: ZoneUpsertWithoutZoneNormsInput
    connect?: ZoneWhereUniqueInput
    update?: XOR<XOR<ZoneUpdateToOneWithWhereWithoutZoneNormsInput, ZoneUpdateWithoutZoneNormsInput>, ZoneUncheckedUpdateWithoutZoneNormsInput>
  }

  export type StationCreateNestedOneWithoutStationParamsLogInput = {
    create?: XOR<StationCreateWithoutStationParamsLogInput, StationUncheckedCreateWithoutStationParamsLogInput>
    connectOrCreate?: StationCreateOrConnectWithoutStationParamsLogInput
    connect?: StationWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StationUpdateOneRequiredWithoutStationParamsLogNestedInput = {
    create?: XOR<StationCreateWithoutStationParamsLogInput, StationUncheckedCreateWithoutStationParamsLogInput>
    connectOrCreate?: StationCreateOrConnectWithoutStationParamsLogInput
    upsert?: StationUpsertWithoutStationParamsLogInput
    connect?: StationWhereUniqueInput
    update?: XOR<XOR<StationUpdateToOneWithWhereWithoutStationParamsLogInput, StationUpdateWithoutStationParamsLogInput>, StationUncheckedUpdateWithoutStationParamsLogInput>
  }

  export type ZoneCreateNestedOneWithoutZoneParamsLogInput = {
    create?: XOR<ZoneCreateWithoutZoneParamsLogInput, ZoneUncheckedCreateWithoutZoneParamsLogInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutZoneParamsLogInput
    connect?: ZoneWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ZoneUpdateOneRequiredWithoutZoneParamsLogNestedInput = {
    create?: XOR<ZoneCreateWithoutZoneParamsLogInput, ZoneUncheckedCreateWithoutZoneParamsLogInput>
    connectOrCreate?: ZoneCreateOrConnectWithoutZoneParamsLogInput
    upsert?: ZoneUpsertWithoutZoneParamsLogInput
    connect?: ZoneWhereUniqueInput
    update?: XOR<XOR<ZoneUpdateToOneWithWhereWithoutZoneParamsLogInput, ZoneUpdateWithoutZoneParamsLogInput>, ZoneUncheckedUpdateWithoutZoneParamsLogInput>
  }

  export type StationCreateNestedManyWithoutUserInput = {
    create?: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput> | StationCreateWithoutUserInput[] | StationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StationCreateOrConnectWithoutUserInput | StationCreateOrConnectWithoutUserInput[]
    createMany?: StationCreateManyUserInputEnvelope
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
  }

  export type StationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput> | StationCreateWithoutUserInput[] | StationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StationCreateOrConnectWithoutUserInput | StationCreateOrConnectWithoutUserInput[]
    createMany?: StationCreateManyUserInputEnvelope
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type StationUpdateManyWithoutUserNestedInput = {
    create?: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput> | StationCreateWithoutUserInput[] | StationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StationCreateOrConnectWithoutUserInput | StationCreateOrConnectWithoutUserInput[]
    upsert?: StationUpsertWithWhereUniqueWithoutUserInput | StationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StationCreateManyUserInputEnvelope
    set?: StationWhereUniqueInput | StationWhereUniqueInput[]
    disconnect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    delete?: StationWhereUniqueInput | StationWhereUniqueInput[]
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    update?: StationUpdateWithWhereUniqueWithoutUserInput | StationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StationUpdateManyWithWhereWithoutUserInput | StationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StationScalarWhereInput | StationScalarWhereInput[]
  }

  export type StationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput> | StationCreateWithoutUserInput[] | StationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: StationCreateOrConnectWithoutUserInput | StationCreateOrConnectWithoutUserInput[]
    upsert?: StationUpsertWithWhereUniqueWithoutUserInput | StationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: StationCreateManyUserInputEnvelope
    set?: StationWhereUniqueInput | StationWhereUniqueInput[]
    disconnect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    delete?: StationWhereUniqueInput | StationWhereUniqueInput[]
    connect?: StationWhereUniqueInput | StationWhereUniqueInput[]
    update?: StationUpdateWithWhereUniqueWithoutUserInput | StationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: StationUpdateManyWithWhereWithoutUserInput | StationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: StationScalarWhereInput | StationScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type PlantCreateWithoutPlantGroupInput = {
    name: string
    description: string
    norms?: NormsCreateNestedOneWithoutPlantInput
    zones?: ZoneCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutPlantGroupInput = {
    id?: number
    name: string
    description: string
    norms?: NormsUncheckedCreateNestedOneWithoutPlantInput
    zones?: ZoneUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutPlantGroupInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput>
  }

  export type PlantCreateManyPlantGroupInputEnvelope = {
    data: PlantCreateManyPlantGroupInput | PlantCreateManyPlantGroupInput[]
  }

  export type PlantUpsertWithWhereUniqueWithoutPlantGroupInput = {
    where: PlantWhereUniqueInput
    update: XOR<PlantUpdateWithoutPlantGroupInput, PlantUncheckedUpdateWithoutPlantGroupInput>
    create: XOR<PlantCreateWithoutPlantGroupInput, PlantUncheckedCreateWithoutPlantGroupInput>
  }

  export type PlantUpdateWithWhereUniqueWithoutPlantGroupInput = {
    where: PlantWhereUniqueInput
    data: XOR<PlantUpdateWithoutPlantGroupInput, PlantUncheckedUpdateWithoutPlantGroupInput>
  }

  export type PlantUpdateManyWithWhereWithoutPlantGroupInput = {
    where: PlantScalarWhereInput
    data: XOR<PlantUpdateManyMutationInput, PlantUncheckedUpdateManyWithoutPlantGroupInput>
  }

  export type PlantScalarWhereInput = {
    AND?: PlantScalarWhereInput | PlantScalarWhereInput[]
    OR?: PlantScalarWhereInput[]
    NOT?: PlantScalarWhereInput | PlantScalarWhereInput[]
    id?: IntFilter<"Plant"> | number
    name?: StringFilter<"Plant"> | string
    description?: StringFilter<"Plant"> | string
    plantGroupId?: IntFilter<"Plant"> | number
  }

  export type PlantGroupCreateWithoutPlantsInput = {
    name: string
  }

  export type PlantGroupUncheckedCreateWithoutPlantsInput = {
    id?: number
    name: string
  }

  export type PlantGroupCreateOrConnectWithoutPlantsInput = {
    where: PlantGroupWhereUniqueInput
    create: XOR<PlantGroupCreateWithoutPlantsInput, PlantGroupUncheckedCreateWithoutPlantsInput>
  }

  export type NormsCreateWithoutPlantInput = {
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
  }

  export type NormsUncheckedCreateWithoutPlantInput = {
    id?: number
    temperatureMin: number
    temperatureMax: number
    airHumidityMin: number
    airHumidityMax: number
    substrateHumidityMin: number
    substrateHumidityMax: number
    phLevelMin: number
    phLevelMax: number
    nutrientConcentrationMin: number
    nutrientConcentrationMax: number
    solutionTemperatureMin: number
    solutionTemperatureMax: number
    solutionLvlMin: number
    solutionLvlMax: number
    lightIntensityMin: number
    lightIntensityMax: number
  }

  export type NormsCreateOrConnectWithoutPlantInput = {
    where: NormsWhereUniqueInput
    create: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
  }

  export type ZoneCreateWithoutPlantInput = {
    name: string
    isLightOn?: boolean
    station: StationCreateNestedOneWithoutZonesInput
    ZoneParamsLog?: ZoneParamsLogCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsCreateNestedOneWithoutZoneInput
  }

  export type ZoneUncheckedCreateWithoutPlantInput = {
    id?: number
    name: string
    isLightOn?: boolean
    stationId: number
    ZoneParamsLog?: ZoneParamsLogUncheckedCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsUncheckedCreateNestedOneWithoutZoneInput
  }

  export type ZoneCreateOrConnectWithoutPlantInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput>
  }

  export type ZoneCreateManyPlantInputEnvelope = {
    data: ZoneCreateManyPlantInput | ZoneCreateManyPlantInput[]
  }

  export type PlantGroupUpsertWithoutPlantsInput = {
    update: XOR<PlantGroupUpdateWithoutPlantsInput, PlantGroupUncheckedUpdateWithoutPlantsInput>
    create: XOR<PlantGroupCreateWithoutPlantsInput, PlantGroupUncheckedCreateWithoutPlantsInput>
    where?: PlantGroupWhereInput
  }

  export type PlantGroupUpdateToOneWithWhereWithoutPlantsInput = {
    where?: PlantGroupWhereInput
    data: XOR<PlantGroupUpdateWithoutPlantsInput, PlantGroupUncheckedUpdateWithoutPlantsInput>
  }

  export type PlantGroupUpdateWithoutPlantsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlantGroupUncheckedUpdateWithoutPlantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NormsUpsertWithoutPlantInput = {
    update: XOR<NormsUpdateWithoutPlantInput, NormsUncheckedUpdateWithoutPlantInput>
    create: XOR<NormsCreateWithoutPlantInput, NormsUncheckedCreateWithoutPlantInput>
    where?: NormsWhereInput
  }

  export type NormsUpdateToOneWithWhereWithoutPlantInput = {
    where?: NormsWhereInput
    data: XOR<NormsUpdateWithoutPlantInput, NormsUncheckedUpdateWithoutPlantInput>
  }

  export type NormsUpdateWithoutPlantInput = {
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
  }

  export type NormsUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: FloatFieldUpdateOperationsInput | number
    temperatureMax?: FloatFieldUpdateOperationsInput | number
    airHumidityMin?: FloatFieldUpdateOperationsInput | number
    airHumidityMax?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMin?: FloatFieldUpdateOperationsInput | number
    substrateHumidityMax?: FloatFieldUpdateOperationsInput | number
    phLevelMin?: FloatFieldUpdateOperationsInput | number
    phLevelMax?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMin?: FloatFieldUpdateOperationsInput | number
    nutrientConcentrationMax?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMin?: FloatFieldUpdateOperationsInput | number
    solutionTemperatureMax?: FloatFieldUpdateOperationsInput | number
    solutionLvlMin?: FloatFieldUpdateOperationsInput | number
    solutionLvlMax?: FloatFieldUpdateOperationsInput | number
    lightIntensityMin?: FloatFieldUpdateOperationsInput | number
    lightIntensityMax?: FloatFieldUpdateOperationsInput | number
  }

  export type ZoneUpsertWithWhereUniqueWithoutPlantInput = {
    where: ZoneWhereUniqueInput
    update: XOR<ZoneUpdateWithoutPlantInput, ZoneUncheckedUpdateWithoutPlantInput>
    create: XOR<ZoneCreateWithoutPlantInput, ZoneUncheckedCreateWithoutPlantInput>
  }

  export type ZoneUpdateWithWhereUniqueWithoutPlantInput = {
    where: ZoneWhereUniqueInput
    data: XOR<ZoneUpdateWithoutPlantInput, ZoneUncheckedUpdateWithoutPlantInput>
  }

  export type ZoneUpdateManyWithWhereWithoutPlantInput = {
    where: ZoneScalarWhereInput
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyWithoutPlantInput>
  }

  export type ZoneScalarWhereInput = {
    AND?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
    OR?: ZoneScalarWhereInput[]
    NOT?: ZoneScalarWhereInput | ZoneScalarWhereInput[]
    id?: IntFilter<"Zone"> | number
    name?: StringFilter<"Zone"> | string
    plantId?: IntFilter<"Zone"> | number
    isLightOn?: BoolFilter<"Zone"> | boolean
    stationId?: IntFilter<"Zone"> | number
  }

  export type PlantCreateWithoutNormsInput = {
    name: string
    description: string
    plantGroup: PlantGroupCreateNestedOneWithoutPlantsInput
    zones?: ZoneCreateNestedManyWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutNormsInput = {
    id?: number
    name: string
    description: string
    plantGroupId: number
    zones?: ZoneUncheckedCreateNestedManyWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutNormsInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantCreateWithoutNormsInput, PlantUncheckedCreateWithoutNormsInput>
  }

  export type PlantUpsertWithoutNormsInput = {
    update: XOR<PlantUpdateWithoutNormsInput, PlantUncheckedUpdateWithoutNormsInput>
    create: XOR<PlantCreateWithoutNormsInput, PlantUncheckedCreateWithoutNormsInput>
    where?: PlantWhereInput
  }

  export type PlantUpdateToOneWithWhereWithoutNormsInput = {
    where?: PlantWhereInput
    data: XOR<PlantUpdateWithoutNormsInput, PlantUncheckedUpdateWithoutNormsInput>
  }

  export type PlantUpdateWithoutNormsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroup?: PlantGroupUpdateOneRequiredWithoutPlantsNestedInput
    zones?: ZoneUpdateManyWithoutPlantNestedInput
  }

  export type PlantUncheckedUpdateWithoutNormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroupId?: IntFieldUpdateOperationsInput | number
    zones?: ZoneUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type ZoneCreateWithoutStationInput = {
    name: string
    isLightOn?: boolean
    plant: PlantCreateNestedOneWithoutZonesInput
    ZoneParamsLog?: ZoneParamsLogCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsCreateNestedOneWithoutZoneInput
  }

  export type ZoneUncheckedCreateWithoutStationInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
    ZoneParamsLog?: ZoneParamsLogUncheckedCreateNestedManyWithoutZoneInput
    zoneNorms?: ZoneNormsUncheckedCreateNestedOneWithoutZoneInput
  }

  export type ZoneCreateOrConnectWithoutStationInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput>
  }

  export type ZoneCreateManyStationInputEnvelope = {
    data: ZoneCreateManyStationInput | ZoneCreateManyStationInput[]
  }

  export type StationParamsLogCreateWithoutStationInput = {
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
  }

  export type StationParamsLogUncheckedCreateWithoutStationInput = {
    id?: number
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
  }

  export type StationParamsLogCreateOrConnectWithoutStationInput = {
    where: StationParamsLogWhereUniqueInput
    create: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput>
  }

  export type StationParamsLogCreateManyStationInputEnvelope = {
    data: StationParamsLogCreateManyStationInput | StationParamsLogCreateManyStationInput[]
  }

  export type UserCreateWithoutStationsInput = {
    email: string
    name: string
    password: string
    role?: $Enums.Role
  }

  export type UserUncheckedCreateWithoutStationsInput = {
    id?: number
    email: string
    name: string
    password: string
    role?: $Enums.Role
  }

  export type UserCreateOrConnectWithoutStationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
  }

  export type ZoneUpsertWithWhereUniqueWithoutStationInput = {
    where: ZoneWhereUniqueInput
    update: XOR<ZoneUpdateWithoutStationInput, ZoneUncheckedUpdateWithoutStationInput>
    create: XOR<ZoneCreateWithoutStationInput, ZoneUncheckedCreateWithoutStationInput>
  }

  export type ZoneUpdateWithWhereUniqueWithoutStationInput = {
    where: ZoneWhereUniqueInput
    data: XOR<ZoneUpdateWithoutStationInput, ZoneUncheckedUpdateWithoutStationInput>
  }

  export type ZoneUpdateManyWithWhereWithoutStationInput = {
    where: ZoneScalarWhereInput
    data: XOR<ZoneUpdateManyMutationInput, ZoneUncheckedUpdateManyWithoutStationInput>
  }

  export type StationParamsLogUpsertWithWhereUniqueWithoutStationInput = {
    where: StationParamsLogWhereUniqueInput
    update: XOR<StationParamsLogUpdateWithoutStationInput, StationParamsLogUncheckedUpdateWithoutStationInput>
    create: XOR<StationParamsLogCreateWithoutStationInput, StationParamsLogUncheckedCreateWithoutStationInput>
  }

  export type StationParamsLogUpdateWithWhereUniqueWithoutStationInput = {
    where: StationParamsLogWhereUniqueInput
    data: XOR<StationParamsLogUpdateWithoutStationInput, StationParamsLogUncheckedUpdateWithoutStationInput>
  }

  export type StationParamsLogUpdateManyWithWhereWithoutStationInput = {
    where: StationParamsLogScalarWhereInput
    data: XOR<StationParamsLogUpdateManyMutationInput, StationParamsLogUncheckedUpdateManyWithoutStationInput>
  }

  export type StationParamsLogScalarWhereInput = {
    AND?: StationParamsLogScalarWhereInput | StationParamsLogScalarWhereInput[]
    OR?: StationParamsLogScalarWhereInput[]
    NOT?: StationParamsLogScalarWhereInput | StationParamsLogScalarWhereInput[]
    id?: IntFilter<"StationParamsLog"> | number
    stationId?: IntFilter<"StationParamsLog"> | number
    recordedAt?: DateTimeFilter<"StationParamsLog"> | Date | string
    phLevel?: FloatFilter<"StationParamsLog"> | number
    nutrientConcentration?: FloatFilter<"StationParamsLog"> | number
    solutionTemperature?: FloatFilter<"StationParamsLog"> | number
    solutionLvl?: FloatFilter<"StationParamsLog"> | number
  }

  export type UserUpsertWithoutStationsInput = {
    update: XOR<UserUpdateWithoutStationsInput, UserUncheckedUpdateWithoutStationsInput>
    create: XOR<UserCreateWithoutStationsInput, UserUncheckedCreateWithoutStationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStationsInput, UserUncheckedUpdateWithoutStationsInput>
  }

  export type UserUpdateWithoutStationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateWithoutStationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type PlantCreateWithoutZonesInput = {
    name: string
    description: string
    plantGroup: PlantGroupCreateNestedOneWithoutPlantsInput
    norms?: NormsCreateNestedOneWithoutPlantInput
  }

  export type PlantUncheckedCreateWithoutZonesInput = {
    id?: number
    name: string
    description: string
    plantGroupId: number
    norms?: NormsUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantCreateOrConnectWithoutZonesInput = {
    where: PlantWhereUniqueInput
    create: XOR<PlantCreateWithoutZonesInput, PlantUncheckedCreateWithoutZonesInput>
  }

  export type StationCreateWithoutZonesInput = {
    name: string
    StationParamsLog?: StationParamsLogCreateNestedManyWithoutStationInput
    user: UserCreateNestedOneWithoutStationsInput
  }

  export type StationUncheckedCreateWithoutZonesInput = {
    id?: number
    name: string
    userId: number
    StationParamsLog?: StationParamsLogUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutZonesInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutZonesInput, StationUncheckedCreateWithoutZonesInput>
  }

  export type ZoneParamsLogCreateWithoutZoneInput = {
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
  }

  export type ZoneParamsLogUncheckedCreateWithoutZoneInput = {
    id?: number
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
  }

  export type ZoneParamsLogCreateOrConnectWithoutZoneInput = {
    where: ZoneParamsLogWhereUniqueInput
    create: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput>
  }

  export type ZoneParamsLogCreateManyZoneInputEnvelope = {
    data: ZoneParamsLogCreateManyZoneInput | ZoneParamsLogCreateManyZoneInput[]
  }

  export type ZoneNormsCreateWithoutZoneInput = {
    temperatureMin?: number | null
    temperatureMax?: number | null
    airHumidityMin?: number | null
    airHumidityMax?: number | null
    substrateHumidityMin?: number | null
    substrateHumidityMax?: number | null
    phLevelMin?: number | null
    phLevelMax?: number | null
    nutrientConcentrationMin?: number | null
    nutrientConcentrationMax?: number | null
    solutionTemperatureMin?: number | null
    solutionTemperatureMax?: number | null
    solutionLvlMin?: number | null
    solutionLvlMax?: number | null
    lightIntensityMin?: number | null
    lightIntensityMax?: number | null
  }

  export type ZoneNormsUncheckedCreateWithoutZoneInput = {
    id?: number
    temperatureMin?: number | null
    temperatureMax?: number | null
    airHumidityMin?: number | null
    airHumidityMax?: number | null
    substrateHumidityMin?: number | null
    substrateHumidityMax?: number | null
    phLevelMin?: number | null
    phLevelMax?: number | null
    nutrientConcentrationMin?: number | null
    nutrientConcentrationMax?: number | null
    solutionTemperatureMin?: number | null
    solutionTemperatureMax?: number | null
    solutionLvlMin?: number | null
    solutionLvlMax?: number | null
    lightIntensityMin?: number | null
    lightIntensityMax?: number | null
  }

  export type ZoneNormsCreateOrConnectWithoutZoneInput = {
    where: ZoneNormsWhereUniqueInput
    create: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
  }

  export type PlantUpsertWithoutZonesInput = {
    update: XOR<PlantUpdateWithoutZonesInput, PlantUncheckedUpdateWithoutZonesInput>
    create: XOR<PlantCreateWithoutZonesInput, PlantUncheckedCreateWithoutZonesInput>
    where?: PlantWhereInput
  }

  export type PlantUpdateToOneWithWhereWithoutZonesInput = {
    where?: PlantWhereInput
    data: XOR<PlantUpdateWithoutZonesInput, PlantUncheckedUpdateWithoutZonesInput>
  }

  export type PlantUpdateWithoutZonesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroup?: PlantGroupUpdateOneRequiredWithoutPlantsNestedInput
    norms?: NormsUpdateOneWithoutPlantNestedInput
  }

  export type PlantUncheckedUpdateWithoutZonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    plantGroupId?: IntFieldUpdateOperationsInput | number
    norms?: NormsUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type StationUpsertWithoutZonesInput = {
    update: XOR<StationUpdateWithoutZonesInput, StationUncheckedUpdateWithoutZonesInput>
    create: XOR<StationCreateWithoutZonesInput, StationUncheckedCreateWithoutZonesInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutZonesInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutZonesInput, StationUncheckedUpdateWithoutZonesInput>
  }

  export type StationUpdateWithoutZonesInput = {
    name?: StringFieldUpdateOperationsInput | string
    StationParamsLog?: StationParamsLogUpdateManyWithoutStationNestedInput
    user?: UserUpdateOneRequiredWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateWithoutZonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    StationParamsLog?: StationParamsLogUncheckedUpdateManyWithoutStationNestedInput
  }

  export type ZoneParamsLogUpsertWithWhereUniqueWithoutZoneInput = {
    where: ZoneParamsLogWhereUniqueInput
    update: XOR<ZoneParamsLogUpdateWithoutZoneInput, ZoneParamsLogUncheckedUpdateWithoutZoneInput>
    create: XOR<ZoneParamsLogCreateWithoutZoneInput, ZoneParamsLogUncheckedCreateWithoutZoneInput>
  }

  export type ZoneParamsLogUpdateWithWhereUniqueWithoutZoneInput = {
    where: ZoneParamsLogWhereUniqueInput
    data: XOR<ZoneParamsLogUpdateWithoutZoneInput, ZoneParamsLogUncheckedUpdateWithoutZoneInput>
  }

  export type ZoneParamsLogUpdateManyWithWhereWithoutZoneInput = {
    where: ZoneParamsLogScalarWhereInput
    data: XOR<ZoneParamsLogUpdateManyMutationInput, ZoneParamsLogUncheckedUpdateManyWithoutZoneInput>
  }

  export type ZoneParamsLogScalarWhereInput = {
    AND?: ZoneParamsLogScalarWhereInput | ZoneParamsLogScalarWhereInput[]
    OR?: ZoneParamsLogScalarWhereInput[]
    NOT?: ZoneParamsLogScalarWhereInput | ZoneParamsLogScalarWhereInput[]
    id?: IntFilter<"ZoneParamsLog"> | number
    zoneId?: IntFilter<"ZoneParamsLog"> | number
    recordedAt?: DateTimeFilter<"ZoneParamsLog"> | Date | string
    temperature?: FloatFilter<"ZoneParamsLog"> | number
    airHumidity?: FloatFilter<"ZoneParamsLog"> | number
    substrateHumidity?: FloatFilter<"ZoneParamsLog"> | number
    isLightOn?: BoolNullableFilter<"ZoneParamsLog"> | boolean | null
  }

  export type ZoneNormsUpsertWithoutZoneInput = {
    update: XOR<ZoneNormsUpdateWithoutZoneInput, ZoneNormsUncheckedUpdateWithoutZoneInput>
    create: XOR<ZoneNormsCreateWithoutZoneInput, ZoneNormsUncheckedCreateWithoutZoneInput>
    where?: ZoneNormsWhereInput
  }

  export type ZoneNormsUpdateToOneWithWhereWithoutZoneInput = {
    where?: ZoneNormsWhereInput
    data: XOR<ZoneNormsUpdateWithoutZoneInput, ZoneNormsUncheckedUpdateWithoutZoneInput>
  }

  export type ZoneNormsUpdateWithoutZoneInput = {
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ZoneNormsUncheckedUpdateWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    temperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    temperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    airHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    substrateHumidityMax?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMin?: NullableFloatFieldUpdateOperationsInput | number | null
    phLevelMax?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMin?: NullableFloatFieldUpdateOperationsInput | number | null
    nutrientConcentrationMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionTemperatureMax?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMin?: NullableFloatFieldUpdateOperationsInput | number | null
    solutionLvlMax?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMin?: NullableFloatFieldUpdateOperationsInput | number | null
    lightIntensityMax?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ZoneCreateWithoutZoneNormsInput = {
    name: string
    isLightOn?: boolean
    plant: PlantCreateNestedOneWithoutZonesInput
    station: StationCreateNestedOneWithoutZonesInput
    ZoneParamsLog?: ZoneParamsLogCreateNestedManyWithoutZoneInput
  }

  export type ZoneUncheckedCreateWithoutZoneNormsInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
    stationId: number
    ZoneParamsLog?: ZoneParamsLogUncheckedCreateNestedManyWithoutZoneInput
  }

  export type ZoneCreateOrConnectWithoutZoneNormsInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutZoneNormsInput, ZoneUncheckedCreateWithoutZoneNormsInput>
  }

  export type ZoneUpsertWithoutZoneNormsInput = {
    update: XOR<ZoneUpdateWithoutZoneNormsInput, ZoneUncheckedUpdateWithoutZoneNormsInput>
    create: XOR<ZoneCreateWithoutZoneNormsInput, ZoneUncheckedCreateWithoutZoneNormsInput>
    where?: ZoneWhereInput
  }

  export type ZoneUpdateToOneWithWhereWithoutZoneNormsInput = {
    where?: ZoneWhereInput
    data: XOR<ZoneUpdateWithoutZoneNormsInput, ZoneUncheckedUpdateWithoutZoneNormsInput>
  }

  export type ZoneUpdateWithoutZoneNormsInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    plant?: PlantUpdateOneRequiredWithoutZonesNestedInput
    station?: StationUpdateOneRequiredWithoutZonesNestedInput
    ZoneParamsLog?: ZoneParamsLogUpdateManyWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateWithoutZoneNormsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
    ZoneParamsLog?: ZoneParamsLogUncheckedUpdateManyWithoutZoneNestedInput
  }

  export type StationCreateWithoutStationParamsLogInput = {
    name: string
    zones?: ZoneCreateNestedManyWithoutStationInput
    user: UserCreateNestedOneWithoutStationsInput
  }

  export type StationUncheckedCreateWithoutStationParamsLogInput = {
    id?: number
    name: string
    userId: number
    zones?: ZoneUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutStationParamsLogInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutStationParamsLogInput, StationUncheckedCreateWithoutStationParamsLogInput>
  }

  export type StationUpsertWithoutStationParamsLogInput = {
    update: XOR<StationUpdateWithoutStationParamsLogInput, StationUncheckedUpdateWithoutStationParamsLogInput>
    create: XOR<StationCreateWithoutStationParamsLogInput, StationUncheckedCreateWithoutStationParamsLogInput>
    where?: StationWhereInput
  }

  export type StationUpdateToOneWithWhereWithoutStationParamsLogInput = {
    where?: StationWhereInput
    data: XOR<StationUpdateWithoutStationParamsLogInput, StationUncheckedUpdateWithoutStationParamsLogInput>
  }

  export type StationUpdateWithoutStationParamsLogInput = {
    name?: StringFieldUpdateOperationsInput | string
    zones?: ZoneUpdateManyWithoutStationNestedInput
    user?: UserUpdateOneRequiredWithoutStationsNestedInput
  }

  export type StationUncheckedUpdateWithoutStationParamsLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    zones?: ZoneUncheckedUpdateManyWithoutStationNestedInput
  }

  export type ZoneCreateWithoutZoneParamsLogInput = {
    name: string
    isLightOn?: boolean
    plant: PlantCreateNestedOneWithoutZonesInput
    station: StationCreateNestedOneWithoutZonesInput
    zoneNorms?: ZoneNormsCreateNestedOneWithoutZoneInput
  }

  export type ZoneUncheckedCreateWithoutZoneParamsLogInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
    stationId: number
    zoneNorms?: ZoneNormsUncheckedCreateNestedOneWithoutZoneInput
  }

  export type ZoneCreateOrConnectWithoutZoneParamsLogInput = {
    where: ZoneWhereUniqueInput
    create: XOR<ZoneCreateWithoutZoneParamsLogInput, ZoneUncheckedCreateWithoutZoneParamsLogInput>
  }

  export type ZoneUpsertWithoutZoneParamsLogInput = {
    update: XOR<ZoneUpdateWithoutZoneParamsLogInput, ZoneUncheckedUpdateWithoutZoneParamsLogInput>
    create: XOR<ZoneCreateWithoutZoneParamsLogInput, ZoneUncheckedCreateWithoutZoneParamsLogInput>
    where?: ZoneWhereInput
  }

  export type ZoneUpdateToOneWithWhereWithoutZoneParamsLogInput = {
    where?: ZoneWhereInput
    data: XOR<ZoneUpdateWithoutZoneParamsLogInput, ZoneUncheckedUpdateWithoutZoneParamsLogInput>
  }

  export type ZoneUpdateWithoutZoneParamsLogInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    plant?: PlantUpdateOneRequiredWithoutZonesNestedInput
    station?: StationUpdateOneRequiredWithoutZonesNestedInput
    zoneNorms?: ZoneNormsUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateWithoutZoneParamsLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
    zoneNorms?: ZoneNormsUncheckedUpdateOneWithoutZoneNestedInput
  }

  export type StationCreateWithoutUserInput = {
    name: string
    zones?: ZoneCreateNestedManyWithoutStationInput
    StationParamsLog?: StationParamsLogCreateNestedManyWithoutStationInput
  }

  export type StationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    zones?: ZoneUncheckedCreateNestedManyWithoutStationInput
    StationParamsLog?: StationParamsLogUncheckedCreateNestedManyWithoutStationInput
  }

  export type StationCreateOrConnectWithoutUserInput = {
    where: StationWhereUniqueInput
    create: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput>
  }

  export type StationCreateManyUserInputEnvelope = {
    data: StationCreateManyUserInput | StationCreateManyUserInput[]
  }

  export type StationUpsertWithWhereUniqueWithoutUserInput = {
    where: StationWhereUniqueInput
    update: XOR<StationUpdateWithoutUserInput, StationUncheckedUpdateWithoutUserInput>
    create: XOR<StationCreateWithoutUserInput, StationUncheckedCreateWithoutUserInput>
  }

  export type StationUpdateWithWhereUniqueWithoutUserInput = {
    where: StationWhereUniqueInput
    data: XOR<StationUpdateWithoutUserInput, StationUncheckedUpdateWithoutUserInput>
  }

  export type StationUpdateManyWithWhereWithoutUserInput = {
    where: StationScalarWhereInput
    data: XOR<StationUpdateManyMutationInput, StationUncheckedUpdateManyWithoutUserInput>
  }

  export type StationScalarWhereInput = {
    AND?: StationScalarWhereInput | StationScalarWhereInput[]
    OR?: StationScalarWhereInput[]
    NOT?: StationScalarWhereInput | StationScalarWhereInput[]
    id?: IntFilter<"Station"> | number
    name?: StringFilter<"Station"> | string
    userId?: IntFilter<"Station"> | number
  }

  export type PlantCreateManyPlantGroupInput = {
    id?: number
    name: string
    description: string
  }

  export type PlantUpdateWithoutPlantGroupInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    norms?: NormsUpdateOneWithoutPlantNestedInput
    zones?: ZoneUpdateManyWithoutPlantNestedInput
  }

  export type PlantUncheckedUpdateWithoutPlantGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    norms?: NormsUncheckedUpdateOneWithoutPlantNestedInput
    zones?: ZoneUncheckedUpdateManyWithoutPlantNestedInput
  }

  export type PlantUncheckedUpdateManyWithoutPlantGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ZoneCreateManyPlantInput = {
    id?: number
    name: string
    isLightOn?: boolean
    stationId: number
  }

  export type ZoneUpdateWithoutPlantInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    station?: StationUpdateOneRequiredWithoutZonesNestedInput
    ZoneParamsLog?: ZoneParamsLogUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
    ZoneParamsLog?: ZoneParamsLogUncheckedUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUncheckedUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateManyWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    stationId?: IntFieldUpdateOperationsInput | number
  }

  export type ZoneCreateManyStationInput = {
    id?: number
    name: string
    plantId: number
    isLightOn?: boolean
  }

  export type StationParamsLogCreateManyStationInput = {
    id?: number
    recordedAt?: Date | string
    phLevel: number
    nutrientConcentration: number
    solutionTemperature: number
    solutionLvl: number
  }

  export type ZoneUpdateWithoutStationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    plant?: PlantUpdateOneRequiredWithoutZonesNestedInput
    ZoneParamsLog?: ZoneParamsLogUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
    ZoneParamsLog?: ZoneParamsLogUncheckedUpdateManyWithoutZoneNestedInput
    zoneNorms?: ZoneNormsUncheckedUpdateOneWithoutZoneNestedInput
  }

  export type ZoneUncheckedUpdateManyWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plantId?: IntFieldUpdateOperationsInput | number
    isLightOn?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StationParamsLogUpdateWithoutStationInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type StationParamsLogUncheckedUpdateWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type StationParamsLogUncheckedUpdateManyWithoutStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phLevel?: FloatFieldUpdateOperationsInput | number
    nutrientConcentration?: FloatFieldUpdateOperationsInput | number
    solutionTemperature?: FloatFieldUpdateOperationsInput | number
    solutionLvl?: FloatFieldUpdateOperationsInput | number
  }

  export type ZoneParamsLogCreateManyZoneInput = {
    id?: number
    recordedAt?: Date | string
    temperature: number
    airHumidity: number
    substrateHumidity: number
    isLightOn?: boolean | null
  }

  export type ZoneParamsLogUpdateWithoutZoneInput = {
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ZoneParamsLogUncheckedUpdateWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ZoneParamsLogUncheckedUpdateManyWithoutZoneInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperature?: FloatFieldUpdateOperationsInput | number
    airHumidity?: FloatFieldUpdateOperationsInput | number
    substrateHumidity?: FloatFieldUpdateOperationsInput | number
    isLightOn?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type StationCreateManyUserInput = {
    id?: number
    name: string
  }

  export type StationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    zones?: ZoneUpdateManyWithoutStationNestedInput
    StationParamsLog?: StationParamsLogUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    zones?: ZoneUncheckedUpdateManyWithoutStationNestedInput
    StationParamsLog?: StationParamsLogUncheckedUpdateManyWithoutStationNestedInput
  }

  export type StationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}