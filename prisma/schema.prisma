// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model PlantGroup {
  id     Int     @id @default(autoincrement())
  name   String
  plants Plant[]

  @@map("plant_group")
}

model Plant {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  plantGroupId Int
  plantGroup   PlantGroup @relation(fields: [plantGroupId], references: [id])
  norms        Norms?     @relation("PlantNorms")
  zones        Zone[]
}

model Norms {
  id Int @id @default(autoincrement())

  temperatureMin           Float
  temperatureMax           Float
  airHumidityMin           Float
  airHumidityMax           Float
  substrateHumidityMin     Float
  substrateHumidityMax     Float
  phLevelMin               Float
  phLevelMax               Float
  nutrientConcentrationMin Float
  nutrientConcentrationMax Float
  solutionTemperatureMin   Float
  solutionTemperatureMax   Float
  solutionLvlMin           Float
  solutionLvlMax           Float
  lightIntensityMin        Float
  lightIntensityMax        Float

  plantId Int   @unique
  plant   Plant @relation("PlantNorms", fields: [plantId], references: [id])
}

model Station {
  id                 Int                 @id @default(autoincrement())
  uuid               String              @unique
  name               String
  zones              Zone[]
  bucketLogs         BucketParamsLog[]
  bucketParams       BucketParams?
  bucketTargetParams BucketTargetParams?

  userId           Int
  user             User               @relation(fields: [userId], references: [id])
  StationParamsLog StationParamsLog[]
}

model BucketParams {
  id        Int     @id @default(autoincrement())
  stationId Int     @unique
  station   Station @relation(fields: [stationId], references: [id])

  phLevel               Float
  nutrientConcentration Float
  solutionTemperature   Float
  solutionLvl           Float
  updatedAt             DateTime @updatedAt
}

model BucketParamsLog {
  id        Int     @id @default(autoincrement())
  stationId Int
  station   Station @relation(fields: [stationId], references: [id])

  recordedAt DateTime @default(now())

  phLevel               Float
  nutrientConcentration Float
  solutionTemperature   Float
  solutionLvl           Float

  @@index([stationId, recordedAt])
  @@map("bucket_params_log")
}

model Zone {
  id        Int     @id @default(autoincrement())
  index     Int
  name      String
  plantId   Int?
  plant     Plant?  @relation(fields: [plantId], references: [id])
  isLightOn Boolean @default(false)

  stationId Int
  station   Station @relation(fields: [stationId], references: [id])

  zoneLogs         ZoneParamsLog[]
  zoneParams       ZoneParams?
  zoneNorms        ZoneNorms?
  zoneTargetParams ZoneTargetParams?
  schedule         ZoneSchedule?
}

model ZoneSchedule {
  id     Int  @id @default(autoincrement())
  zoneId Int  @unique
  zone   Zone @relation(fields: [zoneId], references: [id])

  lightOnTime  String // e.g. "08:00"
  lightOffTime String
  pumpOnTime   String
  pumpOffTime  String
  fanOnTime    String
  fanOffTime   String
}

model ZoneNorms {
  id Int @id @default(autoincrement())

  temperatureMin           Float?
  temperatureMax           Float?
  airHumidityMin           Float?
  airHumidityMax           Float?
  substrateHumidityMin     Float?
  substrateHumidityMax     Float?
  phLevelMin               Float?
  phLevelMax               Float?
  nutrientConcentrationMin Float?
  nutrientConcentrationMax Float?
  solutionTemperatureMin   Float?
  solutionTemperatureMax   Float?
  solutionLvlMin           Float?
  solutionLvlMax           Float?
  lightIntensityMin        Float?
  lightIntensityMax        Float?

  zoneId Int  @unique
  zone   Zone @relation(fields: [zoneId], references: [id])
}

model ZoneParams {
  id     Int  @id @default(autoincrement())
  zoneId Int  @unique
  zone   Zone @relation(fields: [zoneId], references: [id])

  temperature       Float
  airHumidity       Float
  substrateHumidity Float
  isLightOn         Boolean
  updatedAt         DateTime @updatedAt
}

model StationParamsLog {
  id        Int     @id @default(autoincrement())
  stationId Int
  station   Station @relation(fields: [stationId], references: [id])

  recordedAt DateTime @default(now())

  phLevel               Float
  nutrientConcentration Float
  solutionTemperature   Float
  solutionLvl           Float

  @@index([stationId, recordedAt])
  @@map("station_params_log")
}

model ZoneParamsLog {
  id     Int  @id @default(autoincrement())
  zoneId Int
  zone   Zone @relation(fields: [zoneId], references: [id])

  recordedAt DateTime @default(now())

  temperature       Float
  airHumidity       Float
  substrateHumidity Float
  isLightOn         Boolean?

  @@index([zoneId, recordedAt])
  @@map("zone_params_log")
}

model BucketTargetParams {
  id        Int     @id @default(autoincrement())
  stationId Int     @unique
  station   Station @relation(fields: [stationId], references: [id])

  phLevel               Float
  nutrientConcentration Float
  solutionTemperature   Float
  solutionLvl           Float
  updatedAt             DateTime @updatedAt
}

model ZoneTargetParams {
  id     Int  @id @default(autoincrement())
  zoneId Int  @unique
  zone   Zone @relation(fields: [zoneId], references: [id])

  temperature       Float
  airHumidity       Float
  substrateHumidity Float
  isLightOn         Boolean
  updatedAt         DateTime @updatedAt
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String
  role     Role   @default(USER)

  stations Station[]
}

enum Role {
  ADMIN
  USER
}
